                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\main.c
 0000           _arm_number::
 0000                   .blkb 1
                        .area idata
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0001                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\main.c
 0001                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\hexapod_firebirdv.h
 0001                   .dbsym e arm_number _arm_number c
 0001           _angle_upper_byte::
 0001                   .blkb 1
                        .area idata
 0001 00                .byte 0
                        .area data(ram, con, rel)
 0002                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\hexapod_firebirdv.h
 0002                   .dbsym e angle_upper_byte _angle_upper_byte c
 0002           _angle_lower_byte::
 0002                   .blkb 1
                        .area idata
 0002 00                .byte 0
                        .area data(ram, con, rel)
 0003                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\hexapod_firebirdv.h
 0003                   .dbsym e angle_lower_byte _angle_lower_byte c
 0003           _degree::
 0003                   .blkb 1
                        .area idata
 0003 00                .byte 0
                        .area data(ram, con, rel)
 0004                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\hexapod_firebirdv.h
 0004                   .dbsym e degree _degree c
 0004           _delay_count::
 0004                   .blkb 2
                        .area idata
 0004 0000              .word 0
                        .area data(ram, con, rel)
 0006                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\hexapod_firebirdv.h
 0006                   .dbsym e delay_count _delay_count i
 0006           _serial_communication_interval::
 0006                   .blkb 2
                        .area idata
 0006 0000              .word 0
                        .area data(ram, con, rel)
 0008                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\hexapod_firebirdv.h
 0008                   .dbsym e serial_communication_interval _serial_communication_interval i
 0008           _serial_communication_channel_number::
 0008                   .blkb 1
                        .area idata
 0008 00                .byte 0
                        .area data(ram, con, rel)
 0009                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\hexapod_firebirdv.h
 0009                   .dbsym e serial_communication_channel_number _serial_communication_channel_number c
 0009           _motion_busy::
 0009                   .blkb 1
                        .area idata
 0009 00                .byte 0
                        .area data(ram, con, rel)
 000A                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\hexapod_firebirdv.h
 000A                   .dbsym e motion_busy _motion_busy c
                        .area text(rom, con, rel)
 0000                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\hexapod_firebirdv.h
 0000                   .dbfunc e servo_on _servo_on fV
                        .even
 0000           _servo_on::
 0000                   .dbline -1
 0000                   .dbline 227
 0000           ; /**
 0000           ; 
 0000           ;  hexapod_firebirdv.h : Basic control operations setting ports, defining interfaces, etc. for FirebirdV platform.
 0000           ;  @author Group 10: Abhinav Maurya 10305016
 0000           ;                                  Yogesh Kakde   10305039
 0000           ;                                  Lokesh Rajwani 10305066
 0000           ;  
 0000           ;  AVR Studio Version 4.17, Build 666
 0000           ; 
 0000           ;  Date: 6th November 2010
 0000           ;  
 0000           ;     Make sure that in the configuration options following settings are 
 0000           ;       done for proper operation of the code
 0000           ; 
 0000           ;       Microcontroller: atmega2560
 0000           ;       Frequency: 11059200
 0000           ;       Optimization: -O0 (For more information read section: Selecting proper optimization options 
 0000           ;                                               below figure 4.22 in the hardware manual)
 0000           ; *********************************************************************************/
 0000           ; 
 0000           ; 
 0000           ; /********************************************************************************
 0000           ; 
 0000           ;    Copyright (c) 2010, ERTS Lab IIT Bombay erts@cse.iitb.ac.in               -*- c -*-
 0000           ;    All rights reserved.
 0000           ; 
 0000           ;    Redistribution and use in source and binary forms, with or without
 0000           ;    modification, are permitted provided that the following conditions are met:
 0000           ; 
 0000           ;    * Redistributions of source code must retain the above copyright
 0000           ;      notice, this list of conditions and the following disclaimer.
 0000           ; 
 0000           ;    * Redistributions in binary form must reproduce the above copyright
 0000           ;      notice, this list of conditions and the following disclaimer in
 0000           ;      the documentation and/or other materials provided with the
 0000           ;      distribution.
 0000           ; 
 0000           ;    * Neither the name of the copyright holders nor the names of
 0000           ;      contributors may be used to endorse or promote products derived
 0000           ;      from this software without specific prior written permission.
 0000           ; 
 0000           ;    * Source code can be used for academic purpose. 
 0000           ;        For commercial use permission form the author needs to be taken.
 0000           ; 
 0000           ;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 0000           ;   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 0000           ;   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 0000           ;   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 0000           ;   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 0000           ;   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 0000           ;   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 0000           ;   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 0000           ;   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 0000           ;   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 0000           ;   POSSIBILITY OF SUCH DAMAGE. 
 0000           ; 
 0000           ; ********************************************************************************/
 0000           ; 
 0000           ; 
 0000           ;       // Application: ICC-AVR
 0000           ; // Target: M2560
 0000           ; // Crystal: 11.059Mhz
 0000           ; 
 0000           ; //List of variables supplied by this header file, hexapod_firebirdv.h
 0000           ; /*
 0000           ; unsigned char arm_number;
 0000           ; unsigned char angle_upper_byte; 
 0000           ; unsigned char angle_lower_byte;
 0000           ; unsigned char degree;
 0000           ; unsigned char _1A, _1B, _1C, _2A, _2B, _2C, _3A, _3B, _3C, _4A, _4B, _4C, _5A, _5B, _5C, _6A, _6B, _6C;
 0000           ; unsigned char angle_upper_byte_1A, angle_lower_byte_1A, angle_upper_byte_1B, angle_lower_byte_1B, angle_upper_byte_1C, angle_lower_byte_1C;
 0000           ; unsigned char angle_upper_byte_2A, angle_lower_byte_2A, angle_upper_byte_2B, angle_lower_byte_2B, angle_upper_byte_2C, angle_lower_byte_2C;
 0000           ; unsigned char angle_upper_byte_3A, angle_lower_byte_3A, angle_upper_byte_3B, angle_lower_byte_3B, angle_upper_byte_3C, angle_lower_byte_3C;
 0000           ; unsigned char angle_upper_byte_4A, angle_lower_byte_4A, angle_upper_byte_4B, angle_lower_byte_4B, angle_upper_byte_4C, angle_lower_byte_4C;
 0000           ; unsigned char angle_upper_byte_5A, angle_lower_byte_5A, angle_upper_byte_5B, angle_lower_byte_5B, angle_upper_byte_5C, angle_lower_byte_5C;
 0000           ; unsigned char angle_upper_byte_6A, angle_lower_byte_6A, angle_upper_byte_6B, angle_lower_byte_6B, angle_upper_byte_6C, angle_lower_byte_6C;
 0000           ; unsigned int delay_count;
 0000           ; unsigned int serial_communication_interval;
 0000           ; unsigned char serial_communication_channel_number;
 0000           ; unsigned char remote_data [8];
 0000           ; unsigned char motion_busy;
 0000           ; */
 0000           ; 
 0000           ; //List of functions supplied by this header file, hexapod_firebirdv.h
 0000           ; /*
 0000           ; void servo_on (void);
 0000           ; void servo_off (void);
 0000           ; void reset_SP_LEFT (void);
 0000           ; void set_SP_LEFT (void);
 0000           ; void reset_1A (void);
 0000           ; void set_1A (void);
 0000           ; void reset_1B (void);
 0000           ; void set_1B (void);
 0000           ; void reset_1C (void);
 0000           ; void set_1C (void);
 0000           ; void reset_2A (void);
 0000           ; void set_2A (void);
 0000           ; void reset_2B (void);
 0000           ; void set_2B (void);
 0000           ; void reset_2C (void);
 0000           ; void set_2C (void);
 0000           ; void reset_3A (void);
 0000           ; void set_3A (void);
 0000           ; void reset_3B (void);
 0000           ; void set_3B (void);
 0000           ; void reset_3C (void);
 0000           ; void set_3C (void);
 0000           ; void reset_SP_RIGHT (void);
 0000           ; void set_SP_RIGHT (void);
 0000           ; void reset_4A (void);
 0000           ; void set_4A (void);
 0000           ; void reset_4B (void);
 0000           ; void set_4B (void);
 0000           ; void reset_4C (void);
 0000           ; void set_4C (void);
 0000           ; void reset_5A (void);
 0000           ; void set_5A (void);
 0000           ; void reset_5B (void);
 0000           ; void set_5B (void);
 0000           ; void reset_5C (void);
 0000           ; void set_5C (void);
 0000           ; void reset_6A (void);
 0000           ; void set_6A (void);
 0000           ; void reset_6B (void);
 0000           ; void set_6B (void);
 0000           ; void reset_6C (void);
 0000           ; void set_6C (void);
 0000           ; void delay (int millisec);
 0000           ; void delay_100ms (void);
 0000           ; void delay_250ms (void);
 0000           ; void delay_500ms (void);
 0000           ; void delay_1s (void);
 0000           ; void port_init (void);
 0000           ; void timer1_init (void);
 0000           ; void timer1_compa_isr (void);
 0000           ; void timer1_compb_isr (void);
 0000           ; void timer1_compc_isr (void);
 0000           ; void timer1_ovf_isr (void);
 0000           ; void uart0_init (void);
 0000           ; void uart0_rx_isr (void);
 0000           ; void init_devices (void);
 0000           ; void angle_value_calculation (void);
 0000           ; void angle_1A (unsigned char angle);
 0000           ; void angle_1B (unsigned char angle);
 0000           ; void angle_1C (unsigned char angle);
 0000           ; void angle_2A (unsigned char angle);
 0000           ; void angle_2B (unsigned char angle);
 0000           ; void angle_2C (unsigned char angle);
 0000           ; void angle_3A (unsigned char angle);
 0000           ; void angle_3B (unsigned char angle);
 0000           ; void angle_3C (unsigned char angle);
 0000           ; void angle_4A (unsigned char angle);
 0000           ; void angle_4B (unsigned char angle);
 0000           ; void angle_4C (unsigned char angle);
 0000           ; void angle_5A (unsigned char angle);
 0000           ; void angle_5B (unsigned char angle);
 0000           ; void angle_5C (unsigned char angle);
 0000           ; void angle_6A (unsigned char angle);
 0000           ; void angle_6B (unsigned char angle);
 0000           ; void angle_6C (unsigned char angle);
 0000           ; void buzzer_on (void);
 0000           ; void buzzer_off (void);
 0000           ; */
 0000           ; 
 0000           ; /*
 0000           ; Pin name      Port            Anding (make 0)         Oring (make 1)
 0000           ; SP LEFT       PL1             1111 1101       0xFD            0000 0010       0x02
 0000           ; 
 0000           ; 1A            PD5             1101 1111       0xDF            0010 0000       0x20
 0000           ; 1B            PL2             1111 1011       0xFB            0000 0100       0x04
 0000           ; 1C            PG1             1111 1101       0xFD            0000 0010       0x02
 0000           ; 2A            PL6             1011 1111       0xBF            0100 0000       0x40
 0000           ; 2B            PD4             1110 1111       0xEF            0001 0000       0x10
 0000           ; 2C            PL7             0111 1111       0x7F            1000 0000       0x80
 0000           ; 3A            PH6             1011 1111       0xBF            0100 0000       0x40
 0000           ; 3B            PH4             1110 1111       0xEF            0001 0000       0x10
 0000           ; 3C            PH5             1101 1111       0xDF            0010 0000       0x20
 0000           ; SP RIGHT      PJ7             0111 1111       0x7F            1000 0000       0x80
 0000           ; 4A            PG0             1111 1110       0xFE            0000 0001       0x01
 0000           ; 4B            PD7             0111 1111       0x7F            1000 0000       0x80
 0000           ; 4C            PD6             1011 1111       0xBF            0100 0000       0x40
 0000           ; 5A            PJ5             1101 1111       0xDF            0010 0000       0x20
 0000           ; 5B            PJ6             1011 1111       0xBF            0100 0000       0x40
 0000           ; 5C            PJ4             1110 1111       0xEF            0001 0000       0x10
 0000           ; 6A            PJ3             1111 0111       0XF7            0000 1000       0x08
 0000           ; 6B            PJ1             1111 1101       0xFD            0000 0010       0x02
 0000           ; 6C            PJ2             1111 1011       0xFB            0000 0100       0x04
 0000           ; 
 0000           ; Remote control communication protocoal
 0000           ; transmitted command           received data
 0000           ; 1                                             right joystick x axis 8 bit analog position;    center:0x24; left: 0x3B; right: 0x04
 0000           ; 2                                             right joystick y axis 8 bit analog position;    center:0x24; up: 0x3B; down: 0x04
 0000           ; 3                                             left joystick x axis 8 bit analog position;             center:0x3A; left: 0x23; right: 0x04
 0000           ; 4                                             left joystick y axis 8 bit analog position;             center:0x1F; up: 0x34; down: 0x04
 0000           ; 5                                             right joystick button
 0000           ; 6                                             left joystick button
 0000           ; 7                                             digital switches left 1,2 and right 1,2
 0000           ;                                               bit7: Right 2; bit6: right 1; bit4: left 1; bit3: left 2
 0000           ; 
 0000           ; Received data will be stored in the array unsigned char remote_data [8]; from the location 1 to 7 in the same order as the command.
 0000           ; */
 0000           ; 
 0000           ; #include <iom2560v.h>
 0000           ; #include <macros.h>
 0000           ; 
 0000           ; #define angle(motor, angle) { degree = angle; angle_value_calculation(); angle_upper_byte_motor = angle_upper_byte; angle_lower_byte_motor = angle_lower_byte; }
 0000           ; 
 0000           ; unsigned char arm_number = 0;
 0000           ; unsigned char angle_upper_byte = 0; 
 0000           ; unsigned char angle_lower_byte = 0;
 0000           ; unsigned char degree = 0;
 0000           ; unsigned char _1A, _1B, _1C, _2A, _2B, _2C, _3A, _3B, _3C, _4A, _4B, _4C, _5A, _5B, _5C, _6A, _6B, _6C;
 0000           ; unsigned char angle_upper_byte_1A, angle_lower_byte_1A, angle_upper_byte_1B, angle_lower_byte_1B, angle_upper_byte_1C, angle_lower_byte_1C;
 0000           ; unsigned char angle_upper_byte_2A, angle_lower_byte_2A, angle_upper_byte_2B, angle_lower_byte_2B, angle_upper_byte_2C, angle_lower_byte_2C;
 0000           ; unsigned char angle_upper_byte_3A, angle_lower_byte_3A, angle_upper_byte_3B, angle_lower_byte_3B, angle_upper_byte_3C, angle_lower_byte_3C;
 0000           ; unsigned char angle_upper_byte_4A, angle_lower_byte_4A, angle_upper_byte_4B, angle_lower_byte_4B, angle_upper_byte_4C, angle_lower_byte_4C;
 0000           ; unsigned char angle_upper_byte_5A, angle_lower_byte_5A, angle_upper_byte_5B, angle_lower_byte_5B, angle_upper_byte_5C, angle_lower_byte_5C;
 0000           ; unsigned char angle_upper_byte_6A, angle_lower_byte_6A, angle_upper_byte_6B, angle_lower_byte_6B, angle_upper_byte_6C, angle_lower_byte_6C;
 0000           ; unsigned int delay_count = 0;
 0000           ; //variables relatd to the serial commuication or remote control
 0000           ; unsigned int serial_communication_interval = 0;
 0000           ; unsigned char serial_communication_channel_number  = 0;
 0000           ; unsigned char remote_data [8]; //see remote channel allocation in the notes above
 0000           ; unsigned char motion_busy = 0; //sets to one if any of the motion function is called.
 0000           ; 
 0000           ; void servo_on (void)
 0000           ; { PORTB = PORTB | 0x01; }
 0000                   .dbline 227
 0000 289A              sbi 0x5,0
 0002                   .dbline -2
 0002           L1:
 0002                   .dbline 0 ; func end
 0002 0895              ret
 0004                   .dbend
 0004                   .dbfunc e servo_off _servo_off fV
                        .even
 0004           _servo_off::
 0004                   .dbline -1
 0004                   .dbline 230
 0004           ; 
 0004           ; void servo_off (void)
 0004           ; { PORTB = PORTB & 0xFE; }
 0004                   .dbline 230
 0004 85B1              in R24,0x5
 0006 8E7F              andi R24,254
 0008 85B9              out 0x5,R24
 000A                   .dbline -2
 000A           L2:
 000A                   .dbline 0 ; func end
 000A 0895              ret
 000C                   .dbend
 000C                   .dbfunc e reset_SP_LEFT _reset_SP_LEFT fV
                        .even
 000C           _reset_SP_LEFT::
 000C                   .dbline -1
 000C                   .dbline 233
 000C           ; 
 000C           ; void reset_SP_LEFT (void)
 000C           ; { PORTL = PORTL & 0xFD; }
 000C                   .dbline 233
 000C 80910B01          lds R24,267
 0010 8D7F              andi R24,253
 0012 80930B01          sts 267,R24
 0016                   .dbline -2
 0016           L3:
 0016                   .dbline 0 ; func end
 0016 0895              ret
 0018                   .dbend
 0018                   .dbfunc e set_SP_LEFT _set_SP_LEFT fV
                        .even
 0018           _set_SP_LEFT::
 0018                   .dbline -1
 0018                   .dbline 236
 0018           ; 
 0018           ; void set_SP_LEFT (void)
 0018           ; { PORTL = PORTL | 0x02; }
 0018                   .dbline 236
 0018 80910B01          lds R24,267
 001C 8260              ori R24,2
 001E 80930B01          sts 267,R24
 0022                   .dbline -2
 0022           L4:
 0022                   .dbline 0 ; func end
 0022 0895              ret
 0024                   .dbend
 0024                   .dbfunc e reset_1A _reset_1A fV
                        .even
 0024           _reset_1A::
 0024                   .dbline -1
 0024                   .dbline 239
 0024           ; 
 0024           ; void reset_1A (void)
 0024           ; { PORTD = PORTD & 0xDF; }
 0024                   .dbline 239
 0024 8BB1              in R24,0xb
 0026 8F7D              andi R24,223
 0028 8BB9              out 0xb,R24
 002A                   .dbline -2
 002A           L5:
 002A                   .dbline 0 ; func end
 002A 0895              ret
 002C                   .dbend
 002C                   .dbfunc e set_1A _set_1A fV
                        .even
 002C           _set_1A::
 002C                   .dbline -1
 002C                   .dbline 242
 002C           ; 
 002C           ; void set_1A (void)
 002C           ; { PORTD = PORTD | 0x20; }
 002C                   .dbline 242
 002C 5D9A              sbi 0xb,5
 002E                   .dbline -2
 002E           L6:
 002E                   .dbline 0 ; func end
 002E 0895              ret
 0030                   .dbend
 0030                   .dbfunc e reset_1B _reset_1B fV
                        .even
 0030           _reset_1B::
 0030                   .dbline -1
 0030                   .dbline 245
 0030           ; 
 0030           ; void reset_1B (void)
 0030           ; { PORTL = PORTL & 0xFB; }
 0030                   .dbline 245
 0030 80910B01          lds R24,267
 0034 8B7F              andi R24,251
 0036 80930B01          sts 267,R24
 003A                   .dbline -2
 003A           L7:
 003A                   .dbline 0 ; func end
 003A 0895              ret
 003C                   .dbend
 003C                   .dbfunc e set_1B _set_1B fV
                        .even
 003C           _set_1B::
 003C                   .dbline -1
 003C                   .dbline 248
 003C           ; 
 003C           ; void set_1B (void)
 003C           ; { PORTL = PORTL | 0x04; }
 003C                   .dbline 248
 003C 80910B01          lds R24,267
 0040 8460              ori R24,4
 0042 80930B01          sts 267,R24
 0046                   .dbline -2
 0046           L8:
 0046                   .dbline 0 ; func end
 0046 0895              ret
 0048                   .dbend
 0048                   .dbfunc e reset_1C _reset_1C fV
                        .even
 0048           _reset_1C::
 0048                   .dbline -1
 0048                   .dbline 251
 0048           ; 
 0048           ; void reset_1C (void)
 0048           ; { PORTG = PORTG & 0xFD; }
 0048                   .dbline 251
 0048 84B3              in R24,0x14
 004A 8D7F              andi R24,253
 004C 84BB              out 0x14,R24
 004E                   .dbline -2
 004E           L9:
 004E                   .dbline 0 ; func end
 004E 0895              ret
 0050                   .dbend
 0050                   .dbfunc e set_1C _set_1C fV
                        .even
 0050           _set_1C::
 0050                   .dbline -1
 0050                   .dbline 254
 0050           ; 
 0050           ; void set_1C (void)
 0050           ; { PORTG = PORTG | 0x02; }
 0050                   .dbline 254
 0050 A19A              sbi 0x14,1
 0052                   .dbline -2
 0052           L10:
 0052                   .dbline 0 ; func end
 0052 0895              ret
 0054                   .dbend
 0054                   .dbfunc e reset_2A _reset_2A fV
                        .even
 0054           _reset_2A::
 0054                   .dbline -1
 0054                   .dbline 257
 0054           ; 
 0054           ; void reset_2A (void)
 0054           ; { PORTL = PORTL & 0xBF; }
 0054                   .dbline 257
 0054 80910B01          lds R24,267
 0058 8F7B              andi R24,191
 005A 80930B01          sts 267,R24
 005E                   .dbline -2
 005E           L11:
 005E                   .dbline 0 ; func end
 005E 0895              ret
 0060                   .dbend
 0060                   .dbfunc e set_2A _set_2A fV
                        .even
 0060           _set_2A::
 0060                   .dbline -1
 0060                   .dbline 260
 0060           ; 
 0060           ; void set_2A (void)
 0060           ; { PORTL = PORTL | 0x40; }
 0060                   .dbline 260
 0060 80910B01          lds R24,267
 0064 8064              ori R24,64
 0066 80930B01          sts 267,R24
 006A                   .dbline -2
 006A           L12:
 006A                   .dbline 0 ; func end
 006A 0895              ret
 006C                   .dbend
 006C                   .dbfunc e reset_2B _reset_2B fV
                        .even
 006C           _reset_2B::
 006C                   .dbline -1
 006C                   .dbline 263
 006C           ; 
 006C           ; void reset_2B (void)
 006C           ; { PORTD = PORTD & 0xEF; }
 006C                   .dbline 263
 006C 8BB1              in R24,0xb
 006E 8F7E              andi R24,239
 0070 8BB9              out 0xb,R24
 0072                   .dbline -2
 0072           L13:
 0072                   .dbline 0 ; func end
 0072 0895              ret
 0074                   .dbend
 0074                   .dbfunc e set_2B _set_2B fV
                        .even
 0074           _set_2B::
 0074                   .dbline -1
 0074                   .dbline 266
 0074           ; 
 0074           ; void set_2B (void)
 0074           ; { PORTD = PORTD | 0x10; }
 0074                   .dbline 266
 0074 5C9A              sbi 0xb,4
 0076                   .dbline -2
 0076           L14:
 0076                   .dbline 0 ; func end
 0076 0895              ret
 0078                   .dbend
 0078                   .dbfunc e reset_2C _reset_2C fV
                        .even
 0078           _reset_2C::
 0078                   .dbline -1
 0078                   .dbline 269
 0078           ; 
 0078           ; void reset_2C (void)
 0078           ; { PORTL = PORTL & 0x7F; }
 0078                   .dbline 269
 0078 80910B01          lds R24,267
 007C 8F77              andi R24,127
 007E 80930B01          sts 267,R24
 0082                   .dbline -2
 0082           L15:
 0082                   .dbline 0 ; func end
 0082 0895              ret
 0084                   .dbend
 0084                   .dbfunc e set_2C _set_2C fV
                        .even
 0084           _set_2C::
 0084                   .dbline -1
 0084                   .dbline 272
 0084           ; 
 0084           ; void set_2C (void)
 0084           ; { PORTL = PORTL | 0x80; }
 0084                   .dbline 272
 0084 80910B01          lds R24,267
 0088 8068              ori R24,128
 008A 80930B01          sts 267,R24
 008E                   .dbline -2
 008E           L16:
 008E                   .dbline 0 ; func end
 008E 0895              ret
 0090                   .dbend
 0090                   .dbfunc e reset_3A _reset_3A fV
                        .even
 0090           _reset_3A::
 0090                   .dbline -1
 0090                   .dbline 275
 0090           ; 
 0090           ; void reset_3A (void)
 0090           ; { PORTH = PORTH & 0xBF; }
 0090                   .dbline 275
 0090 80910201          lds R24,258
 0094 8F7B              andi R24,191
 0096 80930201          sts 258,R24
 009A                   .dbline -2
 009A           L17:
 009A                   .dbline 0 ; func end
 009A 0895              ret
 009C                   .dbend
 009C                   .dbfunc e set_3A _set_3A fV
                        .even
 009C           _set_3A::
 009C                   .dbline -1
 009C                   .dbline 278
 009C           ; 
 009C           ; void set_3A (void)
 009C           ; { PORTH = PORTH | 0x40; }
 009C                   .dbline 278
 009C 80910201          lds R24,258
 00A0 8064              ori R24,64
 00A2 80930201          sts 258,R24
 00A6                   .dbline -2
 00A6           L18:
 00A6                   .dbline 0 ; func end
 00A6 0895              ret
 00A8                   .dbend
 00A8                   .dbfunc e reset_3B _reset_3B fV
                        .even
 00A8           _reset_3B::
 00A8                   .dbline -1
 00A8                   .dbline 281
 00A8           ; 
 00A8           ; void reset_3B (void)
 00A8           ; { PORTH = PORTH & 0xEF; }
 00A8                   .dbline 281
 00A8 80910201          lds R24,258
 00AC 8F7E              andi R24,239
 00AE 80930201          sts 258,R24
 00B2                   .dbline -2
 00B2           L19:
 00B2                   .dbline 0 ; func end
 00B2 0895              ret
 00B4                   .dbend
 00B4                   .dbfunc e set_3B _set_3B fV
                        .even
 00B4           _set_3B::
 00B4                   .dbline -1
 00B4                   .dbline 284
 00B4           ; 
 00B4           ; void set_3B (void)
 00B4           ; { PORTH = PORTH | 0x10; }
 00B4                   .dbline 284
 00B4 80910201          lds R24,258
 00B8 8061              ori R24,16
 00BA 80930201          sts 258,R24
 00BE                   .dbline -2
 00BE           L20:
 00BE                   .dbline 0 ; func end
 00BE 0895              ret
 00C0                   .dbend
 00C0                   .dbfunc e reset_3C _reset_3C fV
                        .even
 00C0           _reset_3C::
 00C0                   .dbline -1
 00C0                   .dbline 287
 00C0           ; 
 00C0           ; void reset_3C (void)
 00C0           ; { PORTH = PORTH & 0xDF; }
 00C0                   .dbline 287
 00C0 80910201          lds R24,258
 00C4 8F7D              andi R24,223
 00C6 80930201          sts 258,R24
 00CA                   .dbline -2
 00CA           L21:
 00CA                   .dbline 0 ; func end
 00CA 0895              ret
 00CC                   .dbend
 00CC                   .dbfunc e set_3C _set_3C fV
                        .even
 00CC           _set_3C::
 00CC                   .dbline -1
 00CC                   .dbline 290
 00CC           ; 
 00CC           ; void set_3C (void)
 00CC           ; { PORTH = PORTH | 0x20; }
 00CC                   .dbline 290
 00CC 80910201          lds R24,258
 00D0 8062              ori R24,32
 00D2 80930201          sts 258,R24
 00D6                   .dbline -2
 00D6           L22:
 00D6                   .dbline 0 ; func end
 00D6 0895              ret
 00D8                   .dbend
 00D8                   .dbfunc e reset_SP_RIGHT _reset_SP_RIGHT fV
                        .even
 00D8           _reset_SP_RIGHT::
 00D8                   .dbline -1
 00D8                   .dbline 293
 00D8           ; 
 00D8           ; void reset_SP_RIGHT (void)
 00D8           ; { PORTJ = PORTJ & 0x7F; }
 00D8                   .dbline 293
 00D8 80910501          lds R24,261
 00DC 8F77              andi R24,127
 00DE 80930501          sts 261,R24
 00E2                   .dbline -2
 00E2           L23:
 00E2                   .dbline 0 ; func end
 00E2 0895              ret
 00E4                   .dbend
 00E4                   .dbfunc e set_SP_RIGHT _set_SP_RIGHT fV
                        .even
 00E4           _set_SP_RIGHT::
 00E4                   .dbline -1
 00E4                   .dbline 296
 00E4           ; 
 00E4           ; void set_SP_RIGHT (void)
 00E4           ; { PORTJ = PORTJ | 0x80; }
 00E4                   .dbline 296
 00E4 80910501          lds R24,261
 00E8 8068              ori R24,128
 00EA 80930501          sts 261,R24
 00EE                   .dbline -2
 00EE           L24:
 00EE                   .dbline 0 ; func end
 00EE 0895              ret
 00F0                   .dbend
 00F0                   .dbfunc e reset_4A _reset_4A fV
                        .even
 00F0           _reset_4A::
 00F0                   .dbline -1
 00F0                   .dbline 299
 00F0           ; 
 00F0           ; void reset_4A (void)
 00F0           ; { PORTG = PORTG & 0xFE; }
 00F0                   .dbline 299
 00F0 84B3              in R24,0x14
 00F2 8E7F              andi R24,254
 00F4 84BB              out 0x14,R24
 00F6                   .dbline -2
 00F6           L25:
 00F6                   .dbline 0 ; func end
 00F6 0895              ret
 00F8                   .dbend
 00F8                   .dbfunc e set_4A _set_4A fV
                        .even
 00F8           _set_4A::
 00F8                   .dbline -1
 00F8                   .dbline 302
 00F8           ; 
 00F8           ; void set_4A (void)
 00F8           ; { PORTG = PORTG | 0x01; }
 00F8                   .dbline 302
 00F8 A09A              sbi 0x14,0
 00FA                   .dbline -2
 00FA           L26:
 00FA                   .dbline 0 ; func end
 00FA 0895              ret
 00FC                   .dbend
 00FC                   .dbfunc e reset_4B _reset_4B fV
                        .even
 00FC           _reset_4B::
 00FC                   .dbline -1
 00FC                   .dbline 305
 00FC           ; 
 00FC           ; void reset_4B (void)
 00FC           ; { PORTD = PORTD & 0x7F; }
 00FC                   .dbline 305
 00FC 8BB1              in R24,0xb
 00FE 8F77              andi R24,127
 0100 8BB9              out 0xb,R24
 0102                   .dbline -2
 0102           L27:
 0102                   .dbline 0 ; func end
 0102 0895              ret
 0104                   .dbend
 0104                   .dbfunc e set_4B _set_4B fV
                        .even
 0104           _set_4B::
 0104                   .dbline -1
 0104                   .dbline 308
 0104           ; 
 0104           ; void set_4B (void)
 0104           ; { PORTD = PORTD | 0x80; }
 0104                   .dbline 308
 0104 5F9A              sbi 0xb,7
 0106                   .dbline -2
 0106           L28:
 0106                   .dbline 0 ; func end
 0106 0895              ret
 0108                   .dbend
 0108                   .dbfunc e reset_4C _reset_4C fV
                        .even
 0108           _reset_4C::
 0108                   .dbline -1
 0108                   .dbline 311
 0108           ; 
 0108           ; void reset_4C (void)
 0108           ; { PORTD = PORTD & 0xBF; }
 0108                   .dbline 311
 0108 8BB1              in R24,0xb
 010A 8F7B              andi R24,191
 010C 8BB9              out 0xb,R24
 010E                   .dbline -2
 010E           L29:
 010E                   .dbline 0 ; func end
 010E 0895              ret
 0110                   .dbend
 0110                   .dbfunc e set_4C _set_4C fV
                        .even
 0110           _set_4C::
 0110                   .dbline -1
 0110                   .dbline 314
 0110           ; 
 0110           ; void set_4C (void)
 0110           ; { PORTD = PORTD | 0x40; }
 0110                   .dbline 314
 0110 5E9A              sbi 0xb,6
 0112                   .dbline -2
 0112           L30:
 0112                   .dbline 0 ; func end
 0112 0895              ret
 0114                   .dbend
 0114                   .dbfunc e reset_5A _reset_5A fV
                        .even
 0114           _reset_5A::
 0114                   .dbline -1
 0114                   .dbline 317
 0114           ; 
 0114           ; void reset_5A (void)
 0114           ; { PORTJ = PORTJ & 0xDF; }
 0114                   .dbline 317
 0114 80910501          lds R24,261
 0118 8F7D              andi R24,223
 011A 80930501          sts 261,R24
 011E                   .dbline -2
 011E           L31:
 011E                   .dbline 0 ; func end
 011E 0895              ret
 0120                   .dbend
 0120                   .dbfunc e set_5A _set_5A fV
                        .even
 0120           _set_5A::
 0120                   .dbline -1
 0120                   .dbline 320
 0120           ; 
 0120           ; void set_5A (void)
 0120           ; { PORTJ = PORTJ | 0x20; }
 0120                   .dbline 320
 0120 80910501          lds R24,261
 0124 8062              ori R24,32
 0126 80930501          sts 261,R24
 012A                   .dbline -2
 012A           L32:
 012A                   .dbline 0 ; func end
 012A 0895              ret
 012C                   .dbend
 012C                   .dbfunc e reset_5B _reset_5B fV
                        .even
 012C           _reset_5B::
 012C                   .dbline -1
 012C                   .dbline 323
 012C           ; 
 012C           ; void reset_5B (void)
 012C           ; { PORTJ = PORTJ & 0xBF; }
 012C                   .dbline 323
 012C 80910501          lds R24,261
 0130 8F7B              andi R24,191
 0132 80930501          sts 261,R24
 0136                   .dbline -2
 0136           L33:
 0136                   .dbline 0 ; func end
 0136 0895              ret
 0138                   .dbend
 0138                   .dbfunc e set_5B _set_5B fV
                        .even
 0138           _set_5B::
 0138                   .dbline -1
 0138                   .dbline 326
 0138           ; 
 0138           ; void set_5B (void)
 0138           ; { PORTJ = PORTJ | 0x40; }
 0138                   .dbline 326
 0138 80910501          lds R24,261
 013C 8064              ori R24,64
 013E 80930501          sts 261,R24
 0142                   .dbline -2
 0142           L34:
 0142                   .dbline 0 ; func end
 0142 0895              ret
 0144                   .dbend
 0144                   .dbfunc e reset_5C _reset_5C fV
                        .even
 0144           _reset_5C::
 0144                   .dbline -1
 0144                   .dbline 329
 0144           ; 
 0144           ; void reset_5C (void)
 0144           ; { PORTJ = PORTJ & 0xEF; }
 0144                   .dbline 329
 0144 80910501          lds R24,261
 0148 8F7E              andi R24,239
 014A 80930501          sts 261,R24
 014E                   .dbline -2
 014E           L35:
 014E                   .dbline 0 ; func end
 014E 0895              ret
 0150                   .dbend
 0150                   .dbfunc e set_5C _set_5C fV
                        .even
 0150           _set_5C::
 0150                   .dbline -1
 0150                   .dbline 332
 0150           ; 
 0150           ; void set_5C (void)
 0150           ; { PORTJ = PORTJ | 0x10; }
 0150                   .dbline 332
 0150 80910501          lds R24,261
 0154 8061              ori R24,16
 0156 80930501          sts 261,R24
 015A                   .dbline -2
 015A           L36:
 015A                   .dbline 0 ; func end
 015A 0895              ret
 015C                   .dbend
 015C                   .dbfunc e reset_6A _reset_6A fV
                        .even
 015C           _reset_6A::
 015C                   .dbline -1
 015C                   .dbline 335
 015C           ; 
 015C           ; void reset_6A (void)
 015C           ; { PORTJ = PORTJ & 0xF7; }
 015C                   .dbline 335
 015C 80910501          lds R24,261
 0160 877F              andi R24,247
 0162 80930501          sts 261,R24
 0166                   .dbline -2
 0166           L37:
 0166                   .dbline 0 ; func end
 0166 0895              ret
 0168                   .dbend
 0168                   .dbfunc e set_6A _set_6A fV
                        .even
 0168           _set_6A::
 0168                   .dbline -1
 0168                   .dbline 338
 0168           ; 
 0168           ; void set_6A (void)
 0168           ; { PORTJ = PORTJ | 0x08; }
 0168                   .dbline 338
 0168 80910501          lds R24,261
 016C 8860              ori R24,8
 016E 80930501          sts 261,R24
 0172                   .dbline -2
 0172           L38:
 0172                   .dbline 0 ; func end
 0172 0895              ret
 0174                   .dbend
 0174                   .dbfunc e reset_6B _reset_6B fV
                        .even
 0174           _reset_6B::
 0174                   .dbline -1
 0174                   .dbline 341
 0174           ; 
 0174           ; void reset_6B (void)
 0174           ; { PORTJ = PORTJ & 0xFD; }
 0174                   .dbline 341
 0174 80910501          lds R24,261
 0178 8D7F              andi R24,253
 017A 80930501          sts 261,R24
 017E                   .dbline -2
 017E           L39:
 017E                   .dbline 0 ; func end
 017E 0895              ret
 0180                   .dbend
 0180                   .dbfunc e set_6B _set_6B fV
                        .even
 0180           _set_6B::
 0180                   .dbline -1
 0180                   .dbline 344
 0180           ; 
 0180           ; void set_6B (void)
 0180           ; { PORTJ = PORTJ | 0x02; }
 0180                   .dbline 344
 0180 80910501          lds R24,261
 0184 8260              ori R24,2
 0186 80930501          sts 261,R24
 018A                   .dbline -2
 018A           L40:
 018A                   .dbline 0 ; func end
 018A 0895              ret
 018C                   .dbend
 018C                   .dbfunc e reset_6C _reset_6C fV
                        .even
 018C           _reset_6C::
 018C                   .dbline -1
 018C                   .dbline 347
 018C           ; 
 018C           ; void reset_6C (void)
 018C           ; { PORTJ = PORTJ & 0xFB; }
 018C                   .dbline 347
 018C 80910501          lds R24,261
 0190 8B7F              andi R24,251
 0192 80930501          sts 261,R24
 0196                   .dbline -2
 0196           L41:
 0196                   .dbline 0 ; func end
 0196 0895              ret
 0198                   .dbend
 0198                   .dbfunc e set_6C _set_6C fV
                        .even
 0198           _set_6C::
 0198                   .dbline -1
 0198                   .dbline 350
 0198           ; 
 0198           ; void set_6C (void)
 0198           ; { PORTJ = PORTJ | 0x04; }
 0198                   .dbline 350
 0198 80910501          lds R24,261
 019C 8460              ori R24,4
 019E 80930501          sts 261,R24
 01A2                   .dbline -2
 01A2           L42:
 01A2                   .dbline 0 ; func end
 01A2 0895              ret
 01A4                   .dbend
 01A4                   .dbfunc e delay _delay fV
 01A4           ;       millisec -> R10,R11
                        .even
 01A4           _delay::
 01A4 AA92              st -y,R10
 01A6 BA92              st -y,R11
 01A8 5801              movw R10,R16
 01AA                   .dbline -1
 01AA                   .dbline 353
 01AA           ; 
 01AA           ; void delay(int millisec)
 01AA           ; {
 01AA                   .dbline 354
 01AA           ;  if(millisec <=0) return;
 01AA 2224              clr R2
 01AC 3324              clr R3
 01AE 2A14              cp R2,R10
 01B0 3B04              cpc R3,R11
 01B2 0CF0              brlt L44
 01B4           X0:
 01B4                   .dbline 354
 01B4 14C0              xjmp L43
 01B6           L44:
 01B6                   .dbline 355
 01B6           ;  delay_count = 0;
 01B6 2224              clr R2
 01B8 3324              clr R3
 01BA 30920500          sts _delay_count+1,R3
 01BE 20920400          sts _delay_count,R2
 01C2           L46:
 01C2                   .dbline 356
 01C2           ;  while(delay_count*5 < millisec*2);
 01C2           L47:
 01C2                   .dbline 356
 01C2 20910400          lds R18,_delay_count
 01C6 30910500          lds R19,_delay_count+1
 01CA 05E0              ldi R16,5
 01CC 10E0              ldi R17,0
 01CE 0E940000          xcall empy16s
 01D2 1501              movw R2,R10
 01D4 220C              lsl R2
 01D6 331C              rol R3
 01D8 0215              cp R16,R2
 01DA 1305              cpc R17,R3
 01DC 90F3              brlo L46
 01DE           X1:
 01DE                   .dbline -2
 01DE           L43:
 01DE                   .dbline 0 ; func end
 01DE B990              ld R11,y+
 01E0 A990              ld R10,y+
 01E2 0895              ret
 01E4                   .dbsym r millisec 10 I
 01E4                   .dbend
 01E4                   .dbfunc e delay_100ms _delay_100ms fV
                        .even
 01E4           _delay_100ms::
 01E4                   .dbline -1
 01E4                   .dbline 360
 01E4           ; }
 01E4           ; 
 01E4           ; void delay_100ms(void)
 01E4           ; {
 01E4                   .dbline 361
 01E4           ;  delay_count = 0;
 01E4 2224              clr R2
 01E6 3324              clr R3
 01E8 30920500          sts _delay_count+1,R3
 01EC 20920400          sts _delay_count,R2
 01F0           L50:
 01F0                   .dbline 362
 01F0           ;  while(delay_count < 40);
 01F0           L51:
 01F0                   .dbline 362
 01F0 80910400          lds R24,_delay_count
 01F4 90910500          lds R25,_delay_count+1
 01F8 8832              cpi R24,40
 01FA E0E0              ldi R30,0
 01FC 9E07              cpc R25,R30
 01FE C0F3              brlo L50
 0200           X2:
 0200                   .dbline -2
 0200           L49:
 0200                   .dbline 0 ; func end
 0200 0895              ret
 0202                   .dbend
 0202                   .dbfunc e delay_250ms _delay_250ms fV
                        .even
 0202           _delay_250ms::
 0202                   .dbline -1
 0202                   .dbline 366
 0202           ; }
 0202           ; 
 0202           ; void delay_250ms(void)
 0202           ; {
 0202                   .dbline 367
 0202           ;  delay_count = 0;
 0202 2224              clr R2
 0204 3324              clr R3
 0206 30920500          sts _delay_count+1,R3
 020A 20920400          sts _delay_count,R2
 020E           L54:
 020E                   .dbline 368
 020E           ;  while(delay_count < 100);
 020E           L55:
 020E                   .dbline 368
 020E 80910400          lds R24,_delay_count
 0212 90910500          lds R25,_delay_count+1
 0216 8436              cpi R24,100
 0218 E0E0              ldi R30,0
 021A 9E07              cpc R25,R30
 021C C0F3              brlo L54
 021E           X3:
 021E                   .dbline -2
 021E           L53:
 021E                   .dbline 0 ; func end
 021E 0895              ret
 0220                   .dbend
 0220                   .dbfunc e delay_500ms _delay_500ms fV
                        .even
 0220           _delay_500ms::
 0220                   .dbline -1
 0220                   .dbline 372
 0220           ; }
 0220           ; 
 0220           ; void delay_500ms(void)
 0220           ; {
 0220                   .dbline 373
 0220           ;  delay_count = 0;
 0220 2224              clr R2
 0222 3324              clr R3
 0224 30920500          sts _delay_count+1,R3
 0228 20920400          sts _delay_count,R2
 022C           L58:
 022C                   .dbline 374
 022C           ;  while(delay_count < 200);
 022C           L59:
 022C                   .dbline 374
 022C 80910400          lds R24,_delay_count
 0230 90910500          lds R25,_delay_count+1
 0234 883C              cpi R24,200
 0236 E0E0              ldi R30,0
 0238 9E07              cpc R25,R30
 023A C0F3              brlo L58
 023C           X4:
 023C                   .dbline -2
 023C           L57:
 023C                   .dbline 0 ; func end
 023C 0895              ret
 023E                   .dbend
 023E                   .dbfunc e delay_1s _delay_1s fV
                        .even
 023E           _delay_1s::
 023E                   .dbline -1
 023E                   .dbline 378
 023E           ; }
 023E           ; 
 023E           ; void delay_1s(void)
 023E           ; {
 023E                   .dbline 379
 023E           ;  delay_count = 0;
 023E 2224              clr R2
 0240 3324              clr R3
 0242 30920500          sts _delay_count+1,R3
 0246 20920400          sts _delay_count,R2
 024A           L62:
 024A                   .dbline 380
 024A           ;  while(delay_count < 400);
 024A           L63:
 024A                   .dbline 380
 024A 80910400          lds R24,_delay_count
 024E 90910500          lds R25,_delay_count+1
 0252 8039              cpi R24,144
 0254 E1E0              ldi R30,1
 0256 9E07              cpc R25,R30
 0258 C0F3              brlo L62
 025A           X5:
 025A                   .dbline -2
 025A           L61:
 025A                   .dbline 0 ; func end
 025A 0895              ret
 025C                   .dbend
 025C                   .dbfunc e port_init _port_init fV
                        .even
 025C           _port_init::
 025C                   .dbline -1
 025C                   .dbline 384
 025C           ; }
 025C           ; 
 025C           ; void port_init(void)
 025C           ; {
 025C                   .dbline 385
 025C           ;  PORTA = 0x00;
 025C 2224              clr R2
 025E 22B8              out 0x2,R2
 0260                   .dbline 386
 0260           ;  DDRA  = 0xFF;
 0260 8FEF              ldi R24,255
 0262 81B9              out 0x1,R24
 0264                   .dbline 387
 0264           ;  PORTB = 0x00;
 0264 25B8              out 0x5,R2
 0266                   .dbline 388
 0266           ;  DDRB  = 0x01;
 0266 81E0              ldi R24,1
 0268 84B9              out 0x4,R24
 026A                   .dbline 389
 026A           ;  PORTC = 0x00; //m103 output only
 026A 28B8              out 0x8,R2
 026C                   .dbline 390
 026C           ;  DDRC  = 0xFF;
 026C 8FEF              ldi R24,255
 026E 87B9              out 0x7,R24
 0270                   .dbline 391
 0270           ;  PORTD = 0x00;
 0270 2BB8              out 0xb,R2
 0272                   .dbline 392
 0272           ;  DDRD  = 0xF0;
 0272 80EF              ldi R24,240
 0274 8AB9              out 0xa,R24
 0276                   .dbline 393
 0276           ;  PORTE = 0x00;
 0276 2EB8              out 0xe,R2
 0278                   .dbline 394
 0278           ;  DDRE  = 0x00;
 0278 2DB8              out 0xd,R2
 027A                   .dbline 395
 027A           ;  PORTF = 0x00;
 027A 21BA              out 0x11,R2
 027C                   .dbline 396
 027C           ;  DDRF  = 0x00;
 027C 20BA              out 0x10,R2
 027E                   .dbline 397
 027E           ;  PORTG = 0x00;
 027E 24BA              out 0x14,R2
 0280                   .dbline 398
 0280           ;  DDRG  = 0x03;
 0280 83E0              ldi R24,3
 0282 83BB              out 0x13,R24
 0284                   .dbline 399
 0284           ;  PORTH = 0x00;
 0284 20920201          sts 258,R2
 0288                   .dbline 400
 0288           ;  DDRH  = 0x70;
 0288 80E7              ldi R24,112
 028A 80930101          sts 257,R24
 028E                   .dbline 401
 028E           ;  PORTJ = 0x00;
 028E 20920501          sts 261,R2
 0292                   .dbline 402
 0292           ;  DDRJ  = 0xFE; //0xFE original
 0292 8EEF              ldi R24,254
 0294 80930401          sts 260,R24
 0298                   .dbline 403
 0298           ;  PORTK = 0x00;
 0298 20920801          sts 264,R2
 029C                   .dbline 404
 029C           ;  DDRK  = 0x00;
 029C 20920701          sts 263,R2
 02A0                   .dbline 405
 02A0           ;  PORTL = 0x00;
 02A0 20920B01          sts 267,R2
 02A4                   .dbline 406
 02A4           ;  DDRL  = 0xC7;
 02A4 87EC              ldi R24,199
 02A6 80930A01          sts 266,R24
 02AA                   .dbline -2
 02AA           L65:
 02AA                   .dbline 0 ; func end
 02AA 0895              ret
 02AC                   .dbend
 02AC                   .dbfunc e timer1_init _timer1_init fV
                        .even
 02AC           _timer1_init::
 02AC                   .dbline -1
 02AC                   .dbline 414
 02AC           ; }
 02AC           ; 
 02AC           ; //TIMER1 initialize - prescale:1
 02AC           ; // WGM: 0) Normal, TOP=0xFFFF
 02AC           ; // desired value: 400Hz
 02AC           ; // actual value: 400.007Hz (0.0%)
 02AC           ; void timer1_init(void)
 02AC           ; {
 02AC                   .dbline 415
 02AC           ;  TCCR1B = 0x00; //stop
 02AC 2224              clr R2
 02AE 20928100          sts 129,R2
 02B2                   .dbline 416
 02B2           ;  TCNT1H = 0x94; //setup
 02B2 84E9              ldi R24,148
 02B4 80938500          sts 133,R24
 02B8                   .dbline 417
 02B8           ;  TCNT1L = 0x01;
 02B8 81E0              ldi R24,1
 02BA 80938400          sts 132,R24
 02BE                   .dbline 418
 02BE           ;  OCR1AH = 0x6B;
 02BE 8BE6              ldi R24,107
 02C0 80938900          sts 137,R24
 02C4                   .dbline 419
 02C4           ;  OCR1AL = 0xFF;
 02C4 8FEF              ldi R24,255
 02C6 80938800          sts 136,R24
 02CA                   .dbline 420
 02CA           ;  OCR1BH = 0x6B;
 02CA 8BE6              ldi R24,107
 02CC 80938B00          sts 139,R24
 02D0                   .dbline 421
 02D0           ;  OCR1BL = 0xFF;
 02D0 8FEF              ldi R24,255
 02D2 80938A00          sts 138,R24
 02D6                   .dbline 422
 02D6           ;  OCR1CH = 0x00;
 02D6 20928D00          sts 141,R2
 02DA                   .dbline 423
 02DA           ;  OCR1CL = 0x00;
 02DA 20928C00          sts 140,R2
 02DE                   .dbline 424
 02DE           ;  ICR1H  = 0x6B;
 02DE 8BE6              ldi R24,107
 02E0 80938700          sts 135,R24
 02E4                   .dbline 425
 02E4           ;  ICR1L  = 0xFF;
 02E4 8FEF              ldi R24,255
 02E6 80938600          sts 134,R24
 02EA                   .dbline 426
 02EA           ;  TCCR1A = 0x00;
 02EA 20928000          sts 128,R2
 02EE                   .dbline 427
 02EE           ;  TCCR1C = 0x00;
 02EE 20928200          sts 130,R2
 02F2                   .dbline 428
 02F2           ;  TCCR1B = 0x01; //start Timer
 02F2 81E0              ldi R24,1
 02F4 80938100          sts 129,R24
 02F8                   .dbline -2
 02F8           L66:
 02F8                   .dbline 0 ; func end
 02F8 0895              ret
 02FA                   .dbend
                        .area vector(rom, abs)
                        .org 68
 0044 0C947D01          jmp _timer1_compa_isr
                        .area text(rom, con, rel)
 02FA                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\hexapod_firebirdv.h
 02FA                   .dbfunc e timer1_compa_isr _timer1_compa_isr fV
                        .even
 02FA           _timer1_compa_isr::
 02FA 0A92              st -y,R0
 02FC 1A92              st -y,R1
 02FE 2A92              st -y,R2
 0300 3A92              st -y,R3
 0302 4A92              st -y,R4
 0304 5A92              st -y,R5
 0306 6A92              st -y,R6
 0308 7A92              st -y,R7
 030A 8A92              st -y,R8
 030C 9A92              st -y,R9
 030E 0A93              st -y,R16
 0310 1A93              st -y,R17
 0312 2A93              st -y,R18
 0314 3A93              st -y,R19
 0316 8A93              st -y,R24
 0318 9A93              st -y,R25
 031A AA93              st -y,R26
 031C BA93              st -y,R27
 031E EA93              st -y,R30
 0320 FA93              st -y,R31
 0322 0FB6              in R0,0x3f
 0324 0A92              st -y,R0
 0326                   .dbline -1
 0326                   .dbline 433
 0326           ; }
 0326           ; 
 0326           ; #pragma interrupt_handler timer1_compa_isr:iv_TIM1_COMPA
 0326           ; void timer1_compa_isr(void)
 0326           ; {
 0326                   .dbline 435
 0326           ;  //compare occured TCNT1=OCR1A
 0326           ;  if (arm_number == 0) { reset_1A(); }
 0326 20900000          lds R2,_arm_number
 032A 2220              tst R2
 032C 09F4              brne L68
 032E           X6:
 032E                   .dbline 435
 032E                   .dbline 435
 032E 7ADE              xcall _reset_1A
 0330                   .dbline 435
 0330           L68:
 0330                   .dbline 436
 0330           ;  if (arm_number == 1) { reset_2A(); }
 0330 80910000          lds R24,_arm_number
 0334 8130              cpi R24,1
 0336 09F4              brne L70
 0338           X7:
 0338                   .dbline 436
 0338                   .dbline 436
 0338 8DDE              xcall _reset_2A
 033A                   .dbline 436
 033A           L70:
 033A                   .dbline 437
 033A           ;  if (arm_number == 2) { reset_3A(); }
 033A 80910000          lds R24,_arm_number
 033E 8230              cpi R24,2
 0340 09F4              brne L72
 0342           X8:
 0342                   .dbline 437
 0342                   .dbline 437
 0342 A6DE              xcall _reset_3A
 0344                   .dbline 437
 0344           L72:
 0344                   .dbline 438
 0344           ;  if (arm_number == 3) { reset_4A(); }
 0344 80910000          lds R24,_arm_number
 0348 8330              cpi R24,3
 034A 09F4              brne L74
 034C           X9:
 034C                   .dbline 438
 034C                   .dbline 438
 034C D1DE              xcall _reset_4A
 034E                   .dbline 438
 034E           L74:
 034E                   .dbline 439
 034E           ;  if (arm_number == 4) { reset_5A(); }
 034E 80910000          lds R24,_arm_number
 0352 8430              cpi R24,4
 0354 09F4              brne L76
 0356           X10:
 0356                   .dbline 439
 0356                   .dbline 439
 0356 DEDE              xcall _reset_5A
 0358                   .dbline 439
 0358           L76:
 0358                   .dbline 440
 0358           ;  if (arm_number == 5) { reset_6A(); }
 0358 80910000          lds R24,_arm_number
 035C 8530              cpi R24,5
 035E 09F4              brne L78
 0360           X11:
 0360                   .dbline 440
 0360                   .dbline 440
 0360 FDDE              xcall _reset_6A
 0362                   .dbline 440
 0362           L78:
 0362                   .dbline -2
 0362           L67:
 0362                   .dbline 0 ; func end
 0362 0990              ld R0,y+
 0364 0FBE              out 0x3f,R0
 0366 F991              ld R31,y+
 0368 E991              ld R30,y+
 036A B991              ld R27,y+
 036C A991              ld R26,y+
 036E 9991              ld R25,y+
 0370 8991              ld R24,y+
 0372 3991              ld R19,y+
 0374 2991              ld R18,y+
 0376 1991              ld R17,y+
 0378 0991              ld R16,y+
 037A 9990              ld R9,y+
 037C 8990              ld R8,y+
 037E 7990              ld R7,y+
 0380 6990              ld R6,y+
 0382 5990              ld R5,y+
 0384 4990              ld R4,y+
 0386 3990              ld R3,y+
 0388 2990              ld R2,y+
 038A 1990              ld R1,y+
 038C 0990              ld R0,y+
 038E 1895              reti
 0390                   .dbend
                        .area vector(rom, abs)
                        .org 72
 0048 0C94C801          jmp _timer1_compb_isr
                        .area text(rom, con, rel)
 0390                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\hexapod_firebirdv.h
 0390                   .dbfunc e timer1_compb_isr _timer1_compb_isr fV
                        .even
 0390           _timer1_compb_isr::
 0390 0A92              st -y,R0
 0392 1A92              st -y,R1
 0394 2A92              st -y,R2
 0396 3A92              st -y,R3
 0398 4A92              st -y,R4
 039A 5A92              st -y,R5
 039C 6A92              st -y,R6
 039E 7A92              st -y,R7
 03A0 8A92              st -y,R8
 03A2 9A92              st -y,R9
 03A4 0A93              st -y,R16
 03A6 1A93              st -y,R17
 03A8 2A93              st -y,R18
 03AA 3A93              st -y,R19
 03AC 8A93              st -y,R24
 03AE 9A93              st -y,R25
 03B0 AA93              st -y,R26
 03B2 BA93              st -y,R27
 03B4 EA93              st -y,R30
 03B6 FA93              st -y,R31
 03B8 0FB6              in R0,0x3f
 03BA 0A92              st -y,R0
 03BC                   .dbline -1
 03BC                   .dbline 445
 03BC           ; }
 03BC           ; 
 03BC           ; #pragma interrupt_handler timer1_compb_isr:iv_TIM1_COMPB
 03BC           ; void timer1_compb_isr(void)
 03BC           ; {
 03BC                   .dbline 447
 03BC           ;  //compare occured TCNT1=OCR1B
 03BC           ;  if (arm_number == 0) { reset_1B(); }
 03BC 20900000          lds R2,_arm_number
 03C0 2220              tst R2
 03C2 09F4              brne L81
 03C4           X12:
 03C4                   .dbline 447
 03C4                   .dbline 447
 03C4 35DE              xcall _reset_1B
 03C6                   .dbline 447
 03C6           L81:
 03C6                   .dbline 448
 03C6           ;  if (arm_number == 1) { reset_2B(); }
 03C6 80910000          lds R24,_arm_number
 03CA 8130              cpi R24,1
 03CC 09F4              brne L83
 03CE           X13:
 03CE                   .dbline 448
 03CE                   .dbline 448
 03CE 4EDE              xcall _reset_2B
 03D0                   .dbline 448
 03D0           L83:
 03D0                   .dbline 449
 03D0           ;  if (arm_number == 2) { reset_3B(); }
 03D0 80910000          lds R24,_arm_number
 03D4 8230              cpi R24,2
 03D6 09F4              brne L85
 03D8           X14:
 03D8                   .dbline 449
 03D8                   .dbline 449
 03D8 67DE              xcall _reset_3B
 03DA                   .dbline 449
 03DA           L85:
 03DA                   .dbline 450
 03DA           ;  if (arm_number == 3) { reset_4B(); }
 03DA 80910000          lds R24,_arm_number
 03DE 8330              cpi R24,3
 03E0 09F4              brne L87
 03E2           X15:
 03E2                   .dbline 450
 03E2                   .dbline 450
 03E2 8CDE              xcall _reset_4B
 03E4                   .dbline 450
 03E4           L87:
 03E4                   .dbline 451
 03E4           ;  if (arm_number == 4) { reset_5B(); }
 03E4 80910000          lds R24,_arm_number
 03E8 8430              cpi R24,4
 03EA 09F4              brne L89
 03EC           X16:
 03EC                   .dbline 451
 03EC                   .dbline 451
 03EC 9FDE              xcall _reset_5B
 03EE                   .dbline 451
 03EE           L89:
 03EE                   .dbline 452
 03EE           ;  if (arm_number == 5) { reset_6B(); }
 03EE 80910000          lds R24,_arm_number
 03F2 8530              cpi R24,5
 03F4 09F4              brne L91
 03F6           X17:
 03F6                   .dbline 452
 03F6                   .dbline 452
 03F6 BEDE              xcall _reset_6B
 03F8                   .dbline 452
 03F8           L91:
 03F8                   .dbline -2
 03F8           L80:
 03F8                   .dbline 0 ; func end
 03F8 0990              ld R0,y+
 03FA 0FBE              out 0x3f,R0
 03FC F991              ld R31,y+
 03FE E991              ld R30,y+
 0400 B991              ld R27,y+
 0402 A991              ld R26,y+
 0404 9991              ld R25,y+
 0406 8991              ld R24,y+
 0408 3991              ld R19,y+
 040A 2991              ld R18,y+
 040C 1991              ld R17,y+
 040E 0991              ld R16,y+
 0410 9990              ld R9,y+
 0412 8990              ld R8,y+
 0414 7990              ld R7,y+
 0416 6990              ld R6,y+
 0418 5990              ld R5,y+
 041A 4990              ld R4,y+
 041C 3990              ld R3,y+
 041E 2990              ld R2,y+
 0420 1990              ld R1,y+
 0422 0990              ld R0,y+
 0424 1895              reti
 0426                   .dbend
                        .area vector(rom, abs)
                        .org 76
 004C 0C941302          jmp _timer1_compc_isr
                        .area text(rom, con, rel)
 0426                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\hexapod_firebirdv.h
 0426                   .dbfunc e timer1_compc_isr _timer1_compc_isr fV
                        .even
 0426           _timer1_compc_isr::
 0426 0A92              st -y,R0
 0428 1A92              st -y,R1
 042A 2A92              st -y,R2
 042C 3A92              st -y,R3
 042E 4A92              st -y,R4
 0430 5A92              st -y,R5
 0432 6A92              st -y,R6
 0434 7A92              st -y,R7
 0436 8A92              st -y,R8
 0438 9A92              st -y,R9
 043A 0A93              st -y,R16
 043C 1A93              st -y,R17
 043E 2A93              st -y,R18
 0440 3A93              st -y,R19
 0442 8A93              st -y,R24
 0444 9A93              st -y,R25
 0446 AA93              st -y,R26
 0448 BA93              st -y,R27
 044A EA93              st -y,R30
 044C FA93              st -y,R31
 044E 0FB6              in R0,0x3f
 0450 0A92              st -y,R0
 0452                   .dbline -1
 0452                   .dbline 457
 0452           ; }
 0452           ; 
 0452           ; #pragma interrupt_handler timer1_compc_isr:iv_TIM1_COMPC
 0452           ; void timer1_compc_isr(void)
 0452           ; {
 0452                   .dbline 459
 0452           ;  //compare occured TCNT1=OCR1c
 0452           ;  if (arm_number == 0) { reset_1C(); }
 0452 20900000          lds R2,_arm_number
 0456 2220              tst R2
 0458 09F4              brne L94
 045A           X18:
 045A                   .dbline 459
 045A                   .dbline 459
 045A F6DD              xcall _reset_1C
 045C                   .dbline 459
 045C           L94:
 045C                   .dbline 460
 045C           ;  if (arm_number == 1) { reset_2C(); }
 045C 80910000          lds R24,_arm_number
 0460 8130              cpi R24,1
 0462 09F4              brne L96
 0464           X19:
 0464                   .dbline 460
 0464                   .dbline 460
 0464 09DE              xcall _reset_2C
 0466                   .dbline 460
 0466           L96:
 0466                   .dbline 461
 0466           ;  if (arm_number == 2) { reset_3C(); }
 0466 80910000          lds R24,_arm_number
 046A 8230              cpi R24,2
 046C 09F4              brne L98
 046E           X20:
 046E                   .dbline 461
 046E                   .dbline 461
 046E 28DE              xcall _reset_3C
 0470                   .dbline 461
 0470           L98:
 0470                   .dbline 462
 0470           ;  if (arm_number == 3) { reset_4C(); }
 0470 80910000          lds R24,_arm_number
 0474 8330              cpi R24,3
 0476 09F4              brne L100
 0478           X21:
 0478                   .dbline 462
 0478                   .dbline 462
 0478 47DE              xcall _reset_4C
 047A                   .dbline 462
 047A           L100:
 047A                   .dbline 463
 047A           ;  if (arm_number == 4) { reset_5C(); }
 047A 80910000          lds R24,_arm_number
 047E 8430              cpi R24,4
 0480 09F4              brne L102
 0482           X22:
 0482                   .dbline 463
 0482                   .dbline 463
 0482 60DE              xcall _reset_5C
 0484                   .dbline 463
 0484           L102:
 0484                   .dbline 464
 0484           ;  if (arm_number == 5) { reset_6C(); }
 0484 80910000          lds R24,_arm_number
 0488 8530              cpi R24,5
 048A 09F4              brne L104
 048C           X23:
 048C                   .dbline 464
 048C                   .dbline 464
 048C 7FDE              xcall _reset_6C
 048E                   .dbline 464
 048E           L104:
 048E                   .dbline -2
 048E           L93:
 048E                   .dbline 0 ; func end
 048E 0990              ld R0,y+
 0490 0FBE              out 0x3f,R0
 0492 F991              ld R31,y+
 0494 E991              ld R30,y+
 0496 B991              ld R27,y+
 0498 A991              ld R26,y+
 049A 9991              ld R25,y+
 049C 8991              ld R24,y+
 049E 3991              ld R19,y+
 04A0 2991              ld R18,y+
 04A2 1991              ld R17,y+
 04A4 0991              ld R16,y+
 04A6 9990              ld R9,y+
 04A8 8990              ld R8,y+
 04AA 7990              ld R7,y+
 04AC 6990              ld R6,y+
 04AE 5990              ld R5,y+
 04B0 4990              ld R4,y+
 04B2 3990              ld R3,y+
 04B4 2990              ld R2,y+
 04B6 1990              ld R1,y+
 04B8 0990              ld R0,y+
 04BA 1895              reti
 04BC                   .dbend
                        .area vector(rom, abs)
                        .org 80
 0050 0C945E02          jmp _timer1_ovf_isr
                        .area text(rom, con, rel)
 04BC                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\hexapod_firebirdv.h
 04BC                   .dbfunc e timer1_ovf_isr _timer1_ovf_isr fV
                        .even
 04BC           _timer1_ovf_isr::
 04BC 0A92              st -y,R0
 04BE 1A92              st -y,R1
 04C0 2A92              st -y,R2
 04C2 3A92              st -y,R3
 04C4 4A92              st -y,R4
 04C6 5A92              st -y,R5
 04C8 6A92              st -y,R6
 04CA 7A92              st -y,R7
 04CC 8A92              st -y,R8
 04CE 9A92              st -y,R9
 04D0 0A93              st -y,R16
 04D2 1A93              st -y,R17
 04D4 2A93              st -y,R18
 04D6 3A93              st -y,R19
 04D8 8A93              st -y,R24
 04DA 9A93              st -y,R25
 04DC AA93              st -y,R26
 04DE BA93              st -y,R27
 04E0 EA93              st -y,R30
 04E2 FA93              st -y,R31
 04E4 0FB6              in R0,0x3f
 04E6 0A92              st -y,R0
 04E8                   .dbline -1
 04E8                   .dbline 469
 04E8           ; }
 04E8           ; 
 04E8           ; #pragma interrupt_handler timer1_ovf_isr:iv_TIM1_OVF
 04E8           ; void timer1_ovf_isr(void)
 04E8           ; {
 04E8                   .dbline 471
 04E8           ;  //TIMER1 has overflowed
 04E8           ;  TCNT1H = 0x94; //reload counter high value
 04E8 84E9              ldi R24,148
 04EA 80938500          sts 133,R24
 04EE                   .dbline 472
 04EE           ;  TCNT1L = 0x01; //reload counter low value
 04EE 81E0              ldi R24,1
 04F0 80938400          sts 132,R24
 04F4                   .dbline 473
 04F4           ;  delay_count++;
 04F4 80910400          lds R24,_delay_count
 04F8 90910500          lds R25,_delay_count+1
 04FC 0196              adiw R24,1
 04FE 90930500          sts _delay_count+1,R25
 0502 80930400          sts _delay_count,R24
 0506                   .dbline 474
 0506           ;  arm_number ++;
 0506 80910000          lds R24,_arm_number
 050A 8F5F              subi R24,255    ; addi 1
 050C 80930000          sts _arm_number,R24
 0510                   .dbline 475
 0510           ;  if (arm_number>7)
 0510 87E0              ldi R24,7
 0512 20900000          lds R2,_arm_number
 0516 8215              cp R24,R2
 0518 18F4              brsh L107
 051A           X24:
 051A                   .dbline 476
 051A           ;  {
 051A                   .dbline 477
 051A           ;       arm_number = 0;
 051A 2224              clr R2
 051C 20920000          sts _arm_number,R2
 0520                   .dbline 478
 0520           ;  }
 0520           L107:
 0520                   .dbline 480
 0520           ;    
 0520           ;  if (arm_number == 0)
 0520 20900000          lds R2,_arm_number
 0524 2220              tst R2
 0526 D9F4              brne L109
 0528           X25:
 0528                   .dbline 481
 0528           ;  {
 0528                   .dbline 482
 0528           ;   set_1A(); 
 0528 81DD              xcall _set_1A
 052A                   .dbline 483
 052A           ;   set_1B(); 
 052A 88DD              xcall _set_1B
 052C                   .dbline 484
 052C           ;   set_1C();
 052C 91DD              xcall _set_1C
 052E                   .dbline 485
 052E           ;   OCR1AH = angle_upper_byte_1A;
 052E 20902B00          lds R2,_angle_upper_byte_1A
 0532 20928900          sts 137,R2
 0536                   .dbline 486
 0536           ;   OCR1AL = angle_lower_byte_1A;
 0536 20902A00          lds R2,_angle_lower_byte_1A
 053A 20928800          sts 136,R2
 053E                   .dbline 487
 053E           ;   OCR1BH = angle_upper_byte_1B;
 053E 20902900          lds R2,_angle_upper_byte_1B
 0542 20928B00          sts 139,R2
 0546                   .dbline 488
 0546           ;   OCR1BL = angle_lower_byte_1B;
 0546 20902800          lds R2,_angle_lower_byte_1B
 054A 20928A00          sts 138,R2
 054E                   .dbline 489
 054E           ;   OCR1CH = angle_upper_byte_1C;
 054E 20902700          lds R2,_angle_upper_byte_1C
 0552 20928D00          sts 141,R2
 0556                   .dbline 490
 0556           ;   OCR1CL = angle_lower_byte_1C;
 0556 20902600          lds R2,_angle_lower_byte_1C
 055A 20928C00          sts 140,R2
 055E                   .dbline 491
 055E           ;  }
 055E           L109:
 055E                   .dbline 493
 055E           ;  
 055E           ;  if (arm_number == 1)
 055E 80910000          lds R24,_arm_number
 0562 8130              cpi R24,1
 0564 D9F4              brne L111
 0566           X26:
 0566                   .dbline 494
 0566           ;  {
 0566                   .dbline 495
 0566           ;   set_2A(); 
 0566 7CDD              xcall _set_2A
 0568                   .dbline 496
 0568           ;   set_2B(); 
 0568 85DD              xcall _set_2B
 056A                   .dbline 497
 056A           ;   set_2C();
 056A 8CDD              xcall _set_2C
 056C                   .dbline 498
 056C           ;   OCR1AH = angle_upper_byte_2A;
 056C 20902500          lds R2,_angle_upper_byte_2A
 0570 20928900          sts 137,R2
 0574                   .dbline 499
 0574           ;   OCR1AL = angle_lower_byte_2A;
 0574 20902400          lds R2,_angle_lower_byte_2A
 0578 20928800          sts 136,R2
 057C                   .dbline 500
 057C           ;   OCR1BH = angle_upper_byte_2B;
 057C 20902300          lds R2,_angle_upper_byte_2B
 0580 20928B00          sts 139,R2
 0584                   .dbline 501
 0584           ;   OCR1BL = angle_lower_byte_2B;
 0584 20902200          lds R2,_angle_lower_byte_2B
 0588 20928A00          sts 138,R2
 058C                   .dbline 502
 058C           ;   OCR1CH = angle_upper_byte_2C;
 058C 20902100          lds R2,_angle_upper_byte_2C
 0590 20928D00          sts 141,R2
 0594                   .dbline 503
 0594           ;   OCR1CL = angle_lower_byte_2C;
 0594 20902000          lds R2,_angle_lower_byte_2C
 0598 20928C00          sts 140,R2
 059C                   .dbline 504
 059C           ;  }
 059C           L111:
 059C                   .dbline 506
 059C           ;  
 059C           ;  if (arm_number == 2)
 059C 80910000          lds R24,_arm_number
 05A0 8230              cpi R24,2
 05A2 D9F4              brne L113
 05A4           X27:
 05A4                   .dbline 507
 05A4           ;  {
 05A4                   .dbline 508
 05A4           ;   set_3A(); 
 05A4 7BDD              xcall _set_3A
 05A6                   .dbline 509
 05A6           ;   set_3B(); 
 05A6 86DD              xcall _set_3B
 05A8                   .dbline 510
 05A8           ;   set_3C();
 05A8 91DD              xcall _set_3C
 05AA                   .dbline 511
 05AA           ;   OCR1AH = angle_upper_byte_3A;
 05AA 20901F00          lds R2,_angle_upper_byte_3A
 05AE 20928900          sts 137,R2
 05B2                   .dbline 512
 05B2           ;   OCR1AL = angle_lower_byte_3A;
 05B2 20901E00          lds R2,_angle_lower_byte_3A
 05B6 20928800          sts 136,R2
 05BA                   .dbline 513
 05BA           ;   OCR1BH = angle_upper_byte_3B;
 05BA 20901D00          lds R2,_angle_upper_byte_3B
 05BE 20928B00          sts 139,R2
 05C2                   .dbline 514
 05C2           ;   OCR1BL = angle_lower_byte_3B;
 05C2 20901C00          lds R2,_angle_lower_byte_3B
 05C6 20928A00          sts 138,R2
 05CA                   .dbline 515
 05CA           ;   OCR1CH = angle_upper_byte_3C;
 05CA 20901B00          lds R2,_angle_upper_byte_3C
 05CE 20928D00          sts 141,R2
 05D2                   .dbline 516
 05D2           ;   OCR1CL = angle_lower_byte_3C;
 05D2 20901A00          lds R2,_angle_lower_byte_3C
 05D6 20928C00          sts 140,R2
 05DA                   .dbline 517
 05DA           ;  }
 05DA           L113:
 05DA                   .dbline 519
 05DA           ;  
 05DA           ;  if (arm_number == 3)
 05DA 80910000          lds R24,_arm_number
 05DE 8330              cpi R24,3
 05E0 D9F4              brne L115
 05E2           X28:
 05E2                   .dbline 520
 05E2           ;  {
 05E2                   .dbline 521
 05E2           ;   set_4A(); 
 05E2 8ADD              xcall _set_4A
 05E4                   .dbline 522
 05E4           ;   set_4B(); 
 05E4 8FDD              xcall _set_4B
 05E6                   .dbline 523
 05E6           ;   set_4C();
 05E6 94DD              xcall _set_4C
 05E8                   .dbline 524
 05E8           ;   OCR1AH = angle_upper_byte_4A;
 05E8 20901900          lds R2,_angle_upper_byte_4A
 05EC 20928900          sts 137,R2
 05F0                   .dbline 525
 05F0           ;   OCR1AL = angle_lower_byte_4A;
 05F0 20901800          lds R2,_angle_lower_byte_4A
 05F4 20928800          sts 136,R2
 05F8                   .dbline 526
 05F8           ;   OCR1BH = angle_upper_byte_4B;
 05F8 20901700          lds R2,_angle_upper_byte_4B
 05FC 20928B00          sts 139,R2
 0600                   .dbline 527
 0600           ;   OCR1BL = angle_lower_byte_4B;
 0600 20901600          lds R2,_angle_lower_byte_4B
 0604 20928A00          sts 138,R2
 0608                   .dbline 528
 0608           ;   OCR1CH = angle_upper_byte_4C;
 0608 20901500          lds R2,_angle_upper_byte_4C
 060C 20928D00          sts 141,R2
 0610                   .dbline 529
 0610           ;   OCR1CL = angle_lower_byte_4C;
 0610 20901400          lds R2,_angle_lower_byte_4C
 0614 20928C00          sts 140,R2
 0618                   .dbline 530
 0618           ;  }
 0618           L115:
 0618                   .dbline 532
 0618           ;  
 0618           ;  if (arm_number == 4)
 0618 80910000          lds R24,_arm_number
 061C 8430              cpi R24,4
 061E D9F4              brne L117
 0620           X29:
 0620                   .dbline 533
 0620           ;  {
 0620                   .dbline 534
 0620           ;   set_5A(); 
 0620 7FDD              xcall _set_5A
 0622                   .dbline 535
 0622           ;   set_5B(); 
 0622 8ADD              xcall _set_5B
 0624                   .dbline 536
 0624           ;   set_5C();
 0624 95DD              xcall _set_5C
 0626                   .dbline 537
 0626           ;   OCR1AH = angle_upper_byte_5A;
 0626 20901300          lds R2,_angle_upper_byte_5A
 062A 20928900          sts 137,R2
 062E                   .dbline 538
 062E           ;   OCR1AL = angle_lower_byte_5A;
 062E 20901200          lds R2,_angle_lower_byte_5A
 0632 20928800          sts 136,R2
 0636                   .dbline 539
 0636           ;   OCR1BH = angle_upper_byte_5B;
 0636 20901100          lds R2,_angle_upper_byte_5B
 063A 20928B00          sts 139,R2
 063E                   .dbline 540
 063E           ;   OCR1BL = angle_lower_byte_5B;
 063E 20901000          lds R2,_angle_lower_byte_5B
 0642 20928A00          sts 138,R2
 0646                   .dbline 541
 0646           ;   OCR1CH = angle_upper_byte_5C;
 0646 20900F00          lds R2,_angle_upper_byte_5C
 064A 20928D00          sts 141,R2
 064E                   .dbline 542
 064E           ;   OCR1CL = angle_lower_byte_5C;
 064E 20900E00          lds R2,_angle_lower_byte_5C
 0652 20928C00          sts 140,R2
 0656                   .dbline 543
 0656           ;  }
 0656           L117:
 0656                   .dbline 545
 0656           ;  
 0656           ;  if (arm_number == 5)
 0656 80910000          lds R24,_arm_number
 065A 8530              cpi R24,5
 065C D9F4              brne L119
 065E           X30:
 065E                   .dbline 546
 065E           ;  {
 065E                   .dbline 547
 065E           ;   set_6A(); 
 065E 84DD              xcall _set_6A
 0660                   .dbline 548
 0660           ;   set_6B(); 
 0660 8FDD              xcall _set_6B
 0662                   .dbline 549
 0662           ;   set_6C();
 0662 9ADD              xcall _set_6C
 0664                   .dbline 550
 0664           ;   OCR1AH = angle_upper_byte_6A;
 0664 20900D00          lds R2,_angle_upper_byte_6A
 0668 20928900          sts 137,R2
 066C                   .dbline 551
 066C           ;   OCR1AL = angle_lower_byte_6A;
 066C 20900C00          lds R2,_angle_lower_byte_6A
 0670 20928800          sts 136,R2
 0674                   .dbline 552
 0674           ;   OCR1BH = angle_upper_byte_6B;
 0674 20900B00          lds R2,_angle_upper_byte_6B
 0678 20928B00          sts 139,R2
 067C                   .dbline 553
 067C           ;   OCR1BL = angle_lower_byte_6B;
 067C 20900A00          lds R2,_angle_lower_byte_6B
 0680 20928A00          sts 138,R2
 0684                   .dbline 554
 0684           ;   OCR1CH = angle_upper_byte_6C;
 0684 20900900          lds R2,_angle_upper_byte_6C
 0688 20928D00          sts 141,R2
 068C                   .dbline 555
 068C           ;   OCR1CL = angle_lower_byte_6C;
 068C 20900800          lds R2,_angle_lower_byte_6C
 0690 20928C00          sts 140,R2
 0694                   .dbline 556
 0694           ;  }
 0694           L119:
 0694                   .dbline 558
 0694           ;  //serial communication related code
 0694           ;  serial_communication_interval ++;
 0694 80910600          lds R24,_serial_communication_interval
 0698 90910700          lds R25,_serial_communication_interval+1
 069C 0196              adiw R24,1
 069E 90930700          sts _serial_communication_interval+1,R25
 06A2 80930600          sts _serial_communication_interval,R24
 06A6                   .dbline 559
 06A6           ;   if (serial_communication_interval > 40) //gives time interval of 40*2.5ms = 100ms
 06A6 88E2              ldi R24,40
 06A8 90E0              ldi R25,0
 06AA 20900600          lds R2,_serial_communication_interval
 06AE 30900700          lds R3,_serial_communication_interval+1
 06B2 8215              cp R24,R2
 06B4 9305              cpc R25,R3
 06B6 B8F4              brsh L121
 06B8           X31:
 06B8                   .dbline 560
 06B8           ;  {
 06B8                   .dbline 561
 06B8           ;   serial_communication_interval = 0;
 06B8 2224              clr R2
 06BA 3324              clr R3
 06BC 30920700          sts _serial_communication_interval+1,R3
 06C0 20920600          sts _serial_communication_interval,R2
 06C4                   .dbline 562
 06C4           ;   serial_communication_channel_number++;
 06C4 80910800          lds R24,_serial_communication_channel_number
 06C8 8F5F              subi R24,255    ; addi 1
 06CA 80930800          sts _serial_communication_channel_number,R24
 06CE                   .dbline 563
 06CE           ;   if(serial_communication_channel_number > 4) //set maximum number of command (can be set up to 7)
 06CE 84E0              ldi R24,4
 06D0 20900800          lds R2,_serial_communication_channel_number
 06D4 8215              cp R24,R2
 06D6 18F4              brsh L123
 06D8           X32:
 06D8                   .dbline 564
 06D8           ;   {
 06D8                   .dbline 565
 06D8           ;   serial_communication_channel_number  = 3; //set first command to begin with (can be set up to 1)
 06D8 83E0              ldi R24,3
 06DA 80930800          sts _serial_communication_channel_number,R24
 06DE                   .dbline 566
 06DE           ;   }
 06DE           L123:
 06DE                   .dbline 567
 06DE           ;   UDR0 = serial_communication_channel_number;
 06DE 20900800          lds R2,_serial_communication_channel_number
 06E2 2092C600          sts 198,R2
 06E6                   .dbline 568
 06E6           ;  }
 06E6           L121:
 06E6                   .dbline -2
 06E6           L106:
 06E6                   .dbline 0 ; func end
 06E6 0990              ld R0,y+
 06E8 0FBE              out 0x3f,R0
 06EA F991              ld R31,y+
 06EC E991              ld R30,y+
 06EE B991              ld R27,y+
 06F0 A991              ld R26,y+
 06F2 9991              ld R25,y+
 06F4 8991              ld R24,y+
 06F6 3991              ld R19,y+
 06F8 2991              ld R18,y+
 06FA 1991              ld R17,y+
 06FC 0991              ld R16,y+
 06FE 9990              ld R9,y+
 0700 8990              ld R8,y+
 0702 7990              ld R7,y+
 0704 6990              ld R6,y+
 0706 5990              ld R5,y+
 0708 4990              ld R4,y+
 070A 3990              ld R3,y+
 070C 2990              ld R2,y+
 070E 1990              ld R1,y+
 0710 0990              ld R0,y+
 0712 1895              reti
 0714                   .dbend
 0714                   .dbfunc e uart0_init _uart0_init fV
                        .even
 0714           _uart0_init::
 0714                   .dbline -1
 0714                   .dbline 577
 0714           ; }
 0714           ; 
 0714           ; //UART0 initialize
 0714           ; // desired baud rate: 9600
 0714           ; // actual: baud rate:9600 (0.0%)
 0714           ; // char size: 8 bit
 0714           ; // parity: Disabled
 0714           ; void uart0_init(void)
 0714           ; {
 0714                   .dbline 578
 0714           ;  UCSR0B = 0x00; //disable while setting baud rate
 0714 2224              clr R2
 0716 2092C100          sts 193,R2
 071A                   .dbline 579
 071A           ;  UCSR0A = 0x00;
 071A 2092C000          sts 192,R2
 071E                   .dbline 580
 071E           ;  UCSR0C = 0x06;
 071E 86E0              ldi R24,6
 0720 8093C200          sts 194,R24
 0724                   .dbline 581
 0724           ;  UBRR0L = 0x47; //set baud rate lo
 0724 87E4              ldi R24,71
 0726 8093C400          sts 196,R24
 072A                   .dbline 582
 072A           ;  UBRR0H = 0x00; //set baud rate hi
 072A 2092C500          sts 197,R2
 072E                   .dbline 583
 072E           ;  UCSR0B = 0x98;
 072E 88E9              ldi R24,152
 0730 8093C100          sts 193,R24
 0734                   .dbline -2
 0734           L125:
 0734                   .dbline 0 ; func end
 0734 0895              ret
 0736                   .dbend
                        .area vector(rom, abs)
                        .org 100
 0064 0C949B03          jmp _uart0_rx_isr
                        .area text(rom, con, rel)
 0736                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\hexapod_firebirdv.h
 0736                   .dbfunc e uart0_rx_isr _uart0_rx_isr fV
                        .even
 0736           _uart0_rx_isr::
 0736 2A92              st -y,R2
 0738 8A93              st -y,R24
 073A 9A93              st -y,R25
 073C EA93              st -y,R30
 073E FA93              st -y,R31
 0740 2FB6              in R2,0x3f
 0742 2A92              st -y,R2
 0744                   .dbline -1
 0744                   .dbline 588
 0744           ; }
 0744           ; 
 0744           ; #pragma interrupt_handler uart0_rx_isr:iv_USART0_RXC
 0744           ; void uart0_rx_isr(void)
 0744           ; {
 0744                   .dbline 590
 0744           ;  //uart has received a character in UDR
 0744           ;  remote_data[serial_communication_channel_number] = UDR0;  
 0744 80E0              ldi R24,<_remote_data
 0746 90E0              ldi R25,>_remote_data
 0748 E0910800          lds R30,_serial_communication_channel_number
 074C FF27              clr R31
 074E E80F              add R30,R24
 0750 F91F              adc R31,R25
 0752 2090C600          lds R2,198
 0756 2082              std z+0,R2
 0758                   .dbline -2
 0758           L126:
 0758                   .dbline 0 ; func end
 0758 2990              ld R2,y+
 075A 2FBE              out 0x3f,R2
 075C F991              ld R31,y+
 075E E991              ld R30,y+
 0760 9991              ld R25,y+
 0762 8991              ld R24,y+
 0764 2990              ld R2,y+
 0766 1895              reti
 0768                   .dbend
 0768                   .dbfunc e init_devices _init_devices fV
                        .even
 0768           _init_devices::
 0768                   .dbline -1
 0768                   .dbline 595
 0768           ; }
 0768           ; 
 0768           ; //call this routine to initialize all peripherals
 0768           ; void init_devices(void)
 0768           ; {
 0768                   .dbline 597
 0768           ;  //stop errant interrupts until set up
 0768           ;  CLI(); //disable all interrupts
 0768 F894              cli
 076A                   .dbline 598
 076A           ;  XMCRA = 0x00; //external memory
 076A 2224              clr R2
 076C 20927400          sts 116,R2
 0770                   .dbline 599
 0770           ;  XMCRB = 0x00; //external memory
 0770 20927500          sts 117,R2
 0774                   .dbline 600
 0774           ;  port_init();
 0774 73DD              xcall _port_init
 0776                   .dbline 601
 0776           ;  timer1_init();
 0776 9ADD              xcall _timer1_init
 0778                   .dbline 602
 0778           ;  uart0_init();
 0778 CDDF              xcall _uart0_init
 077A                   .dbline 604
 077A           ; 
 077A           ;  MCUCR  = 0x00;
 077A 2224              clr R2
 077C 25BE              out 0x35,R2
 077E                   .dbline 605
 077E           ;  EICRA  = 0x00; //pin change int edge 0:3
 077E 20926900          sts 105,R2
 0782                   .dbline 606
 0782           ;  EICRB  = 0x00; //pin change int edge 4:7
 0782 20926A00          sts 106,R2
 0786                   .dbline 607
 0786           ;  PCICR  = 0x00; //pin change int enable
 0786 20926800          sts 104,R2
 078A                   .dbline 608
 078A           ;  PCMSK0 = 0x00; //pin change mask
 078A 20926B00          sts 107,R2
 078E                   .dbline 609
 078E           ;  PCMSK1 = 0x00; //pin change mask
 078E 20926C00          sts 108,R2
 0792                   .dbline 610
 0792           ;  PCMSK2 = 0x00; //pin change mask
 0792 20926D00          sts 109,R2
 0796                   .dbline 611
 0796           ;  EIMSK  = 0x00;
 0796 2DBA              out 0x1d,R2
 0798                   .dbline 612
 0798           ;  TIMSK0 = 0x00; //timer0 interrupt sources
 0798 20926E00          sts 110,R2
 079C                   .dbline 613
 079C           ;  TIMSK1 = 0x0F; //timer1 interrupt sources
 079C 8FE0              ldi R24,15
 079E 80936F00          sts 111,R24
 07A2                   .dbline 614
 07A2           ;  TIMSK2 = 0x00; //timer2 interrupt sources
 07A2 20927000          sts 112,R2
 07A6                   .dbline 615
 07A6           ;  TIMSK3 = 0x00; //timer3 interrupt sources
 07A6 20927100          sts 113,R2
 07AA                   .dbline 616
 07AA           ;  TIMSK4 = 0x00; //timer4 interrupt sources
 07AA 20927200          sts 114,R2
 07AE                   .dbline 617
 07AE           ;  TIMSK5 = 0x00; //timer5 interrupt sources
 07AE 20927300          sts 115,R2
 07B2                   .dbline 619
 07B2           ;  
 07B2           ;  SEI(); //re-enable interrupts
 07B2 7894              sei
 07B4                   .dbline -2
 07B4           L127:
 07B4                   .dbline 0 ; func end
 07B4 0895              ret
 07B6                   .dbend
 07B6                   .dbfunc e angle_value_calculation _angle_value_calculation fV
 07B6           ;           temp -> R16,R17
 07B6           ;    angle_value -> R18,R19
                        .even
 07B6           _angle_value_calculation::
 07B6                   .dbline -1
 07B6                   .dbline 624
 07B6           ;  //all peripherals are now initialized
 07B6           ; }
 07B6           ; 
 07B6           ; void angle_value_calculation (void)
 07B6           ; {
 07B6                   .dbline 625
 07B6           ;  unsigned int angle_value = 0;
 07B6 2227              clr R18
 07B8 3327              clr R19
 07BA                   .dbline 626
 07BA           ;  unsigned int temp = 0;
 07BA 0027              clr R16
 07BC 1127              clr R17
 07BE                   .dbline 627
 07BE           ;  if (degree > 180)
 07BE 84EB              ldi R24,180
 07C0 20900300          lds R2,_degree
 07C4 8215              cp R24,R2
 07C6 10F4              brsh L129
 07C8           X33:
 07C8                   .dbline 628
 07C8           ;  degree = 180; // limiting the scope of the servo rotation
 07C8 80930300          sts _degree,R24
 07CC           L129:
 07CC                   .dbline 630
 07CC           ;  
 07CC           ;  angle_value = 0xBF39 + (64 * (unsigned char) degree); //actual constant is 64.4
 07CC 20900300          lds R2,_degree
 07D0 80E4              ldi R24,64
 07D2 829D              mul R24,R2
 07D4 9001              movw R18,R0
 07D6 275C              subi R18,199  ; offset = 48953
 07D8 3044              sbci R19,64
 07DA                   .dbline 632
 07DA           ;  
 07DA           ;  angle_lower_byte = (unsigned char) angle_value; //separating the lower byte
 07DA 20930200          sts _angle_lower_byte,R18
 07DE                   .dbline 634
 07DE           ;  
 07DE           ;  temp = angle_value >> 8;
 07DE 8901              movw R16,R18
 07E0 012F              mov R16,R17
 07E2 1127              clr R17
 07E4                   .dbline 635
 07E4           ;  angle_upper_byte = (unsigned char) temp; //separating the upper byte
 07E4 00930100          sts _angle_upper_byte,R16
 07E8                   .dbline -2
 07E8           L128:
 07E8                   .dbline 0 ; func end
 07E8 0895              ret
 07EA                   .dbsym r temp 16 i
 07EA                   .dbsym r angle_value 18 i
 07EA                   .dbend
 07EA                   .dbfunc e angle_1A _angle_1A fV
 07EA           ;          angle -> R10
                        .even
 07EA           _angle_1A::
 07EA AA92              st -y,R10
 07EC A02E              mov R10,R16
 07EE                   .dbline -1
 07EE                   .dbline 640
 07EE           ; }
 07EE           ; 
 07EE           ; 
 07EE           ; void angle_1A (unsigned char angle)
 07EE           ; {
 07EE                   .dbline 641
 07EE           ;  _1A = degree = angle;
 07EE A0920300          sts _degree,R10
 07F2 A0923D00          sts __1A,R10
 07F6                   .dbline 642
 07F6           ;  angle_value_calculation();
 07F6 DFDF              xcall _angle_value_calculation
 07F8                   .dbline 643
 07F8           ;  angle_upper_byte_1A = angle_upper_byte;
 07F8 20900100          lds R2,_angle_upper_byte
 07FC 20922B00          sts _angle_upper_byte_1A,R2
 0800                   .dbline 644
 0800           ;  angle_lower_byte_1A = angle_lower_byte;
 0800 20900200          lds R2,_angle_lower_byte
 0804 20922A00          sts _angle_lower_byte_1A,R2
 0808                   .dbline -2
 0808           L131:
 0808                   .dbline 0 ; func end
 0808 A990              ld R10,y+
 080A 0895              ret
 080C                   .dbsym r angle 10 c
 080C                   .dbend
 080C                   .dbfunc e angle_1B _angle_1B fV
 080C           ;          angle -> R10
                        .even
 080C           _angle_1B::
 080C AA92              st -y,R10
 080E A02E              mov R10,R16
 0810                   .dbline -1
 0810                   .dbline 648
 0810           ; }
 0810           ; 
 0810           ; void angle_1B (unsigned char angle)
 0810           ; {
 0810                   .dbline 649
 0810           ;  _1B = degree = angle;
 0810 A0920300          sts _degree,R10
 0814 A0923C00          sts __1B,R10
 0818                   .dbline 650
 0818           ;  angle_value_calculation();
 0818 CEDF              xcall _angle_value_calculation
 081A                   .dbline 651
 081A           ;  angle_upper_byte_1B = angle_upper_byte;
 081A 20900100          lds R2,_angle_upper_byte
 081E 20922900          sts _angle_upper_byte_1B,R2
 0822                   .dbline 652
 0822           ;  angle_lower_byte_1B = angle_lower_byte;
 0822 20900200          lds R2,_angle_lower_byte
 0826 20922800          sts _angle_lower_byte_1B,R2
 082A                   .dbline -2
 082A           L132:
 082A                   .dbline 0 ; func end
 082A A990              ld R10,y+
 082C 0895              ret
 082E                   .dbsym r angle 10 c
 082E                   .dbend
 082E                   .dbfunc e angle_1C _angle_1C fV
 082E           ;          angle -> R10
                        .even
 082E           _angle_1C::
 082E AA92              st -y,R10
 0830 A02E              mov R10,R16
 0832                   .dbline -1
 0832                   .dbline 656
 0832           ; }
 0832           ; 
 0832           ; void angle_1C (unsigned char angle)
 0832           ; {
 0832                   .dbline 657
 0832           ;  _1C = degree = angle;
 0832 A0920300          sts _degree,R10
 0836 A0923B00          sts __1C,R10
 083A                   .dbline 658
 083A           ;  angle_value_calculation();
 083A BDDF              xcall _angle_value_calculation
 083C                   .dbline 659
 083C           ;  angle_upper_byte_1C = angle_upper_byte;
 083C 20900100          lds R2,_angle_upper_byte
 0840 20922700          sts _angle_upper_byte_1C,R2
 0844                   .dbline 660
 0844           ;  angle_lower_byte_1C = angle_lower_byte;
 0844 20900200          lds R2,_angle_lower_byte
 0848 20922600          sts _angle_lower_byte_1C,R2
 084C                   .dbline -2
 084C           L133:
 084C                   .dbline 0 ; func end
 084C A990              ld R10,y+
 084E 0895              ret
 0850                   .dbsym r angle 10 c
 0850                   .dbend
 0850                   .dbfunc e angle_2A _angle_2A fV
 0850           ;          angle -> R10
                        .even
 0850           _angle_2A::
 0850 AA92              st -y,R10
 0852 A02E              mov R10,R16
 0854                   .dbline -1
 0854                   .dbline 664
 0854           ; }
 0854           ; 
 0854           ; void angle_2A (unsigned char angle)
 0854           ; {
 0854                   .dbline 665
 0854           ;  _2A = degree = angle;
 0854 A0920300          sts _degree,R10
 0858 A0923A00          sts __2A,R10
 085C                   .dbline 666
 085C           ;  angle_value_calculation();
 085C ACDF              xcall _angle_value_calculation
 085E                   .dbline 667
 085E           ;  angle_upper_byte_2A = angle_upper_byte;
 085E 20900100          lds R2,_angle_upper_byte
 0862 20922500          sts _angle_upper_byte_2A,R2
 0866                   .dbline 668
 0866           ;  angle_lower_byte_2A = angle_lower_byte;
 0866 20900200          lds R2,_angle_lower_byte
 086A 20922400          sts _angle_lower_byte_2A,R2
 086E                   .dbline -2
 086E           L134:
 086E                   .dbline 0 ; func end
 086E A990              ld R10,y+
 0870 0895              ret
 0872                   .dbsym r angle 10 c
 0872                   .dbend
 0872                   .dbfunc e angle_2B _angle_2B fV
 0872           ;          angle -> R20
                        .even
 0872           _angle_2B::
 0872 4A93              st -y,R20
 0874 5A93              st -y,R21
 0876 402F              mov R20,R16
 0878                   .dbline -1
 0878                   .dbline 672
 0878           ; }
 0878           ; 
 0878           ; void angle_2B (unsigned char angle)
 0878           ; {
 0878                   .dbline 673
 0878           ;  angle = angle+9;             //Setting this offset for error correction in servo 2B
 0878 475F              subi R20,247    ; addi 9
 087A                   .dbline 678
 087A           ;                                               //The above line is not required if the servo 2B is working correctly
 087A           ;       /* Such offsets are often introduced to remove or atleast minimize hardware errors with the slight change in code
 087A           ;          This is one of the example, where instead of replacing a costly servo motor, we have set an offset to its value */
 087A           ;          
 087A           ;  _2B = degree = angle;
 087A 40930300          sts _degree,R20
 087E 40933900          sts __2B,R20
 0882                   .dbline 679
 0882           ;  angle_value_calculation();
 0882 99DF              xcall _angle_value_calculation
 0884                   .dbline 680
 0884           ;  angle_upper_byte_2B = angle_upper_byte;
 0884 20900100          lds R2,_angle_upper_byte
 0888 20922300          sts _angle_upper_byte_2B,R2
 088C                   .dbline 681
 088C           ;  angle_lower_byte_2B = angle_lower_byte;
 088C 20900200          lds R2,_angle_lower_byte
 0890 20922200          sts _angle_lower_byte_2B,R2
 0894                   .dbline -2
 0894           L135:
 0894                   .dbline 0 ; func end
 0894 5991              ld R21,y+
 0896 4991              ld R20,y+
 0898 0895              ret
 089A                   .dbsym r angle 20 c
 089A                   .dbend
 089A                   .dbfunc e angle_2C _angle_2C fV
 089A           ;          angle -> R10
                        .even
 089A           _angle_2C::
 089A AA92              st -y,R10
 089C A02E              mov R10,R16
 089E                   .dbline -1
 089E                   .dbline 685
 089E           ; }
 089E           ; 
 089E           ; void angle_2C (unsigned char angle)
 089E           ; {
 089E                   .dbline 686
 089E           ;  _2C = degree = angle;
 089E A0920300          sts _degree,R10
 08A2 A0923800          sts __2C,R10
 08A6                   .dbline 687
 08A6           ;  angle_value_calculation();
 08A6 87DF              xcall _angle_value_calculation
 08A8                   .dbline 688
 08A8           ;  angle_upper_byte_2C = angle_upper_byte;
 08A8 20900100          lds R2,_angle_upper_byte
 08AC 20922100          sts _angle_upper_byte_2C,R2
 08B0                   .dbline 689
 08B0           ;  angle_lower_byte_2C = angle_lower_byte;
 08B0 20900200          lds R2,_angle_lower_byte
 08B4 20922000          sts _angle_lower_byte_2C,R2
 08B8                   .dbline -2
 08B8           L136:
 08B8                   .dbline 0 ; func end
 08B8 A990              ld R10,y+
 08BA 0895              ret
 08BC                   .dbsym r angle 10 c
 08BC                   .dbend
 08BC                   .dbfunc e angle_3A _angle_3A fV
 08BC           ;          angle -> R10
                        .even
 08BC           _angle_3A::
 08BC AA92              st -y,R10
 08BE A02E              mov R10,R16
 08C0                   .dbline -1
 08C0                   .dbline 693
 08C0           ; }
 08C0           ; 
 08C0           ; void angle_3A (unsigned char angle)
 08C0           ; {
 08C0                   .dbline 694
 08C0           ;  _3A = degree = angle;
 08C0 A0920300          sts _degree,R10
 08C4 A0923700          sts __3A,R10
 08C8                   .dbline 695
 08C8           ;  angle_value_calculation();
 08C8 76DF              xcall _angle_value_calculation
 08CA                   .dbline 696
 08CA           ;  angle_upper_byte_3A = angle_upper_byte;
 08CA 20900100          lds R2,_angle_upper_byte
 08CE 20921F00          sts _angle_upper_byte_3A,R2
 08D2                   .dbline 697
 08D2           ;  angle_lower_byte_3A = angle_lower_byte;
 08D2 20900200          lds R2,_angle_lower_byte
 08D6 20921E00          sts _angle_lower_byte_3A,R2
 08DA                   .dbline -2
 08DA           L137:
 08DA                   .dbline 0 ; func end
 08DA A990              ld R10,y+
 08DC 0895              ret
 08DE                   .dbsym r angle 10 c
 08DE                   .dbend
 08DE                   .dbfunc e angle_3B _angle_3B fV
 08DE           ;          angle -> R10
                        .even
 08DE           _angle_3B::
 08DE AA92              st -y,R10
 08E0 A02E              mov R10,R16
 08E2                   .dbline -1
 08E2                   .dbline 701
 08E2           ; }
 08E2           ; 
 08E2           ; void angle_3B (unsigned char angle)
 08E2           ; {
 08E2                   .dbline 702
 08E2           ;  _3B = degree = angle;
 08E2 A0920300          sts _degree,R10
 08E6 A0923600          sts __3B,R10
 08EA                   .dbline 703
 08EA           ;  angle_value_calculation();
 08EA 65DF              xcall _angle_value_calculation
 08EC                   .dbline 704
 08EC           ;  angle_upper_byte_3B = angle_upper_byte;
 08EC 20900100          lds R2,_angle_upper_byte
 08F0 20921D00          sts _angle_upper_byte_3B,R2
 08F4                   .dbline 705
 08F4           ;  angle_lower_byte_3B = angle_lower_byte;
 08F4 20900200          lds R2,_angle_lower_byte
 08F8 20921C00          sts _angle_lower_byte_3B,R2
 08FC                   .dbline -2
 08FC           L138:
 08FC                   .dbline 0 ; func end
 08FC A990              ld R10,y+
 08FE 0895              ret
 0900                   .dbsym r angle 10 c
 0900                   .dbend
 0900                   .dbfunc e angle_3C _angle_3C fV
 0900           ;          angle -> R10
                        .even
 0900           _angle_3C::
 0900 AA92              st -y,R10
 0902 A02E              mov R10,R16
 0904                   .dbline -1
 0904                   .dbline 709
 0904           ; }
 0904           ; 
 0904           ; void angle_3C (unsigned char angle)
 0904           ; {
 0904                   .dbline 710
 0904           ;  _3C = degree = angle;
 0904 A0920300          sts _degree,R10
 0908 A0923500          sts __3C,R10
 090C                   .dbline 711
 090C           ;  angle_value_calculation();
 090C 54DF              xcall _angle_value_calculation
 090E                   .dbline 712
 090E           ;  angle_upper_byte_3C = angle_upper_byte;
 090E 20900100          lds R2,_angle_upper_byte
 0912 20921B00          sts _angle_upper_byte_3C,R2
 0916                   .dbline 713
 0916           ;  angle_lower_byte_3C = angle_lower_byte;
 0916 20900200          lds R2,_angle_lower_byte
 091A 20921A00          sts _angle_lower_byte_3C,R2
 091E                   .dbline -2
 091E           L139:
 091E                   .dbline 0 ; func end
 091E A990              ld R10,y+
 0920 0895              ret
 0922                   .dbsym r angle 10 c
 0922                   .dbend
 0922                   .dbfunc e angle_4A _angle_4A fV
 0922           ;          angle -> R10
                        .even
 0922           _angle_4A::
 0922 AA92              st -y,R10
 0924 A02E              mov R10,R16
 0926                   .dbline -1
 0926                   .dbline 717
 0926           ; }
 0926           ; 
 0926           ; void angle_4A (unsigned char angle)
 0926           ; {
 0926                   .dbline 718
 0926           ;  _4A = degree = angle;
 0926 A0920300          sts _degree,R10
 092A A0923400          sts __4A,R10
 092E                   .dbline 719
 092E           ;  angle_value_calculation();
 092E 43DF              xcall _angle_value_calculation
 0930                   .dbline 720
 0930           ;  angle_upper_byte_4A = angle_upper_byte;
 0930 20900100          lds R2,_angle_upper_byte
 0934 20921900          sts _angle_upper_byte_4A,R2
 0938                   .dbline 721
 0938           ;  angle_lower_byte_4A = angle_lower_byte;
 0938 20900200          lds R2,_angle_lower_byte
 093C 20921800          sts _angle_lower_byte_4A,R2
 0940                   .dbline -2
 0940           L140:
 0940                   .dbline 0 ; func end
 0940 A990              ld R10,y+
 0942 0895              ret
 0944                   .dbsym r angle 10 c
 0944                   .dbend
 0944                   .dbfunc e angle_4B _angle_4B fV
 0944           ;          angle -> R10
                        .even
 0944           _angle_4B::
 0944 AA92              st -y,R10
 0946 A02E              mov R10,R16
 0948                   .dbline -1
 0948                   .dbline 725
 0948           ; }
 0948           ; 
 0948           ; void angle_4B (unsigned char angle)
 0948           ; {
 0948                   .dbline 726
 0948           ;  _4B = angle;
 0948 A0923300          sts __4B,R10
 094C                   .dbline 727
 094C           ;  degree = 180 - angle;
 094C 2A2C              mov R2,R10
 094E 3324              clr R3
 0950 84EB              ldi R24,180
 0952 90E0              ldi R25,0
 0954 8219              sub R24,R2
 0956 9309              sbc R25,R3
 0958 80930300          sts _degree,R24
 095C                   .dbline 728
 095C           ;  angle_value_calculation();
 095C 2CDF              xcall _angle_value_calculation
 095E                   .dbline 729
 095E           ;  angle_upper_byte_4B = angle_upper_byte;
 095E 20900100          lds R2,_angle_upper_byte
 0962 20921700          sts _angle_upper_byte_4B,R2
 0966                   .dbline 730
 0966           ;  angle_lower_byte_4B = angle_lower_byte;
 0966 20900200          lds R2,_angle_lower_byte
 096A 20921600          sts _angle_lower_byte_4B,R2
 096E                   .dbline -2
 096E           L141:
 096E                   .dbline 0 ; func end
 096E A990              ld R10,y+
 0970 0895              ret
 0972                   .dbsym r angle 10 c
 0972                   .dbend
 0972                   .dbfunc e angle_4C _angle_4C fV
 0972           ;          angle -> R10
                        .even
 0972           _angle_4C::
 0972 AA92              st -y,R10
 0974 A02E              mov R10,R16
 0976                   .dbline -1
 0976                   .dbline 734
 0976           ; }
 0976           ; 
 0976           ; void angle_4C (unsigned char angle)
 0976           ; {
 0976                   .dbline 735
 0976           ;  _4C = angle;
 0976 A0923200          sts __4C,R10
 097A                   .dbline 736
 097A           ;  degree = 180 - angle;
 097A 2A2C              mov R2,R10
 097C 3324              clr R3
 097E 84EB              ldi R24,180
 0980 90E0              ldi R25,0
 0982 8219              sub R24,R2
 0984 9309              sbc R25,R3
 0986 80930300          sts _degree,R24
 098A                   .dbline 737
 098A           ;  angle_value_calculation();
 098A 15DF              xcall _angle_value_calculation
 098C                   .dbline 738
 098C           ;  angle_upper_byte_4C = angle_upper_byte;
 098C 20900100          lds R2,_angle_upper_byte
 0990 20921500          sts _angle_upper_byte_4C,R2
 0994                   .dbline 739
 0994           ;  angle_lower_byte_4C = angle_lower_byte;
 0994 20900200          lds R2,_angle_lower_byte
 0998 20921400          sts _angle_lower_byte_4C,R2
 099C                   .dbline -2
 099C           L142:
 099C                   .dbline 0 ; func end
 099C A990              ld R10,y+
 099E 0895              ret
 09A0                   .dbsym r angle 10 c
 09A0                   .dbend
 09A0                   .dbfunc e angle_5A _angle_5A fV
 09A0           ;          angle -> R10
                        .even
 09A0           _angle_5A::
 09A0 AA92              st -y,R10
 09A2 A02E              mov R10,R16
 09A4                   .dbline -1
 09A4                   .dbline 743
 09A4           ; }
 09A4           ; 
 09A4           ; void angle_5A (unsigned char angle)
 09A4           ; {
 09A4                   .dbline 744
 09A4           ;  _5A = degree = angle;
 09A4 A0920300          sts _degree,R10
 09A8 A0923100          sts __5A,R10
 09AC                   .dbline 745
 09AC           ;  angle_value_calculation();
 09AC 04DF              xcall _angle_value_calculation
 09AE                   .dbline 746
 09AE           ;  angle_upper_byte_5A = angle_upper_byte;
 09AE 20900100          lds R2,_angle_upper_byte
 09B2 20921300          sts _angle_upper_byte_5A,R2
 09B6                   .dbline 747
 09B6           ;  angle_lower_byte_5A = angle_lower_byte;
 09B6 20900200          lds R2,_angle_lower_byte
 09BA 20921200          sts _angle_lower_byte_5A,R2
 09BE                   .dbline -2
 09BE           L143:
 09BE                   .dbline 0 ; func end
 09BE A990              ld R10,y+
 09C0 0895              ret
 09C2                   .dbsym r angle 10 c
 09C2                   .dbend
 09C2                   .dbfunc e angle_5B _angle_5B fV
 09C2           ;          angle -> R10
                        .even
 09C2           _angle_5B::
 09C2 AA92              st -y,R10
 09C4 A02E              mov R10,R16
 09C6                   .dbline -1
 09C6                   .dbline 751
 09C6           ; }
 09C6           ; 
 09C6           ; void angle_5B (unsigned char angle)
 09C6           ; {
 09C6                   .dbline 752
 09C6           ;  _5B = angle;
 09C6 A0923000          sts __5B,R10
 09CA                   .dbline 753
 09CA           ;  degree = 180 - angle;
 09CA 2A2C              mov R2,R10
 09CC 3324              clr R3
 09CE 84EB              ldi R24,180
 09D0 90E0              ldi R25,0
 09D2 8219              sub R24,R2
 09D4 9309              sbc R25,R3
 09D6 80930300          sts _degree,R24
 09DA                   .dbline 754
 09DA           ;  angle_value_calculation();
 09DA EDDE              xcall _angle_value_calculation
 09DC                   .dbline 755
 09DC           ;  angle_upper_byte_5B = angle_upper_byte;
 09DC 20900100          lds R2,_angle_upper_byte
 09E0 20921100          sts _angle_upper_byte_5B,R2
 09E4                   .dbline 756
 09E4           ;  angle_lower_byte_5B = angle_lower_byte;
 09E4 20900200          lds R2,_angle_lower_byte
 09E8 20921000          sts _angle_lower_byte_5B,R2
 09EC                   .dbline -2
 09EC           L144:
 09EC                   .dbline 0 ; func end
 09EC A990              ld R10,y+
 09EE 0895              ret
 09F0                   .dbsym r angle 10 c
 09F0                   .dbend
 09F0                   .dbfunc e angle_5C _angle_5C fV
 09F0           ;          angle -> R10
                        .even
 09F0           _angle_5C::
 09F0 AA92              st -y,R10
 09F2 A02E              mov R10,R16
 09F4                   .dbline -1
 09F4                   .dbline 760
 09F4           ; }
 09F4           ; 
 09F4           ; void angle_5C (unsigned char angle)
 09F4           ; {
 09F4                   .dbline 761
 09F4           ;  _5C = angle;
 09F4 A0922F00          sts __5C,R10
 09F8                   .dbline 762
 09F8           ;  degree = 180 - angle;
 09F8 2A2C              mov R2,R10
 09FA 3324              clr R3
 09FC 84EB              ldi R24,180
 09FE 90E0              ldi R25,0
 0A00 8219              sub R24,R2
 0A02 9309              sbc R25,R3
 0A04 80930300          sts _degree,R24
 0A08                   .dbline 763
 0A08           ;  angle_value_calculation();
 0A08 D6DE              xcall _angle_value_calculation
 0A0A                   .dbline 764
 0A0A           ;  angle_upper_byte_5C = angle_upper_byte;
 0A0A 20900100          lds R2,_angle_upper_byte
 0A0E 20920F00          sts _angle_upper_byte_5C,R2
 0A12                   .dbline 765
 0A12           ;  angle_lower_byte_5C = angle_lower_byte;
 0A12 20900200          lds R2,_angle_lower_byte
 0A16 20920E00          sts _angle_lower_byte_5C,R2
 0A1A                   .dbline -2
 0A1A           L145:
 0A1A                   .dbline 0 ; func end
 0A1A A990              ld R10,y+
 0A1C 0895              ret
 0A1E                   .dbsym r angle 10 c
 0A1E                   .dbend
 0A1E                   .dbfunc e angle_6A _angle_6A fV
 0A1E           ;          angle -> R10
                        .even
 0A1E           _angle_6A::
 0A1E AA92              st -y,R10
 0A20 A02E              mov R10,R16
 0A22                   .dbline -1
 0A22                   .dbline 769
 0A22           ; }
 0A22           ; 
 0A22           ; void angle_6A (unsigned char angle)
 0A22           ; {
 0A22                   .dbline 770
 0A22           ;  _6A = degree = angle;
 0A22 A0920300          sts _degree,R10
 0A26 A0922E00          sts __6A,R10
 0A2A                   .dbline 771
 0A2A           ;  angle_value_calculation();
 0A2A C5DE              xcall _angle_value_calculation
 0A2C                   .dbline 772
 0A2C           ;  angle_upper_byte_6A = angle_upper_byte;
 0A2C 20900100          lds R2,_angle_upper_byte
 0A30 20920D00          sts _angle_upper_byte_6A,R2
 0A34                   .dbline 773
 0A34           ;  angle_lower_byte_6A = angle_lower_byte;
 0A34 20900200          lds R2,_angle_lower_byte
 0A38 20920C00          sts _angle_lower_byte_6A,R2
 0A3C                   .dbline -2
 0A3C           L146:
 0A3C                   .dbline 0 ; func end
 0A3C A990              ld R10,y+
 0A3E 0895              ret
 0A40                   .dbsym r angle 10 c
 0A40                   .dbend
 0A40                   .dbfunc e angle_6B _angle_6B fV
 0A40           ;          angle -> R10
                        .even
 0A40           _angle_6B::
 0A40 AA92              st -y,R10
 0A42 A02E              mov R10,R16
 0A44                   .dbline -1
 0A44                   .dbline 777
 0A44           ; }
 0A44           ; 
 0A44           ; void angle_6B (unsigned char angle)
 0A44           ; {
 0A44                   .dbline 778
 0A44           ;  _6B = angle;
 0A44 A0922D00          sts __6B,R10
 0A48                   .dbline 779
 0A48           ;  degree = 180 - angle;
 0A48 2A2C              mov R2,R10
 0A4A 3324              clr R3
 0A4C 84EB              ldi R24,180
 0A4E 90E0              ldi R25,0
 0A50 8219              sub R24,R2
 0A52 9309              sbc R25,R3
 0A54 80930300          sts _degree,R24
 0A58                   .dbline 780
 0A58           ;  angle_value_calculation();
 0A58 AEDE              xcall _angle_value_calculation
 0A5A                   .dbline 781
 0A5A           ;  angle_upper_byte_6B = angle_upper_byte;
 0A5A 20900100          lds R2,_angle_upper_byte
 0A5E 20920B00          sts _angle_upper_byte_6B,R2
 0A62                   .dbline 782
 0A62           ;  angle_lower_byte_6B = angle_lower_byte;
 0A62 20900200          lds R2,_angle_lower_byte
 0A66 20920A00          sts _angle_lower_byte_6B,R2
 0A6A                   .dbline -2
 0A6A           L147:
 0A6A                   .dbline 0 ; func end
 0A6A A990              ld R10,y+
 0A6C 0895              ret
 0A6E                   .dbsym r angle 10 c
 0A6E                   .dbend
 0A6E                   .dbfunc e angle_6C _angle_6C fV
 0A6E           ;          angle -> R10
                        .even
 0A6E           _angle_6C::
 0A6E AA92              st -y,R10
 0A70 A02E              mov R10,R16
 0A72                   .dbline -1
 0A72                   .dbline 786
 0A72           ; }
 0A72           ; 
 0A72           ; void angle_6C (unsigned char angle)
 0A72           ; {
 0A72                   .dbline 787
 0A72           ;  _6C = angle;
 0A72 A0922C00          sts __6C,R10
 0A76                   .dbline 788
 0A76           ;  degree = 180 - angle;
 0A76 2A2C              mov R2,R10
 0A78 3324              clr R3
 0A7A 84EB              ldi R24,180
 0A7C 90E0              ldi R25,0
 0A7E 8219              sub R24,R2
 0A80 9309              sbc R25,R3
 0A82 80930300          sts _degree,R24
 0A86                   .dbline 789
 0A86           ;  angle_value_calculation();
 0A86 97DE              xcall _angle_value_calculation
 0A88                   .dbline 790
 0A88           ;  angle_upper_byte_6C = angle_upper_byte;
 0A88 20900100          lds R2,_angle_upper_byte
 0A8C 20920900          sts _angle_upper_byte_6C,R2
 0A90                   .dbline 791
 0A90           ;  angle_lower_byte_6C = angle_lower_byte;
 0A90 20900200          lds R2,_angle_lower_byte
 0A94 20920800          sts _angle_lower_byte_6C,R2
 0A98                   .dbline -2
 0A98           L148:
 0A98                   .dbline 0 ; func end
 0A98 A990              ld R10,y+
 0A9A 0895              ret
 0A9C                   .dbsym r angle 10 c
 0A9C                   .dbend
 0A9C                   .dbfunc e buzzer_on _buzzer_on fV
                        .even
 0A9C           _buzzer_on::
 0A9C                   .dbline -1
 0A9C                   .dbline 795
 0A9C           ; }
 0A9C           ; 
 0A9C           ; void buzzer_on (void)
 0A9C           ; {
 0A9C                   .dbline 796
 0A9C           ;  PORTC = PORTC | 0x08;
 0A9C 439A              sbi 0x8,3
 0A9E                   .dbline -2
 0A9E           L149:
 0A9E                   .dbline 0 ; func end
 0A9E 0895              ret
 0AA0                   .dbend
 0AA0                   .dbfunc e buzzer_off _buzzer_off fV
                        .even
 0AA0           _buzzer_off::
 0AA0                   .dbline -1
 0AA0                   .dbline 800
 0AA0           ; }
 0AA0           ; 
 0AA0           ; void buzzer_off (void)
 0AA0           ; {
 0AA0                   .dbline 801
 0AA0           ;  PORTC = PORTC & 0xF7;
 0AA0 88B1              in R24,0x8
 0AA2 877F              andi R24,247
 0AA4 88B9              out 0x8,R24
 0AA6                   .dbline -2
 0AA6           L150:
 0AA6                   .dbline 0 ; func end
 0AA6 0895              ret
 0AA8                   .dbend
 0AA8                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\hexapod.h
 0AA8                   .dbfunc e servo_calibration _servo_calibration fV
                        .even
 0AA8           _servo_calibration::
 0AA8                   .dbline -1
 0AA8                   .dbline 132
 0AA8           ; /**
 0AA8           ; 
 0AA8           ;  hexapod.h :
 0AA8           ;  This file contains the logical code for Hexapod motion and builds upon the file hexapod_firebirdv.h
 0AA8           ;  hexapod_firebirdv.h contains platform-specific code for controlling the sensors and actuators using Atmega2560 ports.
 0AA8           ; 
 0AA8           ;  @author Group 10: Abhinav Maurya 10305016
 0AA8           ;                                  Yogesh Kakde   10305039
 0AA8           ;                                  Lokesh Rajwani 10305066
 0AA8           ;  
 0AA8           ;  AVR Studio Version 4.17, Build 666
 0AA8           ; 
 0AA8           ;  Date: 6th November 2010
 0AA8           ;  
 0AA8           ;     Make sure that in the configuration options following settings are 
 0AA8           ;       done for proper operation of the code
 0AA8           ; 
 0AA8           ;       Microcontroller: atmega2560
 0AA8           ;       Frequency: 11059200
 0AA8           ;       Optimization: -O0 (For more information read section: Selecting proper optimization options 
 0AA8           ;                                               below figure 4.22 in the hardware manual)
 0AA8           ; *********************************************************************************/
 0AA8           ; 
 0AA8           ; 
 0AA8           ; /********************************************************************************
 0AA8           ; 
 0AA8           ;    Copyright (c) 2010, ERTS Lab IIT Bombay erts@cse.iitb.ac.in               -*- c -*-
 0AA8           ;    All rights reserved.
 0AA8           ; 
 0AA8           ;    Redistribution and use in source and binary forms, with or without
 0AA8           ;    modification, are permitted provided that the following conditions are met:
 0AA8           ; 
 0AA8           ;    * Redistributions of source code must retain the above copyright
 0AA8           ;      notice, this list of conditions and the following disclaimer.
 0AA8           ; 
 0AA8           ;    * Redistributions in binary form must reproduce the above copyright
 0AA8           ;      notice, this list of conditions and the following disclaimer in
 0AA8           ;      the documentation and/or other materials provided with the
 0AA8           ;      distribution.
 0AA8           ; 
 0AA8           ;    * Neither the name of the copyright holders nor the names of
 0AA8           ;      contributors may be used to endorse or promote products derived
 0AA8           ;      from this software without specific prior written permission.
 0AA8           ; 
 0AA8           ;    * Source code can be used for academic purpose. 
 0AA8           ;        For commercial use permission form the author needs to be taken.
 0AA8           ; 
 0AA8           ;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 0AA8           ;   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 0AA8           ;   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 0AA8           ;   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 0AA8           ;   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 0AA8           ;   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 0AA8           ;   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 0AA8           ;   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 0AA8           ;   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 0AA8           ;   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 0AA8           ;   POSSIBILITY OF SUCH DAMAGE. 
 0AA8           ; 
 0AA8           ; ********************************************************************************/
 0AA8           ; 
 0AA8           ; 
 0AA8           ;       // Application: ICC-AVR
 0AA8           ; // Target: M2560
 0AA8           ; // Crystal: 11.059Mhz
 0AA8           ; 
 0AA8           ; //List of functions supplied by this header file, hexapod.h
 0AA8           ; /*
 0AA8           ; void servo_calibration (void);
 0AA8           ; void odd_A_servo (unsigned char angle);
 0AA8           ; void even_A_servo (unsigned char angle);
 0AA8           ; void A_servo (unsigned char angle);
 0AA8           ; void odd_B_servo (unsigned char angle);
 0AA8           ; void even_B_servo (unsigned char angle);
 0AA8           ; void B_servo (unsigned char angle);
 0AA8           ; void odd_C_servo (unsigned char angle);
 0AA8           ; void even_C_servo (unsigned char angle);
 0AA8           ; void C_servo (unsigned char angle);
 0AA8           ; void odd_BC_servo (unsigned char angleB, unsigned char angleC);
 0AA8           ; void even_BC_servo (unsigned char angleB, unsigned char angleC);
 0AA8           ; void BC_servo (unsigned char angleB, unsigned char angleC);
 0AA8           ; void odd_A_servo_forward (unsigned char diff);
 0AA8           ; void even_A_servo_forward (unsigned char diff);
 0AA8           ; void A_servo_forward (unsigned char diff);
 0AA8           ; void odd_A_servo_backward (unsigned char diff);
 0AA8           ; void even_A_servo_backward (unsigned char diff);
 0AA8           ; void A_servo_backward (unsigned char diff);
 0AA8           ; void even_A_servo_90 (void);
 0AA8           ; void even_A_servo_65 (void);
 0AA8           ; void even_A_servo_115 (void);
 0AA8           ; void even_BC_servo_90 (void);
 0AA8           ; void even_BC_servo_up_45 (void);
 0AA8           ; void even_BC_servo_down_45 (void);
 0AA8           ; void odd_A_servo_90 (void);
 0AA8           ; void odd_A_servo_65 (void);
 0AA8           ; void odd_A_servo_115 (void);
 0AA8           ; void odd_BC_servo_90 (void);
 0AA8           ; void odd_BC_servo_up_45 (void);
 0AA8           ; void odd_BC_servo_down_45 (void);
 0AA8           ; void rotate_clockwise_7_5 (void)
 0AA8           ; void rotate_anticlockwise_7_5 (void);
 0AA8           ; void forward (void);
 0AA8           ; void forward_3_legs (void);
 0AA8           ; void backward (void);
 0AA8           ; void backward_3_legs (void);
 0AA8           ; void robot_standup (void);
 0AA8           ; void remote_control(void);
 0AA8           ; */
 0AA8           ; 
 0AA8           ; //Functions to be coded
 0AA8           ; /*
 0AA8           ; void rotate_clockwise (unsigned int clock_angle);
 0AA8           ; void rotate_anticlockwise (unsigned int anticlock_angle);
 0AA8           ; void rotate (signed int angle);
 0AA8           ; void move_12 (unsigned int distance);
 0AA8           ; void move_23 (unsigned int distance);
 0AA8           ; void move_45 (unsigned int distance);
 0AA8           ; void move_56 (unsigned int distance);
 0AA8           ; void move_14 (unsigned int distance);
 0AA8           ; void move_36 (unsigned int distance);
 0AA8           ; void forward (unsigned int distance);
 0AA8           ; void backward (unsigned int distance);
 0AA8           ; void move (unsigned char angle, unsigned int distance);
 0AA8           ; void stroke (unsigned char angle, unsigned int distance);
 0AA8           ; void curve (unsigned char tangent_angle, unsigned char segment_angle, unsigned int distance);
 0AA8           ; */
 0AA8           ; 
 0AA8           ; #include <math.h>
 0AA8           ; #include "hexapod_firebirdv.h"
 0AA8           ; 
 0AA8           ; void servo_calibration (void)
 0AA8           ; {
 0AA8                   .dbline 133
 0AA8           ; angle_1A(90); angle_1B(90); angle_1C(90); angle_2A(90); angle_2B(90); angle_2C(90);
 0AA8 0AE5              ldi R16,90
 0AAA 9FDE              xcall _angle_1A
 0AAC                   .dbline 133
 0AAC 0AE5              ldi R16,90
 0AAE AEDE              xcall _angle_1B
 0AB0                   .dbline 133
 0AB0 0AE5              ldi R16,90
 0AB2 BDDE              xcall _angle_1C
 0AB4                   .dbline 133
 0AB4 0AE5              ldi R16,90
 0AB6 CCDE              xcall _angle_2A
 0AB8                   .dbline 133
 0AB8 0AE5              ldi R16,90
 0ABA DBDE              xcall _angle_2B
 0ABC                   .dbline 133
 0ABC 0AE5              ldi R16,90
 0ABE EDDE              xcall _angle_2C
 0AC0                   .dbline 134
 0AC0           ; angle_3A(90); angle_3B(90); angle_3C(90); angle_4A(90); angle_4B(90); angle_4C(90);
 0AC0 0AE5              ldi R16,90
 0AC2 FCDE              xcall _angle_3A
 0AC4                   .dbline 134
 0AC4 0AE5              ldi R16,90
 0AC6 0BDF              xcall _angle_3B
 0AC8                   .dbline 134
 0AC8 0AE5              ldi R16,90
 0ACA 1ADF              xcall _angle_3C
 0ACC                   .dbline 134
 0ACC 0AE5              ldi R16,90
 0ACE 29DF              xcall _angle_4A
 0AD0                   .dbline 134
 0AD0 0AE5              ldi R16,90
 0AD2 38DF              xcall _angle_4B
 0AD4                   .dbline 134
 0AD4 0AE5              ldi R16,90
 0AD6 4DDF              xcall _angle_4C
 0AD8                   .dbline 135
 0AD8           ; angle_5A(90); angle_5B(90); angle_5C(90); angle_6A(90); angle_6B(90); angle_6C(90);
 0AD8 0AE5              ldi R16,90
 0ADA 62DF              xcall _angle_5A
 0ADC                   .dbline 135
 0ADC 0AE5              ldi R16,90
 0ADE 71DF              xcall _angle_5B
 0AE0                   .dbline 135
 0AE0 0AE5              ldi R16,90
 0AE2 86DF              xcall _angle_5C
 0AE4                   .dbline 135
 0AE4 0AE5              ldi R16,90
 0AE6 9BDF              xcall _angle_6A
 0AE8                   .dbline 135
 0AE8 0AE5              ldi R16,90
 0AEA AADF              xcall _angle_6B
 0AEC                   .dbline 135
 0AEC 0AE5              ldi R16,90
 0AEE BFDF              xcall _angle_6C
 0AF0                   .dbline -2
 0AF0           L151:
 0AF0                   .dbline 0 ; func end
 0AF0 0895              ret
 0AF2                   .dbend
 0AF2                   .dbfunc e odd_A_servo _odd_A_servo fV
 0AF2           ;          angle -> R10
                        .even
 0AF2           _odd_A_servo::
 0AF2 AA92              st -y,R10
 0AF4 A02E              mov R10,R16
 0AF6                   .dbline -1
 0AF6                   .dbline 145
 0AF6           ; }
 0AF6           ; 
 0AF6           ; /*
 0AF6           ; Setting angle for A Motors:
 0AF6           ; 90  - Perpendicular
 0AF6           ; 65  - Clockwise
 0AF6           ; 115 - Anticlockwise
 0AF6           ; */
 0AF6           ; void odd_A_servo (unsigned char angle)
 0AF6           ; { angle_1A(angle); angle_3A(angle); angle_5A(angle); }
 0AF6                   .dbline 145
 0AF6 0A2D              mov R16,R10
 0AF8 78DE              xcall _angle_1A
 0AFA                   .dbline 145
 0AFA 0A2D              mov R16,R10
 0AFC DFDE              xcall _angle_3A
 0AFE                   .dbline 145
 0AFE 0A2D              mov R16,R10
 0B00 4FDF              xcall _angle_5A
 0B02                   .dbline -2
 0B02           L152:
 0B02                   .dbline 0 ; func end
 0B02 A990              ld R10,y+
 0B04 0895              ret
 0B06                   .dbsym r angle 10 c
 0B06                   .dbend
 0B06                   .dbfunc e even_A_servo _even_A_servo fV
 0B06           ;          angle -> R10
                        .even
 0B06           _even_A_servo::
 0B06 AA92              st -y,R10
 0B08 A02E              mov R10,R16
 0B0A                   .dbline -1
 0B0A                   .dbline 148
 0B0A           ; 
 0B0A           ; void even_A_servo (unsigned char angle)
 0B0A           ; { angle_2A(angle); angle_4A(angle); angle_6A(angle); }
 0B0A                   .dbline 148
 0B0A 0A2D              mov R16,R10
 0B0C A1DE              xcall _angle_2A
 0B0E                   .dbline 148
 0B0E 0A2D              mov R16,R10
 0B10 08DF              xcall _angle_4A
 0B12                   .dbline 148
 0B12 0A2D              mov R16,R10
 0B14 84DF              xcall _angle_6A
 0B16                   .dbline -2
 0B16           L153:
 0B16                   .dbline 0 ; func end
 0B16 A990              ld R10,y+
 0B18 0895              ret
 0B1A                   .dbsym r angle 10 c
 0B1A                   .dbend
 0B1A                   .dbfunc e A_servo _A_servo fV
 0B1A           ;          angle -> R10
                        .even
 0B1A           _A_servo::
 0B1A AA92              st -y,R10
 0B1C A02E              mov R10,R16
 0B1E                   .dbline -1
 0B1E                   .dbline 151
 0B1E           ; 
 0B1E           ; void A_servo (unsigned char angle)
 0B1E           ; { angle_1A(angle); angle_2A(angle); angle_3A(angle); angle_4A(angle); angle_5A(angle); angle_6A(angle); }
 0B1E                   .dbline 151
 0B1E 0A2D              mov R16,R10
 0B20 64DE              xcall _angle_1A
 0B22                   .dbline 151
 0B22 0A2D              mov R16,R10
 0B24 95DE              xcall _angle_2A
 0B26                   .dbline 151
 0B26 0A2D              mov R16,R10
 0B28 C9DE              xcall _angle_3A
 0B2A                   .dbline 151
 0B2A 0A2D              mov R16,R10
 0B2C FADE              xcall _angle_4A
 0B2E                   .dbline 151
 0B2E 0A2D              mov R16,R10
 0B30 37DF              xcall _angle_5A
 0B32                   .dbline 151
 0B32 0A2D              mov R16,R10
 0B34 74DF              xcall _angle_6A
 0B36                   .dbline -2
 0B36           L154:
 0B36                   .dbline 0 ; func end
 0B36 A990              ld R10,y+
 0B38 0895              ret
 0B3A                   .dbsym r angle 10 c
 0B3A                   .dbend
 0B3A                   .dbfunc e odd_B_servo _odd_B_servo fV
 0B3A           ;          angle -> R10
                        .even
 0B3A           _odd_B_servo::
 0B3A AA92              st -y,R10
 0B3C A02E              mov R10,R16
 0B3E                   .dbline -1
 0B3E                   .dbline 160
 0B3E           ; 
 0B3E           ; /*
 0B3E           ; Setting angle for B Motors:
 0B3E           ; 90  - Horizontal
 0B3E           ; 45  - Inclined
 0B3E           ; 135 - Declined
 0B3E           ; */
 0B3E           ; void odd_B_servo (unsigned char angle)
 0B3E           ; { angle_1B(angle); angle_3B(angle); angle_5B(angle); }
 0B3E                   .dbline 160
 0B3E 0A2D              mov R16,R10
 0B40 65DE              xcall _angle_1B
 0B42                   .dbline 160
 0B42 0A2D              mov R16,R10
 0B44 CCDE              xcall _angle_3B
 0B46                   .dbline 160
 0B46 0A2D              mov R16,R10
 0B48 3CDF              xcall _angle_5B
 0B4A                   .dbline -2
 0B4A           L155:
 0B4A                   .dbline 0 ; func end
 0B4A A990              ld R10,y+
 0B4C 0895              ret
 0B4E                   .dbsym r angle 10 c
 0B4E                   .dbend
 0B4E                   .dbfunc e even_B_servo _even_B_servo fV
 0B4E           ;          angle -> R10
                        .even
 0B4E           _even_B_servo::
 0B4E AA92              st -y,R10
 0B50 A02E              mov R10,R16
 0B52                   .dbline -1
 0B52                   .dbline 163
 0B52           ; 
 0B52           ; void even_B_servo (unsigned char angle)
 0B52           ; { angle_2B(angle); angle_4B(angle); angle_6B(angle); }
 0B52                   .dbline 163
 0B52 0A2D              mov R16,R10
 0B54 8EDE              xcall _angle_2B
 0B56                   .dbline 163
 0B56 0A2D              mov R16,R10
 0B58 F5DE              xcall _angle_4B
 0B5A                   .dbline 163
 0B5A 0A2D              mov R16,R10
 0B5C 71DF              xcall _angle_6B
 0B5E                   .dbline -2
 0B5E           L156:
 0B5E                   .dbline 0 ; func end
 0B5E A990              ld R10,y+
 0B60 0895              ret
 0B62                   .dbsym r angle 10 c
 0B62                   .dbend
 0B62                   .dbfunc e B_servo _B_servo fV
 0B62           ;          angle -> R10
                        .even
 0B62           _B_servo::
 0B62 AA92              st -y,R10
 0B64 A02E              mov R10,R16
 0B66                   .dbline -1
 0B66                   .dbline 166
 0B66           ; 
 0B66           ; void B_servo (unsigned char angle)
 0B66           ; { angle_1B(angle); angle_2B(angle); angle_3B(angle); angle_4B(angle); angle_5B(angle); angle_6B(angle); }
 0B66                   .dbline 166
 0B66 0A2D              mov R16,R10
 0B68 51DE              xcall _angle_1B
 0B6A                   .dbline 166
 0B6A 0A2D              mov R16,R10
 0B6C 82DE              xcall _angle_2B
 0B6E                   .dbline 166
 0B6E 0A2D              mov R16,R10
 0B70 B6DE              xcall _angle_3B
 0B72                   .dbline 166
 0B72 0A2D              mov R16,R10
 0B74 E7DE              xcall _angle_4B
 0B76                   .dbline 166
 0B76 0A2D              mov R16,R10
 0B78 24DF              xcall _angle_5B
 0B7A                   .dbline 166
 0B7A 0A2D              mov R16,R10
 0B7C 61DF              xcall _angle_6B
 0B7E                   .dbline -2
 0B7E           L157:
 0B7E                   .dbline 0 ; func end
 0B7E A990              ld R10,y+
 0B80 0895              ret
 0B82                   .dbsym r angle 10 c
 0B82                   .dbend
 0B82                   .dbfunc e odd_C_servo _odd_C_servo fV
 0B82           ;          angle -> R10
                        .even
 0B82           _odd_C_servo::
 0B82 AA92              st -y,R10
 0B84 A02E              mov R10,R16
 0B86                   .dbline -1
 0B86                   .dbline 175
 0B86           ; 
 0B86           ; /*
 0B86           ; Setting angle for C Motors:
 0B86           ; 90  - Perpendicular
 0B86           ; 45  - Outward
 0B86           ; 135 - Inward
 0B86           ; */
 0B86           ; void odd_C_servo (unsigned char angle)
 0B86           ; { angle_1C(angle); angle_3C(angle); angle_5C(angle); }
 0B86                   .dbline 175
 0B86 0A2D              mov R16,R10
 0B88 52DE              xcall _angle_1C
 0B8A                   .dbline 175
 0B8A 0A2D              mov R16,R10
 0B8C B9DE              xcall _angle_3C
 0B8E                   .dbline 175
 0B8E 0A2D              mov R16,R10
 0B90 2FDF              xcall _angle_5C
 0B92                   .dbline -2
 0B92           L158:
 0B92                   .dbline 0 ; func end
 0B92 A990              ld R10,y+
 0B94 0895              ret
 0B96                   .dbsym r angle 10 c
 0B96                   .dbend
 0B96                   .dbfunc e even_C_servo _even_C_servo fV
 0B96           ;          angle -> R10
                        .even
 0B96           _even_C_servo::
 0B96 AA92              st -y,R10
 0B98 A02E              mov R10,R16
 0B9A                   .dbline -1
 0B9A                   .dbline 178
 0B9A           ; 
 0B9A           ; void even_C_servo (unsigned char angle)
 0B9A           ; { angle_2C(angle); angle_4C(angle); angle_6C(angle); }
 0B9A                   .dbline 178
 0B9A 0A2D              mov R16,R10
 0B9C 7EDE              xcall _angle_2C
 0B9E                   .dbline 178
 0B9E 0A2D              mov R16,R10
 0BA0 E8DE              xcall _angle_4C
 0BA2                   .dbline 178
 0BA2 0A2D              mov R16,R10
 0BA4 64DF              xcall _angle_6C
 0BA6                   .dbline -2
 0BA6           L159:
 0BA6                   .dbline 0 ; func end
 0BA6 A990              ld R10,y+
 0BA8 0895              ret
 0BAA                   .dbsym r angle 10 c
 0BAA                   .dbend
 0BAA                   .dbfunc e C_servo _C_servo fV
 0BAA           ;          angle -> R10
                        .even
 0BAA           _C_servo::
 0BAA AA92              st -y,R10
 0BAC A02E              mov R10,R16
 0BAE                   .dbline -1
 0BAE                   .dbline 181
 0BAE           ; 
 0BAE           ; void C_servo (unsigned char angle)
 0BAE           ; { angle_1C(angle); angle_2C(angle); angle_3C(angle); angle_4C(angle); angle_5C(angle); angle_6C(angle); }
 0BAE                   .dbline 181
 0BAE 0A2D              mov R16,R10
 0BB0 3EDE              xcall _angle_1C
 0BB2                   .dbline 181
 0BB2 0A2D              mov R16,R10
 0BB4 72DE              xcall _angle_2C
 0BB6                   .dbline 181
 0BB6 0A2D              mov R16,R10
 0BB8 A3DE              xcall _angle_3C
 0BBA                   .dbline 181
 0BBA 0A2D              mov R16,R10
 0BBC DADE              xcall _angle_4C
 0BBE                   .dbline 181
 0BBE 0A2D              mov R16,R10
 0BC0 17DF              xcall _angle_5C
 0BC2                   .dbline 181
 0BC2 0A2D              mov R16,R10
 0BC4 54DF              xcall _angle_6C
 0BC6                   .dbline -2
 0BC6           L160:
 0BC6                   .dbline 0 ; func end
 0BC6 A990              ld R10,y+
 0BC8 0895              ret
 0BCA                   .dbsym r angle 10 c
 0BCA                   .dbend
 0BCA                   .dbfunc e odd_BC_servo _odd_BC_servo fV
 0BCA           ;         angleC -> R10
 0BCA           ;         angleB -> R12
                        .even
 0BCA           _odd_BC_servo::
 0BCA AA92              st -y,R10
 0BCC CA92              st -y,R12
 0BCE A22E              mov R10,R18
 0BD0 C02E              mov R12,R16
 0BD2                   .dbline -1
 0BD2                   .dbline 190
 0BD2           ; 
 0BD2           ; /*
 0BD2           ; Setting angle for BC Motors:
 0BD2           ; 90  - Perpendicular
 0BD2           ; 45  - Clockwise
 0BD2           ; 135 - Anticlockwise
 0BD2           ; */
 0BD2           ; void odd_BC_servo (unsigned char angleB, unsigned char angleC)
 0BD2           ; { odd_B_servo(angleB); odd_C_servo(angleC); }
 0BD2                   .dbline 190
 0BD2 0C2D              mov R16,R12
 0BD4 B2DF              xcall _odd_B_servo
 0BD6                   .dbline 190
 0BD6 0A2D              mov R16,R10
 0BD8 D4DF              xcall _odd_C_servo
 0BDA                   .dbline -2
 0BDA           L161:
 0BDA                   .dbline 0 ; func end
 0BDA C990              ld R12,y+
 0BDC A990              ld R10,y+
 0BDE 0895              ret
 0BE0                   .dbsym r angleC 10 c
 0BE0                   .dbsym r angleB 12 c
 0BE0                   .dbend
 0BE0                   .dbfunc e even_BC_servo _even_BC_servo fV
 0BE0           ;         angleC -> R10
 0BE0           ;         angleB -> R12
                        .even
 0BE0           _even_BC_servo::
 0BE0 AA92              st -y,R10
 0BE2 CA92              st -y,R12
 0BE4 A22E              mov R10,R18
 0BE6 C02E              mov R12,R16
 0BE8                   .dbline -1
 0BE8                   .dbline 193
 0BE8           ; 
 0BE8           ; void even_BC_servo (unsigned char angleB, unsigned char angleC)
 0BE8           ; { even_B_servo(angleB); even_C_servo(angleC); }
 0BE8                   .dbline 193
 0BE8 0C2D              mov R16,R12
 0BEA B1DF              xcall _even_B_servo
 0BEC                   .dbline 193
 0BEC 0A2D              mov R16,R10
 0BEE D3DF              xcall _even_C_servo
 0BF0                   .dbline -2
 0BF0           L162:
 0BF0                   .dbline 0 ; func end
 0BF0 C990              ld R12,y+
 0BF2 A990              ld R10,y+
 0BF4 0895              ret
 0BF6                   .dbsym r angleC 10 c
 0BF6                   .dbsym r angleB 12 c
 0BF6                   .dbend
 0BF6                   .dbfunc e BC_servo _BC_servo fV
 0BF6           ;         angleC -> R10
 0BF6           ;         angleB -> R12
                        .even
 0BF6           _BC_servo::
 0BF6 AA92              st -y,R10
 0BF8 CA92              st -y,R12
 0BFA A22E              mov R10,R18
 0BFC C02E              mov R12,R16
 0BFE                   .dbline -1
 0BFE                   .dbline 196
 0BFE           ; 
 0BFE           ; void BC_servo (unsigned char angleB, unsigned char angleC)
 0BFE           ; { B_servo(angleB); C_servo(angleC);  }
 0BFE                   .dbline 196
 0BFE 0C2D              mov R16,R12
 0C00 B0DF              xcall _B_servo
 0C02                   .dbline 196
 0C02 0A2D              mov R16,R10
 0C04 D2DF              xcall _C_servo
 0C06                   .dbline -2
 0C06           L163:
 0C06                   .dbline 0 ; func end
 0C06 C990              ld R12,y+
 0C08 A990              ld R10,y+
 0C0A 0895              ret
 0C0C                   .dbsym r angleC 10 c
 0C0C                   .dbsym r angleB 12 c
 0C0C                   .dbend
 0C0C                   .dbfunc e odd_A_servo_forward _odd_A_servo_forward fV
 0C0C           ;           diff -> R10
                        .even
 0C0C           _odd_A_servo_forward::
 0C0C AA92              st -y,R10
 0C0E A02E              mov R10,R16
 0C10                   .dbline -1
 0C10                   .dbline 200
 0C10           ; 
 0C10           ; //Setting angle for A Motors: Non-uniform for Forward Rectilinear Motion
 0C10           ; void odd_A_servo_forward (unsigned char diff)
 0C10           ; { angle_1A(_1A-diff); angle_3A(_3A-diff); angle_5A(_5A+diff); }
 0C10                   .dbline 200
 0C10 00913D00          lds R16,__1A
 0C14 0A19              sub R16,R10
 0C16 E9DD              xcall _angle_1A
 0C18                   .dbline 200
 0C18 00913700          lds R16,__3A
 0C1C 0A19              sub R16,R10
 0C1E 4EDE              xcall _angle_3A
 0C20                   .dbline 200
 0C20 00913100          lds R16,__5A
 0C24 0A0D              add R16,R10
 0C26 BCDE              xcall _angle_5A
 0C28                   .dbline -2
 0C28           L164:
 0C28                   .dbline 0 ; func end
 0C28 A990              ld R10,y+
 0C2A 0895              ret
 0C2C                   .dbsym r diff 10 c
 0C2C                   .dbend
 0C2C                   .dbfunc e even_A_servo_forward _even_A_servo_forward fV
 0C2C           ;           diff -> R10
                        .even
 0C2C           _even_A_servo_forward::
 0C2C AA92              st -y,R10
 0C2E A02E              mov R10,R16
 0C30                   .dbline -1
 0C30                   .dbline 203
 0C30           ; 
 0C30           ; void even_A_servo_forward (unsigned char diff)
 0C30           ; { angle_2A(_2A-diff); angle_4A(_4A+diff); angle_6A(_6A+diff); }
 0C30                   .dbline 203
 0C30 00913A00          lds R16,__2A
 0C34 0A19              sub R16,R10
 0C36 0CDE              xcall _angle_2A
 0C38                   .dbline 203
 0C38 00913400          lds R16,__4A
 0C3C 0A0D              add R16,R10
 0C3E 71DE              xcall _angle_4A
 0C40                   .dbline 203
 0C40 00912E00          lds R16,__6A
 0C44 0A0D              add R16,R10
 0C46 EBDE              xcall _angle_6A
 0C48                   .dbline -2
 0C48           L165:
 0C48                   .dbline 0 ; func end
 0C48 A990              ld R10,y+
 0C4A 0895              ret
 0C4C                   .dbsym r diff 10 c
 0C4C                   .dbend
 0C4C                   .dbfunc e A_servo_forward _A_servo_forward fV
 0C4C           ;           diff -> R10
                        .even
 0C4C           _A_servo_forward::
 0C4C AA92              st -y,R10
 0C4E A02E              mov R10,R16
 0C50                   .dbline -1
 0C50                   .dbline 206
 0C50           ; 
 0C50           ; void A_servo_forward (unsigned char diff)
 0C50           ; { angle_1A(_1A-diff); angle_2A(_2A-diff); angle_3A(_3A-diff); angle_4A(_4A+diff); angle_5A(_5A+diff); angle_6A(_6A+diff); }
 0C50                   .dbline 206
 0C50 00913D00          lds R16,__1A
 0C54 0A19              sub R16,R10
 0C56 C9DD              xcall _angle_1A
 0C58                   .dbline 206
 0C58 00913A00          lds R16,__2A
 0C5C 0A19              sub R16,R10
 0C5E F8DD              xcall _angle_2A
 0C60                   .dbline 206
 0C60 00913700          lds R16,__3A
 0C64 0A19              sub R16,R10
 0C66 2ADE              xcall _angle_3A
 0C68                   .dbline 206
 0C68 00913400          lds R16,__4A
 0C6C 0A0D              add R16,R10
 0C6E 59DE              xcall _angle_4A
 0C70                   .dbline 206
 0C70 00913100          lds R16,__5A
 0C74 0A0D              add R16,R10
 0C76 94DE              xcall _angle_5A
 0C78                   .dbline 206
 0C78 00912E00          lds R16,__6A
 0C7C 0A0D              add R16,R10
 0C7E CFDE              xcall _angle_6A
 0C80                   .dbline -2
 0C80           L166:
 0C80                   .dbline 0 ; func end
 0C80 A990              ld R10,y+
 0C82 0895              ret
 0C84                   .dbsym r diff 10 c
 0C84                   .dbend
 0C84                   .dbfunc e odd_A_servo_backward _odd_A_servo_backward fV
 0C84           ;           diff -> R10
                        .even
 0C84           _odd_A_servo_backward::
 0C84 AA92              st -y,R10
 0C86 A02E              mov R10,R16
 0C88                   .dbline -1
 0C88                   .dbline 210
 0C88           ; 
 0C88           ; //Setting angle for A Motors: Non-uniform for Backward Rectilinear Motion
 0C88           ; void odd_A_servo_backward (unsigned char diff)
 0C88           ; { angle_1A(_1A+diff); angle_3A(_3A+diff); angle_5A(_5A-diff); }
 0C88                   .dbline 210
 0C88 00913D00          lds R16,__1A
 0C8C 0A0D              add R16,R10
 0C8E ADDD              xcall _angle_1A
 0C90                   .dbline 210
 0C90 00913700          lds R16,__3A
 0C94 0A0D              add R16,R10
 0C96 12DE              xcall _angle_3A
 0C98                   .dbline 210
 0C98 00913100          lds R16,__5A
 0C9C 0A19              sub R16,R10
 0C9E 80DE              xcall _angle_5A
 0CA0                   .dbline -2
 0CA0           L167:
 0CA0                   .dbline 0 ; func end
 0CA0 A990              ld R10,y+
 0CA2 0895              ret
 0CA4                   .dbsym r diff 10 c
 0CA4                   .dbend
 0CA4                   .dbfunc e even_A_servo_backward _even_A_servo_backward fV
 0CA4           ;           diff -> R10
                        .even
 0CA4           _even_A_servo_backward::
 0CA4 AA92              st -y,R10
 0CA6 A02E              mov R10,R16
 0CA8                   .dbline -1
 0CA8                   .dbline 213
 0CA8           ; 
 0CA8           ; void even_A_servo_backward (unsigned char diff)
 0CA8           ; { angle_2A(_2A+diff); angle_4A(_4A-diff); angle_6A(_6A-diff); }
 0CA8                   .dbline 213
 0CA8 00913A00          lds R16,__2A
 0CAC 0A0D              add R16,R10
 0CAE D0DD              xcall _angle_2A
 0CB0                   .dbline 213
 0CB0 00913400          lds R16,__4A
 0CB4 0A19              sub R16,R10
 0CB6 35DE              xcall _angle_4A
 0CB8                   .dbline 213
 0CB8 00912E00          lds R16,__6A
 0CBC 0A19              sub R16,R10
 0CBE AFDE              xcall _angle_6A
 0CC0                   .dbline -2
 0CC0           L168:
 0CC0                   .dbline 0 ; func end
 0CC0 A990              ld R10,y+
 0CC2 0895              ret
 0CC4                   .dbsym r diff 10 c
 0CC4                   .dbend
 0CC4                   .dbfunc e A_servo_backward _A_servo_backward fV
 0CC4           ;           diff -> R10
                        .even
 0CC4           _A_servo_backward::
 0CC4 AA92              st -y,R10
 0CC6 A02E              mov R10,R16
 0CC8                   .dbline -1
 0CC8                   .dbline 216
 0CC8           ; 
 0CC8           ; void A_servo_backward (unsigned char diff)
 0CC8           ; { angle_1A(_1A+diff); angle_2A(_2A+diff); angle_3A(_3A+diff); angle_4A(_4A-diff); angle_5A(_5A-diff); angle_6A(_6A-diff); }
 0CC8                   .dbline 216
 0CC8 00913D00          lds R16,__1A
 0CCC 0A0D              add R16,R10
 0CCE 8DDD              xcall _angle_1A
 0CD0                   .dbline 216
 0CD0 00913A00          lds R16,__2A
 0CD4 0A0D              add R16,R10
 0CD6 BCDD              xcall _angle_2A
 0CD8                   .dbline 216
 0CD8 00913700          lds R16,__3A
 0CDC 0A0D              add R16,R10
 0CDE EEDD              xcall _angle_3A
 0CE0                   .dbline 216
 0CE0 00913400          lds R16,__4A
 0CE4 0A19              sub R16,R10
 0CE6 1DDE              xcall _angle_4A
 0CE8                   .dbline 216
 0CE8 00913100          lds R16,__5A
 0CEC 0A19              sub R16,R10
 0CEE 58DE              xcall _angle_5A
 0CF0                   .dbline 216
 0CF0 00912E00          lds R16,__6A
 0CF4 0A19              sub R16,R10
 0CF6 93DE              xcall _angle_6A
 0CF8                   .dbline -2
 0CF8           L169:
 0CF8                   .dbline 0 ; func end
 0CF8 A990              ld R10,y+
 0CFA 0895              ret
 0CFC                   .dbsym r diff 10 c
 0CFC                   .dbend
 0CFC                   .dbfunc e opp_14_A _opp_14_A fV
 0CFC           ;         angleA -> R10
                        .even
 0CFC           _opp_14_A::
 0CFC AA92              st -y,R10
 0CFE A02E              mov R10,R16
 0D00                   .dbline -1
 0D00                   .dbline 219
 0D00           ; 
 0D00           ; void opp_14_A (unsigned char angleA)
 0D00           ; { angle_1A(angleA); angle_4A(angleA); }
 0D00                   .dbline 219
 0D00 0A2D              mov R16,R10
 0D02 73DD              xcall _angle_1A
 0D04                   .dbline 219
 0D04 0A2D              mov R16,R10
 0D06 0DDE              xcall _angle_4A
 0D08                   .dbline -2
 0D08           L170:
 0D08                   .dbline 0 ; func end
 0D08 A990              ld R10,y+
 0D0A 0895              ret
 0D0C                   .dbsym r angleA 10 c
 0D0C                   .dbend
 0D0C                   .dbfunc e opp_26_A _opp_26_A fV
 0D0C           ;         angleA -> R10
                        .even
 0D0C           _opp_26_A::
 0D0C AA92              st -y,R10
 0D0E A02E              mov R10,R16
 0D10                   .dbline -1
 0D10                   .dbline 222
 0D10           ; 
 0D10           ; void opp_26_A (unsigned char angleA)
 0D10           ; { angle_2A(angleA); angle_6A(angleA); }
 0D10                   .dbline 222
 0D10 0A2D              mov R16,R10
 0D12 9EDD              xcall _angle_2A
 0D14                   .dbline 222
 0D14 0A2D              mov R16,R10
 0D16 83DE              xcall _angle_6A
 0D18                   .dbline -2
 0D18           L171:
 0D18                   .dbline 0 ; func end
 0D18 A990              ld R10,y+
 0D1A 0895              ret
 0D1C                   .dbsym r angleA 10 c
 0D1C                   .dbend
 0D1C                   .dbfunc e opp_35_A _opp_35_A fV
 0D1C           ;         angleA -> R10
                        .even
 0D1C           _opp_35_A::
 0D1C AA92              st -y,R10
 0D1E A02E              mov R10,R16
 0D20                   .dbline -1
 0D20                   .dbline 225
 0D20           ; 
 0D20           ; void opp_35_A (unsigned char angleA)
 0D20           ; { angle_3A(angleA); angle_5A(angleA); }
 0D20                   .dbline 225
 0D20 0A2D              mov R16,R10
 0D22 CCDD              xcall _angle_3A
 0D24                   .dbline 225
 0D24 0A2D              mov R16,R10
 0D26 3CDE              xcall _angle_5A
 0D28                   .dbline -2
 0D28           L172:
 0D28                   .dbline 0 ; func end
 0D28 A990              ld R10,y+
 0D2A 0895              ret
 0D2C                   .dbsym r angleA 10 c
 0D2C                   .dbend
 0D2C                   .dbfunc e opp_14_A_forward _opp_14_A_forward fV
 0D2C           ;           diff -> R10
                        .even
 0D2C           _opp_14_A_forward::
 0D2C AA92              st -y,R10
 0D2E A02E              mov R10,R16
 0D30                   .dbline -1
 0D30                   .dbline 228
 0D30           ; 
 0D30           ; void opp_14_A_forward (unsigned char diff)
 0D30           ; { angle_1A(_1A-diff); angle_4A(_4A+diff); }
 0D30                   .dbline 228
 0D30 00913D00          lds R16,__1A
 0D34 0A19              sub R16,R10
 0D36 59DD              xcall _angle_1A
 0D38                   .dbline 228
 0D38 00913400          lds R16,__4A
 0D3C 0A0D              add R16,R10
 0D3E F1DD              xcall _angle_4A
 0D40                   .dbline -2
 0D40           L173:
 0D40                   .dbline 0 ; func end
 0D40 A990              ld R10,y+
 0D42 0895              ret
 0D44                   .dbsym r diff 10 c
 0D44                   .dbend
 0D44                   .dbfunc e opp_26_A_forward _opp_26_A_forward fV
 0D44           ;           diff -> R10
                        .even
 0D44           _opp_26_A_forward::
 0D44 AA92              st -y,R10
 0D46 A02E              mov R10,R16
 0D48                   .dbline -1
 0D48                   .dbline 231
 0D48           ; 
 0D48           ; void opp_26_A_forward (unsigned char diff)
 0D48           ; { angle_2A(_2A-diff); angle_6A(_6A+diff); }
 0D48                   .dbline 231
 0D48 00913A00          lds R16,__2A
 0D4C 0A19              sub R16,R10
 0D4E 80DD              xcall _angle_2A
 0D50                   .dbline 231
 0D50 00912E00          lds R16,__6A
 0D54 0A0D              add R16,R10
 0D56 63DE              xcall _angle_6A
 0D58                   .dbline -2
 0D58           L174:
 0D58                   .dbline 0 ; func end
 0D58 A990              ld R10,y+
 0D5A 0895              ret
 0D5C                   .dbsym r diff 10 c
 0D5C                   .dbend
 0D5C                   .dbfunc e opp_35_A_forward _opp_35_A_forward fV
 0D5C           ;           diff -> R10
                        .even
 0D5C           _opp_35_A_forward::
 0D5C AA92              st -y,R10
 0D5E A02E              mov R10,R16
 0D60                   .dbline -1
 0D60                   .dbline 234
 0D60           ; 
 0D60           ; void opp_35_A_forward (unsigned char diff)
 0D60           ; { angle_3A(_3A-diff); angle_5A(_5A+diff); }
 0D60                   .dbline 234
 0D60 00913700          lds R16,__3A
 0D64 0A19              sub R16,R10
 0D66 AADD              xcall _angle_3A
 0D68                   .dbline 234
 0D68 00913100          lds R16,__5A
 0D6C 0A0D              add R16,R10
 0D6E 18DE              xcall _angle_5A
 0D70                   .dbline -2
 0D70           L175:
 0D70                   .dbline 0 ; func end
 0D70 A990              ld R10,y+
 0D72 0895              ret
 0D74                   .dbsym r diff 10 c
 0D74                   .dbend
 0D74                   .dbfunc e opp_14_BC _opp_14_BC fV
 0D74           ;         angleC -> R10
 0D74           ;         angleB -> R12
                        .even
 0D74           _opp_14_BC::
 0D74 AA92              st -y,R10
 0D76 CA92              st -y,R12
 0D78 A22E              mov R10,R18
 0D7A C02E              mov R12,R16
 0D7C                   .dbline -1
 0D7C                   .dbline 237
 0D7C           ; 
 0D7C           ; void opp_14_BC (unsigned char angleB, unsigned char angleC)
 0D7C           ; { angle_1B(angleB); angle_1C(angleC); angle_4B(angleB); angle_4C(angleC); }
 0D7C                   .dbline 237
 0D7C 0C2D              mov R16,R12
 0D7E 46DD              xcall _angle_1B
 0D80                   .dbline 237
 0D80 0A2D              mov R16,R10
 0D82 55DD              xcall _angle_1C
 0D84                   .dbline 237
 0D84 0C2D              mov R16,R12
 0D86 DEDD              xcall _angle_4B
 0D88                   .dbline 237
 0D88 0A2D              mov R16,R10
 0D8A F3DD              xcall _angle_4C
 0D8C                   .dbline -2
 0D8C           L176:
 0D8C                   .dbline 0 ; func end
 0D8C C990              ld R12,y+
 0D8E A990              ld R10,y+
 0D90 0895              ret
 0D92                   .dbsym r angleC 10 c
 0D92                   .dbsym r angleB 12 c
 0D92                   .dbend
 0D92                   .dbfunc e opp_26_BC _opp_26_BC fV
 0D92           ;         angleC -> R10
 0D92           ;         angleB -> R12
                        .even
 0D92           _opp_26_BC::
 0D92 AA92              st -y,R10
 0D94 CA92              st -y,R12
 0D96 A22E              mov R10,R18
 0D98 C02E              mov R12,R16
 0D9A                   .dbline -1
 0D9A                   .dbline 240
 0D9A           ; 
 0D9A           ; void opp_26_BC (unsigned char angleB, unsigned char angleC)
 0D9A           ; { angle_2B(angleB); angle_2C(angleC); angle_6B(angleB); angle_6C(angleC); }
 0D9A                   .dbline 240
 0D9A 0C2D              mov R16,R12
 0D9C 6ADD              xcall _angle_2B
 0D9E                   .dbline 240
 0D9E 0A2D              mov R16,R10
 0DA0 7CDD              xcall _angle_2C
 0DA2                   .dbline 240
 0DA2 0C2D              mov R16,R12
 0DA4 4DDE              xcall _angle_6B
 0DA6                   .dbline 240
 0DA6 0A2D              mov R16,R10
 0DA8 62DE              xcall _angle_6C
 0DAA                   .dbline -2
 0DAA           L177:
 0DAA                   .dbline 0 ; func end
 0DAA C990              ld R12,y+
 0DAC A990              ld R10,y+
 0DAE 0895              ret
 0DB0                   .dbsym r angleC 10 c
 0DB0                   .dbsym r angleB 12 c
 0DB0                   .dbend
 0DB0                   .dbfunc e opp_35_BC _opp_35_BC fV
 0DB0           ;         angleC -> R10
 0DB0           ;         angleB -> R12
                        .even
 0DB0           _opp_35_BC::
 0DB0 AA92              st -y,R10
 0DB2 CA92              st -y,R12
 0DB4 A22E              mov R10,R18
 0DB6 C02E              mov R12,R16
 0DB8                   .dbline -1
 0DB8                   .dbline 243
 0DB8           ; 
 0DB8           ; void opp_35_BC (unsigned char angleB, unsigned char angleC)
 0DB8           ; { angle_3B(angleB); angle_3C(angleC); angle_5B(angleB); angle_5C(angleC); }
 0DB8                   .dbline 243
 0DB8 0C2D              mov R16,R12
 0DBA 91DD              xcall _angle_3B
 0DBC                   .dbline 243
 0DBC 0A2D              mov R16,R10
 0DBE A0DD              xcall _angle_3C
 0DC0                   .dbline 243
 0DC0 0C2D              mov R16,R12
 0DC2 FFDD              xcall _angle_5B
 0DC4                   .dbline 243
 0DC4 0A2D              mov R16,R10
 0DC6 14DE              xcall _angle_5C
 0DC8                   .dbline -2
 0DC8           L178:
 0DC8                   .dbline 0 ; func end
 0DC8 C990              ld R12,y+
 0DCA A990              ld R10,y+
 0DCC 0895              ret
 0DCE                   .dbsym r angleC 10 c
 0DCE                   .dbsym r angleB 12 c
 0DCE                   .dbend
 0DCE                   .dbfunc e even_A_servo_90 _even_A_servo_90 fV
                        .even
 0DCE           _even_A_servo_90::
 0DCE                   .dbline -1
 0DCE                   .dbline 247
 0DCE           ; 
 0DCE           ; //Specific Angles
 0DCE           ; void even_A_servo_90 (void)
 0DCE           ; { angle_2A(90); angle_4A(90); angle_6A(90); }
 0DCE                   .dbline 247
 0DCE 0AE5              ldi R16,90
 0DD0 3FDD              xcall _angle_2A
 0DD2                   .dbline 247
 0DD2 0AE5              ldi R16,90
 0DD4 A6DD              xcall _angle_4A
 0DD6                   .dbline 247
 0DD6 0AE5              ldi R16,90
 0DD8 22DE              xcall _angle_6A
 0DDA                   .dbline -2
 0DDA           L179:
 0DDA                   .dbline 0 ; func end
 0DDA 0895              ret
 0DDC                   .dbend
 0DDC                   .dbfunc e even_A_servo_65 _even_A_servo_65 fV
                        .even
 0DDC           _even_A_servo_65::
 0DDC                   .dbline -1
 0DDC                   .dbline 250
 0DDC           ; 
 0DDC           ; void even_A_servo_65 (void) //clockwise
 0DDC           ; { angle_2A(65); angle_4A(65); angle_6A(65); }
 0DDC                   .dbline 250
 0DDC 01E4              ldi R16,65
 0DDE 38DD              xcall _angle_2A
 0DE0                   .dbline 250
 0DE0 01E4              ldi R16,65
 0DE2 9FDD              xcall _angle_4A
 0DE4                   .dbline 250
 0DE4 01E4              ldi R16,65
 0DE6 1BDE              xcall _angle_6A
 0DE8                   .dbline -2
 0DE8           L180:
 0DE8                   .dbline 0 ; func end
 0DE8 0895              ret
 0DEA                   .dbend
 0DEA                   .dbfunc e even_A_servo_115 _even_A_servo_115 fV
                        .even
 0DEA           _even_A_servo_115::
 0DEA                   .dbline -1
 0DEA                   .dbline 253
 0DEA           ; 
 0DEA           ; void even_A_servo_115 (void)//anticlockwise
 0DEA           ; { angle_2A(115); angle_4A(115); angle_6A(115); }
 0DEA                   .dbline 253
 0DEA 03E7              ldi R16,115
 0DEC 31DD              xcall _angle_2A
 0DEE                   .dbline 253
 0DEE 03E7              ldi R16,115
 0DF0 98DD              xcall _angle_4A
 0DF2                   .dbline 253
 0DF2 03E7              ldi R16,115
 0DF4 14DE              xcall _angle_6A
 0DF6                   .dbline -2
 0DF6           L181:
 0DF6                   .dbline 0 ; func end
 0DF6 0895              ret
 0DF8                   .dbend
 0DF8                   .dbfunc e even_BC_servo_90 _even_BC_servo_90 fV
                        .even
 0DF8           _even_BC_servo_90::
 0DF8                   .dbline -1
 0DF8                   .dbline 256
 0DF8           ; 
 0DF8           ; void even_BC_servo_90 (void)
 0DF8           ; { angle_2B(90); angle_2C(90); angle_4B(90); angle_4C(90); angle_6B(90); angle_6C(90); }
 0DF8                   .dbline 256
 0DF8 0AE5              ldi R16,90
 0DFA 3BDD              xcall _angle_2B
 0DFC                   .dbline 256
 0DFC 0AE5              ldi R16,90
 0DFE 4DDD              xcall _angle_2C
 0E00                   .dbline 256
 0E00 0AE5              ldi R16,90
 0E02 A0DD              xcall _angle_4B
 0E04                   .dbline 256
 0E04 0AE5              ldi R16,90
 0E06 B5DD              xcall _angle_4C
 0E08                   .dbline 256
 0E08 0AE5              ldi R16,90
 0E0A 1ADE              xcall _angle_6B
 0E0C                   .dbline 256
 0E0C 0AE5              ldi R16,90
 0E0E 2FDE              xcall _angle_6C
 0E10                   .dbline -2
 0E10           L182:
 0E10                   .dbline 0 ; func end
 0E10 0895              ret
 0E12                   .dbend
 0E12                   .dbfunc e even_BC_servo_up_45 _even_BC_servo_up_45 fV
                        .even
 0E12           _even_BC_servo_up_45::
 0E12                   .dbline -1
 0E12                   .dbline 259
 0E12           ; 
 0E12           ; void even_BC_servo_up_45 (void)
 0E12           ; { angle_2B(45); angle_2C(45); angle_4B(45); angle_4C(45); angle_6B(45); angle_6C(45); }
 0E12                   .dbline 259
 0E12 0DE2              ldi R16,45
 0E14 2EDD              xcall _angle_2B
 0E16                   .dbline 259
 0E16 0DE2              ldi R16,45
 0E18 40DD              xcall _angle_2C
 0E1A                   .dbline 259
 0E1A 0DE2              ldi R16,45
 0E1C 93DD              xcall _angle_4B
 0E1E                   .dbline 259
 0E1E 0DE2              ldi R16,45
 0E20 A8DD              xcall _angle_4C
 0E22                   .dbline 259
 0E22 0DE2              ldi R16,45
 0E24 0DDE              xcall _angle_6B
 0E26                   .dbline 259
 0E26 0DE2              ldi R16,45
 0E28 22DE              xcall _angle_6C
 0E2A                   .dbline -2
 0E2A           L183:
 0E2A                   .dbline 0 ; func end
 0E2A 0895              ret
 0E2C                   .dbend
 0E2C                   .dbfunc e even_BC_servo_down_45 _even_BC_servo_down_45 fV
                        .even
 0E2C           _even_BC_servo_down_45::
 0E2C                   .dbline -1
 0E2C                   .dbline 262
 0E2C           ; 
 0E2C           ; void even_BC_servo_down_45 (void)
 0E2C           ; { angle_2B(135); angle_2C(135); angle_4B(135); angle_4C(135); angle_6B(135); angle_6C(135); }
 0E2C                   .dbline 262
 0E2C 07E8              ldi R16,135
 0E2E 21DD              xcall _angle_2B
 0E30                   .dbline 262
 0E30 07E8              ldi R16,135
 0E32 33DD              xcall _angle_2C
 0E34                   .dbline 262
 0E34 07E8              ldi R16,135
 0E36 86DD              xcall _angle_4B
 0E38                   .dbline 262
 0E38 07E8              ldi R16,135
 0E3A 9BDD              xcall _angle_4C
 0E3C                   .dbline 262
 0E3C 07E8              ldi R16,135
 0E3E 00DE              xcall _angle_6B
 0E40                   .dbline 262
 0E40 07E8              ldi R16,135
 0E42 15DE              xcall _angle_6C
 0E44                   .dbline -2
 0E44           L184:
 0E44                   .dbline 0 ; func end
 0E44 0895              ret
 0E46                   .dbend
 0E46                   .dbfunc e odd_A_servo_90 _odd_A_servo_90 fV
                        .even
 0E46           _odd_A_servo_90::
 0E46                   .dbline -1
 0E46                   .dbline 265
 0E46           ; 
 0E46           ; void odd_A_servo_90 (void)
 0E46           ; { angle_1A(90); angle_3A(90); angle_5A(90); }
 0E46                   .dbline 265
 0E46 0AE5              ldi R16,90
 0E48 D0DC              xcall _angle_1A
 0E4A                   .dbline 265
 0E4A 0AE5              ldi R16,90
 0E4C 37DD              xcall _angle_3A
 0E4E                   .dbline 265
 0E4E 0AE5              ldi R16,90
 0E50 A7DD              xcall _angle_5A
 0E52                   .dbline -2
 0E52           L185:
 0E52                   .dbline 0 ; func end
 0E52 0895              ret
 0E54                   .dbend
 0E54                   .dbfunc e odd_A_servo_65 _odd_A_servo_65 fV
                        .even
 0E54           _odd_A_servo_65::
 0E54                   .dbline -1
 0E54                   .dbline 268
 0E54           ; 
 0E54           ; void odd_A_servo_65 (void)//clockwise
 0E54           ; { angle_1A(65); angle_3A(65); angle_5A(65); }
 0E54                   .dbline 268
 0E54 01E4              ldi R16,65
 0E56 C9DC              xcall _angle_1A
 0E58                   .dbline 268
 0E58 01E4              ldi R16,65
 0E5A 30DD              xcall _angle_3A
 0E5C                   .dbline 268
 0E5C 01E4              ldi R16,65
 0E5E A0DD              xcall _angle_5A
 0E60                   .dbline -2
 0E60           L186:
 0E60                   .dbline 0 ; func end
 0E60 0895              ret
 0E62                   .dbend
 0E62                   .dbfunc e odd_A_servo_115 _odd_A_servo_115 fV
                        .even
 0E62           _odd_A_servo_115::
 0E62                   .dbline -1
 0E62                   .dbline 271
 0E62           ; 
 0E62           ; void odd_A_servo_115 (void) //anticlockwise
 0E62           ; { angle_1A(115); angle_3A(115); angle_5A(115); }
 0E62                   .dbline 271
 0E62 03E7              ldi R16,115
 0E64 C2DC              xcall _angle_1A
 0E66                   .dbline 271
 0E66 03E7              ldi R16,115
 0E68 29DD              xcall _angle_3A
 0E6A                   .dbline 271
 0E6A 03E7              ldi R16,115
 0E6C 99DD              xcall _angle_5A
 0E6E                   .dbline -2
 0E6E           L187:
 0E6E                   .dbline 0 ; func end
 0E6E 0895              ret
 0E70                   .dbend
 0E70                   .dbfunc e odd_BC_servo_90 _odd_BC_servo_90 fV
                        .even
 0E70           _odd_BC_servo_90::
 0E70                   .dbline -1
 0E70                   .dbline 274
 0E70           ; 
 0E70           ; void odd_BC_servo_90 (void)
 0E70           ; { angle_1B(90); angle_1C(90); angle_3B(90); angle_3C(90); angle_5B(90); angle_5C(90); }
 0E70                   .dbline 274
 0E70 0AE5              ldi R16,90
 0E72 CCDC              xcall _angle_1B
 0E74                   .dbline 274
 0E74 0AE5              ldi R16,90
 0E76 DBDC              xcall _angle_1C
 0E78                   .dbline 274
 0E78 0AE5              ldi R16,90
 0E7A 31DD              xcall _angle_3B
 0E7C                   .dbline 274
 0E7C 0AE5              ldi R16,90
 0E7E 40DD              xcall _angle_3C
 0E80                   .dbline 274
 0E80 0AE5              ldi R16,90
 0E82 9FDD              xcall _angle_5B
 0E84                   .dbline 274
 0E84 0AE5              ldi R16,90
 0E86 B4DD              xcall _angle_5C
 0E88                   .dbline -2
 0E88           L188:
 0E88                   .dbline 0 ; func end
 0E88 0895              ret
 0E8A                   .dbend
 0E8A                   .dbfunc e odd_BC_servo_up_45 _odd_BC_servo_up_45 fV
                        .even
 0E8A           _odd_BC_servo_up_45::
 0E8A                   .dbline -1
 0E8A                   .dbline 277
 0E8A           ; 
 0E8A           ; void odd_BC_servo_up_45 (void)
 0E8A           ; { angle_1B(45); angle_1C(45); angle_3B(45); angle_3C(45); angle_5B(45); angle_5C(45); }
 0E8A                   .dbline 277
 0E8A 0DE2              ldi R16,45
 0E8C BFDC              xcall _angle_1B
 0E8E                   .dbline 277
 0E8E 0DE2              ldi R16,45
 0E90 CEDC              xcall _angle_1C
 0E92                   .dbline 277
 0E92 0DE2              ldi R16,45
 0E94 24DD              xcall _angle_3B
 0E96                   .dbline 277
 0E96 0DE2              ldi R16,45
 0E98 33DD              xcall _angle_3C
 0E9A                   .dbline 277
 0E9A 0DE2              ldi R16,45
 0E9C 92DD              xcall _angle_5B
 0E9E                   .dbline 277
 0E9E 0DE2              ldi R16,45
 0EA0 A7DD              xcall _angle_5C
 0EA2                   .dbline -2
 0EA2           L189:
 0EA2                   .dbline 0 ; func end
 0EA2 0895              ret
 0EA4                   .dbend
 0EA4                   .dbfunc e odd_BC_servo_down_45 _odd_BC_servo_down_45 fV
                        .even
 0EA4           _odd_BC_servo_down_45::
 0EA4                   .dbline -1
 0EA4                   .dbline 280
 0EA4           ; 
 0EA4           ; void odd_BC_servo_down_45 (void)
 0EA4           ; { angle_1B(135); angle_1C(135); angle_3B(135); angle_3C(135); angle_5B(135); angle_5C(135); }
 0EA4                   .dbline 280
 0EA4 07E8              ldi R16,135
 0EA6 B2DC              xcall _angle_1B
 0EA8                   .dbline 280
 0EA8 07E8              ldi R16,135
 0EAA C1DC              xcall _angle_1C
 0EAC                   .dbline 280
 0EAC 07E8              ldi R16,135
 0EAE 17DD              xcall _angle_3B
 0EB0                   .dbline 280
 0EB0 07E8              ldi R16,135
 0EB2 26DD              xcall _angle_3C
 0EB4                   .dbline 280
 0EB4 07E8              ldi R16,135
 0EB6 85DD              xcall _angle_5B
 0EB8                   .dbline 280
 0EB8 07E8              ldi R16,135
 0EBA 9ADD              xcall _angle_5C
 0EBC                   .dbline -2
 0EBC           L190:
 0EBC                   .dbline 0 ; func end
 0EBC 0895              ret
 0EBE                   .dbend
 0EBE                   .dbfunc e rotate_clockwise_3 _rotate_clockwise_3 fV
                        .even
 0EBE           _rotate_clockwise_3::
 0EBE                   .dbline -1
 0EBE                   .dbline 300
 0EBE           ; 
 0EBE           ; /*********************void rotate_clockwise_3v2 (void)
 0EBE           ; {
 0EBE           ;  motion_busy = 1; 
 0EBE           ;  servo_calibration(); delay_250ms(); 
 0EBE           ;  even_A_servo(77); even_BC_servo(45,45); delay_250ms(); 
 0EBE           ;  even_BC_servo(90,90); delay_250ms(); 
 0EBE           ;  odd_A_servo(77); odd_BC_servo(45,45); delay_250ms(); 
 0EBE           ;  odd_BC_servo(90,90); delay_250ms(); 
 0EBE           ;  even_A_servo(90); odd_A_servo(90);
 0EBE           ;  motion_busy = 0; 
 0EBE           ; }*///////////////////***////*/
 0EBE           ; 
 0EBE           ; 
 0EBE           ; /*********************************************************************/
 0EBE           ; /***************Code for CLOCKWISE ROTATATION*************************/
 0EBE           ; 
 0EBE           ;   //  A single rotation move using three legs at a time.
 0EBE           ; void rotate_clockwise_3 (void)
 0EBE           ; {
 0EBE                   .dbline 301
 0EBE           ;  motion_busy = 1; 
 0EBE 81E0              ldi R24,1
 0EC0 80930900          sts _motion_busy,R24
 0EC4                   .dbline 302
 0EC4           ;  servo_calibration(); delay_250ms(); 
 0EC4 F1DD              xcall _servo_calibration
 0EC6                   .dbline 302
 0EC6 9DD9              xcall _delay_250ms
 0EC8                   .dbline 303
 0EC8           ;  even_A_servo(62); even_BC_servo(45,45); angle_2B(_2B-9); delay_250ms(); 
 0EC8 0EE3              ldi R16,62
 0ECA 1DDE              xcall _even_A_servo
 0ECC                   .dbline 303
 0ECC 2DE2              ldi R18,45
 0ECE 0DE2              ldi R16,45
 0ED0 87DE              xcall _even_BC_servo
 0ED2                   .dbline 303
 0ED2 00913900          lds R16,__2B
 0ED6 0950              subi R16,9
 0ED8 CCDC              xcall _angle_2B
 0EDA                   .dbline 303
 0EDA 93D9              xcall _delay_250ms
 0EDC                   .dbline 304
 0EDC           ;  even_BC_servo(90,90); angle_2B(_2B-9); delay_250ms(); 
 0EDC 2AE5              ldi R18,90
 0EDE 0AE5              ldi R16,90
 0EE0 7FDE              xcall _even_BC_servo
 0EE2                   .dbline 304
 0EE2 00913900          lds R16,__2B
 0EE6 0950              subi R16,9
 0EE8 C4DC              xcall _angle_2B
 0EEA                   .dbline 304
 0EEA 8BD9              xcall _delay_250ms
 0EEC                   .dbline 305
 0EEC           ;  odd_A_servo(62); odd_BC_servo(45,45); delay_250ms(); 
 0EEC 0EE3              ldi R16,62
 0EEE 01DE              xcall _odd_A_servo
 0EF0                   .dbline 305
 0EF0 2DE2              ldi R18,45
 0EF2 0DE2              ldi R16,45
 0EF4 6ADE              xcall _odd_BC_servo
 0EF6                   .dbline 305
 0EF6 85D9              xcall _delay_250ms
 0EF8                   .dbline 306
 0EF8           ;  odd_BC_servo(90,90); delay_250ms(); 
 0EF8 2AE5              ldi R18,90
 0EFA 0AE5              ldi R16,90
 0EFC 66DE              xcall _odd_BC_servo
 0EFE                   .dbline 306
 0EFE 81D9              xcall _delay_250ms
 0F00                   .dbline 307
 0F00           ;  servo_calibration(); angle_2B(_2B-9); delay_250ms();
 0F00 D3DD              xcall _servo_calibration
 0F02                   .dbline 307
 0F02 00913900          lds R16,__2B
 0F06 0950              subi R16,9
 0F08 B4DC              xcall _angle_2B
 0F0A                   .dbline 307
 0F0A 7BD9              xcall _delay_250ms
 0F0C                   .dbline 308
 0F0C           ;  motion_busy = 0;
 0F0C 2224              clr R2
 0F0E 20920900          sts _motion_busy,R2
 0F12                   .dbline -2
 0F12           L191:
 0F12                   .dbline 0 ; func end
 0F12 0895              ret
 0F14                   .dbend
 0F14                   .dbfunc e rotate_clockwise _rotate_clockwise fV
 0F14           ;          count -> R10,R11
 0F14           ;              i -> R20,R21
 0F14           ;    clock_angle -> R10,R11
                        .even
 0F14           _rotate_clockwise::
 0F14 0E940000          xcall push_xgset300C
 0F18 5801              movw R10,R16
 0F1A                   .dbline -1
 0F1A                   .dbline 317
 0F1A           ;  
 0F1A           ;  /*Pls note that, the calibration offset of 2B servo, in case of rotation wasn't required,
 0F1A           ;  Hence to overcome that, we had used angle_2B(_2B-9); to nullify the effect of offset defined in angle_2B function  */ 
 0F1A           ; }
 0F1A           ; 
 0F1A           ; 
 0F1A           ;  // Main rotate function to be used specifying the degrees to be rotated
 0F1A           ; void rotate_clockwise (unsigned int clock_angle)
 0F1A           ; {
 0F1A                   .dbline 318
 0F1A           ;  int count = (clock_angle%180)/(90.0/12);
 0F1A 24EB              ldi R18,180
 0F1C 30E0              ldi R19,0
 0F1E 8501              movw R16,R10
 0F20 0E940000          xcall mod16u
 0F24 0E940000          xcall uint2fp
 0F28 1801              movw R2,R16
 0F2A 2901              movw R4,R18
 0F2C 00E0              ldi R16,<L193
 0F2E 10E0              ldi R17,>L193
 0F30 0E940000          xcall elpm32
 0F34 3A93              st -y,R19
 0F36 2A93              st -y,R18
 0F38 1A93              st -y,R17
 0F3A 0A93              st -y,R16
 0F3C 8101              movw R16,R2
 0F3E 9201              movw R18,R4
 0F40 0E940000          xcall fpdiv2
 0F44 0E940000          xcall fpint
 0F48 5801              movw R10,R16
 0F4A                   .dbline 321
 0F4A           ;                                                                       //Thereby getting a precision of 90/12 degrees in one rotation.
 0F4A           ;  int i;
 0F4A           ;  for (i=0; i < count; i++)
 0F4A 4427              clr R20
 0F4C 5527              clr R21
 0F4E 03C0              xjmp L197
 0F50           L194:
 0F50                   .dbline 322
 0F50           ;         rotate_clockwise_3();
 0F50 B6DF              xcall _rotate_clockwise_3
 0F52           L195:
 0F52                   .dbline 321
 0F52 4F5F              subi R20,255  ; offset = 1
 0F54 5F4F              sbci R21,255
 0F56           L197:
 0F56                   .dbline 321
 0F56 4A15              cp R20,R10
 0F58 5B05              cpc R21,R11
 0F5A D4F3              brlt L194
 0F5C           X34:
 0F5C                   .dbline -2
 0F5C           L192:
 0F5C                   .dbline 0 ; func end
 0F5C 0C940000          xjmp pop_xgset300C
 0F60                   .dbsym r count 10 I
 0F60                   .dbsym r i 20 I
 0F60                   .dbsym r clock_angle 10 i
 0F60                   .dbend
 0F60                   .dbfunc e rotate_anticlockwise_3 _rotate_anticlockwise_3 fV
                        .even
 0F60           _rotate_anticlockwise_3::
 0F60                   .dbline -1
 0F60                   .dbline 333
 0F60           ; }
 0F60           ; 
 0F60           ; /*********************************************************************/
 0F60           ; 
 0F60           ; 
 0F60           ; /*********************************************************************/
 0F60           ; /*************Code for ANTI-CLOCKWISE ROTATATION**********************/
 0F60           ; 
 0F60           ;   //  A single rotation move using three legs at a time.
 0F60           ; void rotate_anticlockwise_3 (void)
 0F60           ; {
 0F60                   .dbline 334
 0F60           ;  motion_busy = 1; 
 0F60 81E0              ldi R24,1
 0F62 80930900          sts _motion_busy,R24
 0F66                   .dbline 335
 0F66           ;  servo_calibration(); delay_250ms(); 
 0F66 A0DD              xcall _servo_calibration
 0F68                   .dbline 335
 0F68 4CD9              xcall _delay_250ms
 0F6A                   .dbline 336
 0F6A           ;  even_A_servo(118); even_BC_servo(45,45); angle_2B(_2B-9); delay_250ms(); 
 0F6A 06E7              ldi R16,118
 0F6C CCDD              xcall _even_A_servo
 0F6E                   .dbline 336
 0F6E 2DE2              ldi R18,45
 0F70 0DE2              ldi R16,45
 0F72 36DE              xcall _even_BC_servo
 0F74                   .dbline 336
 0F74 00913900          lds R16,__2B
 0F78 0950              subi R16,9
 0F7A 7BDC              xcall _angle_2B
 0F7C                   .dbline 336
 0F7C 42D9              xcall _delay_250ms
 0F7E                   .dbline 337
 0F7E           ;  even_BC_servo(90,90); angle_2B(_2B-9); delay_250ms(); 
 0F7E 2AE5              ldi R18,90
 0F80 0AE5              ldi R16,90
 0F82 2EDE              xcall _even_BC_servo
 0F84                   .dbline 337
 0F84 00913900          lds R16,__2B
 0F88 0950              subi R16,9
 0F8A 73DC              xcall _angle_2B
 0F8C                   .dbline 337
 0F8C 3AD9              xcall _delay_250ms
 0F8E                   .dbline 338
 0F8E           ;  odd_A_servo(118); odd_BC_servo(45,45); delay_250ms(); 
 0F8E 06E7              ldi R16,118
 0F90 B0DD              xcall _odd_A_servo
 0F92                   .dbline 338
 0F92 2DE2              ldi R18,45
 0F94 0DE2              ldi R16,45
 0F96 19DE              xcall _odd_BC_servo
 0F98                   .dbline 338
 0F98 34D9              xcall _delay_250ms
 0F9A                   .dbline 339
 0F9A           ;  odd_BC_servo(90,90); delay_250ms(); 
 0F9A 2AE5              ldi R18,90
 0F9C 0AE5              ldi R16,90
 0F9E 15DE              xcall _odd_BC_servo
 0FA0                   .dbline 339
 0FA0 30D9              xcall _delay_250ms
 0FA2                   .dbline 340
 0FA2           ;  servo_calibration(); angle_2B(_2B-9); delay_250ms();
 0FA2 82DD              xcall _servo_calibration
 0FA4                   .dbline 340
 0FA4 00913900          lds R16,__2B
 0FA8 0950              subi R16,9
 0FAA 63DC              xcall _angle_2B
 0FAC                   .dbline 340
 0FAC 2AD9              xcall _delay_250ms
 0FAE                   .dbline 341
 0FAE           ;  motion_busy = 0;
 0FAE 2224              clr R2
 0FB0 20920900          sts _motion_busy,R2
 0FB4                   .dbline -2
 0FB4           L198:
 0FB4                   .dbline 0 ; func end
 0FB4 0895              ret
 0FB6                   .dbend
 0FB6                   .dbfunc e rotate_anticlockwise _rotate_anticlockwise fV
 0FB6           ;          count -> R10,R11
 0FB6           ;              i -> R20,R21
 0FB6           ; anticlock_angle -> R10,R11
                        .even
 0FB6           _rotate_anticlockwise::
 0FB6 0E940000          xcall push_xgset300C
 0FBA 5801              movw R10,R16
 0FBC                   .dbline -1
 0FBC                   .dbline 349
 0FBC           ;  
 0FBC           ;  /*Pls note that, the calibration offset of 2B servo, in case of rotation wasn't required,
 0FBC           ;   Hence to overcome that, we had used angle_2B(_2B-9); to nullify the effect of offset defined in angle_2B function  */
 0FBC           ; }
 0FBC           ; 
 0FBC           ;  // Main rotate function to be used specifying the degrees to be rotated
 0FBC           ; void rotate_anticlockwise (unsigned int anticlock_angle)
 0FBC           ; {
 0FBC                   .dbline 350
 0FBC           ;  int count = (anticlock_angle%180)/(90.0/12);
 0FBC 24EB              ldi R18,180
 0FBE 30E0              ldi R19,0
 0FC0 8501              movw R16,R10
 0FC2 0E940000          xcall mod16u
 0FC6 0E940000          xcall uint2fp
 0FCA 1801              movw R2,R16
 0FCC 2901              movw R4,R18
 0FCE 00E0              ldi R16,<L193
 0FD0 10E0              ldi R17,>L193
 0FD2 0E940000          xcall elpm32
 0FD6 3A93              st -y,R19
 0FD8 2A93              st -y,R18
 0FDA 1A93              st -y,R17
 0FDC 0A93              st -y,R16
 0FDE 8101              movw R16,R2
 0FE0 9201              movw R18,R4
 0FE2 0E940000          xcall fpdiv2
 0FE6 0E940000          xcall fpint
 0FEA 5801              movw R10,R16
 0FEC                   .dbline 353
 0FEC           ;                                                                       //Thereby getting a precision of 90/12 degrees in one rotation.
 0FEC           ;  int i;
 0FEC           ;  for (i=0; i < count; i++)
 0FEC 4427              clr R20
 0FEE 5527              clr R21
 0FF0 03C0              xjmp L203
 0FF2           L200:
 0FF2                   .dbline 354
 0FF2           ;         rotate_anticlockwise_3(); 
 0FF2 B6DF              xcall _rotate_anticlockwise_3
 0FF4           L201:
 0FF4                   .dbline 353
 0FF4 4F5F              subi R20,255  ; offset = 1
 0FF6 5F4F              sbci R21,255
 0FF8           L203:
 0FF8                   .dbline 353
 0FF8 4A15              cp R20,R10
 0FFA 5B05              cpc R21,R11
 0FFC D4F3              brlt L200
 0FFE           X35:
 0FFE                   .dbline -2
 0FFE           L199:
 0FFE                   .dbline 0 ; func end
 0FFE 0C940000          xjmp pop_xgset300C
 1002                   .dbsym r count 10 I
 1002                   .dbsym r i 20 I
 1002                   .dbsym r anticlock_angle 10 i
 1002                   .dbend
 1002                   .dbfunc e forward _forward fV
                        .even
 1002           _forward::
 1002                   .dbline -1
 1002                   .dbline 383
 1002           ; }
 1002           ; /*********************************************************************/
 1002           ; 
 1002           ; 
 1002           ; /*********************************************************************/
 1002           ; /*******************A general rotate function*************************/
 1002           ; /*******************Rotation values valid from -180 degree to +180 degree***********/
 1002           ; /*******
 1002           ; void rotate (signed int angle)
 1002           ; {
 1002           ;  angle = angle % 180;
 1002           ;  while(angle>=180)
 1002           ;               angle -= angle%180;
 1002           ;  
 1002           ;  if (angle == 0)
 1002           ;       return;
 1002           ;  else if(angle > 0)
 1002           ;                 rotate_clockwise(angle);
 1002           ;  else
 1002           ;                 rotate_anticlockwise(-angle);
 1002           ; }**********/
 1002           ; 
 1002           ; 
 1002           ; 
 1002           ; 
 1002           ; /****FORWARD USING 2 LEGS AT A TIME****************/
 1002           ; 
 1002           ; void forward (void)
 1002           ; {
 1002                   .dbline 384
 1002           ;  motion_busy = 1; 
 1002 81E0              ldi R24,1
 1004 80930900          sts _motion_busy,R24
 1008                   .dbline 385
 1008           ;  servo_calibration();
 1008 4FDD              xcall _servo_calibration
 100A                   .dbline 386
 100A           ;  delay_250ms();
 100A FBD8              xcall _delay_250ms
 100C                   .dbline 389
 100C           ;  
 100C           ;  //legs 2 and 4 move forward
 100C           ;  angle_2B(45); angle_2C(45); angle_4B(45); angle_4C(45); //front pair BC servo up 45
 100C 0DE2              ldi R16,45
 100E 31DC              xcall _angle_2B
 1010                   .dbline 389
 1010 0DE2              ldi R16,45
 1012 43DC              xcall _angle_2C
 1014                   .dbline 389
 1014 0DE2              ldi R16,45
 1016 96DC              xcall _angle_4B
 1018                   .dbline 389
 1018 0DE2              ldi R16,45
 101A ABDC              xcall _angle_4C
 101C                   .dbline 390
 101C           ;  delay_250ms();
 101C F2D8              xcall _delay_250ms
 101E                   .dbline 391
 101E           ;  angle_2A(60); angle_4A(120); //front pair move forward while legs are up
 101E 0CE3              ldi R16,60
 1020 17DC              xcall _angle_2A
 1022                   .dbline 391
 1022 08E7              ldi R16,120
 1024 7EDC              xcall _angle_4A
 1026                   .dbline 392
 1026           ;  delay_250ms();
 1026 EDD8              xcall _delay_250ms
 1028                   .dbline 393
 1028           ;  angle_2B(90); angle_2C(90); angle_4B(90); angle_4C(90); // put down legs
 1028 0AE5              ldi R16,90
 102A 23DC              xcall _angle_2B
 102C                   .dbline 393
 102C 0AE5              ldi R16,90
 102E 35DC              xcall _angle_2C
 1030                   .dbline 393
 1030 0AE5              ldi R16,90
 1032 88DC              xcall _angle_4B
 1034                   .dbline 393
 1034 0AE5              ldi R16,90
 1036 9DDC              xcall _angle_4C
 1038                   .dbline 394
 1038           ;  delay_250ms();
 1038 E4D8              xcall _delay_250ms
 103A                   .dbline 397
 103A           ;  
 103A           ;  //legs 1 and 6 move forward
 103A           ;  angle_1B(45); angle_1C(45); angle_6B(45); angle_6C(45); //middel pair BC servo up 45
 103A 0DE2              ldi R16,45
 103C E7DB              xcall _angle_1B
 103E                   .dbline 397
 103E 0DE2              ldi R16,45
 1040 F6DB              xcall _angle_1C
 1042                   .dbline 397
 1042 0DE2              ldi R16,45
 1044 FDDC              xcall _angle_6B
 1046                   .dbline 397
 1046 0DE2              ldi R16,45
 1048 12DD              xcall _angle_6C
 104A                   .dbline 398
 104A           ;  delay_250ms();
 104A DBD8              xcall _delay_250ms
 104C                   .dbline 399
 104C           ;  angle_1A(60); angle_6A(120); //middel pair move back while legs are up
 104C 0CE3              ldi R16,60
 104E CDDB              xcall _angle_1A
 1050                   .dbline 399
 1050 08E7              ldi R16,120
 1052 E5DC              xcall _angle_6A
 1054                   .dbline 400
 1054           ;  delay_250ms();
 1054 D6D8              xcall _delay_250ms
 1056                   .dbline 401
 1056           ;  angle_1B(90); angle_1C(90); angle_6B(90); angle_6C(90); // put down legs
 1056 0AE5              ldi R16,90
 1058 D9DB              xcall _angle_1B
 105A                   .dbline 401
 105A 0AE5              ldi R16,90
 105C E8DB              xcall _angle_1C
 105E                   .dbline 401
 105E 0AE5              ldi R16,90
 1060 EFDC              xcall _angle_6B
 1062                   .dbline 401
 1062 0AE5              ldi R16,90
 1064 04DD              xcall _angle_6C
 1066                   .dbline 402
 1066           ;  delay_250ms();
 1066 CDD8              xcall _delay_250ms
 1068                   .dbline 405
 1068           ;  
 1068           ;  //legs 3 and 5 move forward
 1068           ;  angle_3B(45); angle_3C(45); angle_5B(45); angle_5C(45); //middel pair BC servo up 45
 1068 0DE2              ldi R16,45
 106A 39DC              xcall _angle_3B
 106C                   .dbline 405
 106C 0DE2              ldi R16,45
 106E 48DC              xcall _angle_3C
 1070                   .dbline 405
 1070 0DE2              ldi R16,45
 1072 A7DC              xcall _angle_5B
 1074                   .dbline 405
 1074 0DE2              ldi R16,45
 1076 BCDC              xcall _angle_5C
 1078                   .dbline 406
 1078           ;  delay_250ms();
 1078 C4D8              xcall _delay_250ms
 107A                   .dbline 407
 107A           ;  angle_3A(60); angle_5A(120); //middel pair move forward while legs are up
 107A 0CE3              ldi R16,60
 107C 1FDC              xcall _angle_3A
 107E                   .dbline 407
 107E 08E7              ldi R16,120
 1080 8FDC              xcall _angle_5A
 1082                   .dbline 408
 1082           ;  delay_250ms();
 1082 BFD8              xcall _delay_250ms
 1084                   .dbline 409
 1084           ;  angle_3B(90); angle_3C(90); angle_5B(90); angle_5C(90); // put down legs
 1084 0AE5              ldi R16,90
 1086 2BDC              xcall _angle_3B
 1088                   .dbline 409
 1088 0AE5              ldi R16,90
 108A 3ADC              xcall _angle_3C
 108C                   .dbline 409
 108C 0AE5              ldi R16,90
 108E 99DC              xcall _angle_5B
 1090                   .dbline 409
 1090 0AE5              ldi R16,90
 1092 AEDC              xcall _angle_5C
 1094                   .dbline 410
 1094           ;  delay_250ms(); 
 1094 B6D8              xcall _delay_250ms
 1096                   .dbline 412
 1096           ;  
 1096           ;  servo_calibration(); //push towards forward
 1096 08DD              xcall _servo_calibration
 1098                   .dbline 413
 1098           ;  motion_busy = 0; 
 1098 2224              clr R2
 109A 20920900          sts _motion_busy,R2
 109E                   .dbline -2
 109E           L204:
 109E                   .dbline 0 ; func end
 109E 0895              ret
 10A0                   .dbend
 10A0                   .dbfunc e forward_3_legs _forward_3_legs fV
                        .even
 10A0           _forward_3_legs::
 10A0                   .dbline -1
 10A0                   .dbline 420
 10A0           ; }
 10A0           ; 
 10A0           ; 
 10A0           ; /****FORWARD USING 3 LEGS AT A TIME****************/
 10A0           ; 
 10A0           ; void forward_3_legs (void)
 10A0           ; {
 10A0                   .dbline 421
 10A0           ;  motion_busy = 1; 
 10A0 81E0              ldi R24,1
 10A2 80930900          sts _motion_busy,R24
 10A6                   .dbline 423
 10A6           ;  
 10A6           ;  servo_calibration();
 10A6 00DD              xcall _servo_calibration
 10A8                   .dbline 424
 10A8           ;  delay_250ms();
 10A8 ACD8              xcall _delay_250ms
 10AA                   .dbline 427
 10AA           ;  
 10AA           ;  //even legs move forward
 10AA           ;  even_BC_servo(45,45); //even BC servos raise limbs
 10AA 2DE2              ldi R18,45
 10AC 0DE2              ldi R16,45
 10AE 98DD              xcall _even_BC_servo
 10B0                   .dbline 428
 10B0           ;  delay_250ms();
 10B0 A8D8              xcall _delay_250ms
 10B2                   .dbline 429
 10B2           ;  even_A_servo_forward(20); //even A servos move raised limbs in forward direction
 10B2 04E1              ldi R16,20
 10B4 BBDD              xcall _even_A_servo_forward
 10B6                   .dbline 430
 10B6           ;  delay_250ms();
 10B6 A5D8              xcall _delay_250ms
 10B8                   .dbline 431
 10B8           ;  even_BC_servo(90,90); // put down raised limbs
 10B8 2AE5              ldi R18,90
 10BA 0AE5              ldi R16,90
 10BC 91DD              xcall _even_BC_servo
 10BE                   .dbline 432
 10BE           ;  delay_250ms();
 10BE A1D8              xcall _delay_250ms
 10C0                   .dbline 435
 10C0           ;  
 10C0           ;  //odd legs move forward
 10C0           ;  odd_BC_servo(45,45); //odd BC servos raise limbs
 10C0 2DE2              ldi R18,45
 10C2 0DE2              ldi R16,45
 10C4 82DD              xcall _odd_BC_servo
 10C6                   .dbline 436
 10C6           ;  delay_250ms();
 10C6 9DD8              xcall _delay_250ms
 10C8                   .dbline 437
 10C8           ;  even_A_servo(90); //even A servos move chassis in forward direction
 10C8 0AE5              ldi R16,90
 10CA 1DDD              xcall _even_A_servo
 10CC                   .dbline 438
 10CC           ;  delay_250ms();
 10CC 9AD8              xcall _delay_250ms
 10CE                   .dbline 445
 10CE           ;  //odd_BC_servo(90,90); // put down raised limbs
 10CE           ;  //delay_250ms();
 10CE           ;  
 10CE           ;  //odd legs move forward
 10CE           ;  //odd_BC_servo(45,45); //odd BC servos raise limbs
 10CE           ;  //delay_250ms();
 10CE           ;  odd_A_servo_forward(20); //odd A servos move raised limbs in forward direction
 10CE 04E1              ldi R16,20
 10D0 9DDD              xcall _odd_A_servo_forward
 10D2                   .dbline 446
 10D2           ;  delay_250ms();
 10D2 97D8              xcall _delay_250ms
 10D4                   .dbline 447
 10D4           ;  odd_BC_servo(90,90); // put down raised limbs
 10D4 2AE5              ldi R18,90
 10D6 0AE5              ldi R16,90
 10D8 78DD              xcall _odd_BC_servo
 10DA                   .dbline 448
 10DA           ;  delay_250ms();
 10DA 93D8              xcall _delay_250ms
 10DC                   .dbline 451
 10DC           ;  
 10DC           ;  //even legs move forward
 10DC           ;  even_BC_servo(45,45); //even BC servos raise limbs
 10DC 2DE2              ldi R18,45
 10DE 0DE2              ldi R16,45
 10E0 7FDD              xcall _even_BC_servo
 10E2                   .dbline 452
 10E2           ;  delay_250ms();
 10E2 8FD8              xcall _delay_250ms
 10E4                   .dbline 453
 10E4           ;  odd_A_servo(90); //odd A servos move chassis in forward direction
 10E4 0AE5              ldi R16,90
 10E6 05DD              xcall _odd_A_servo
 10E8                   .dbline 454
 10E8           ;  delay_250ms();
 10E8 8CD8              xcall _delay_250ms
 10EA                   .dbline 455
 10EA           ;  even_BC_servo(90,90); // put down raised limbs
 10EA 2AE5              ldi R18,90
 10EC 0AE5              ldi R16,90
 10EE 78DD              xcall _even_BC_servo
 10F0                   .dbline 456
 10F0           ;  delay_250ms();
 10F0 88D8              xcall _delay_250ms
 10F2                   .dbline 458
 10F2           ;  
 10F2           ;  servo_calibration(); //push towards forward
 10F2 DADC              xcall _servo_calibration
 10F4                   .dbline 459
 10F4           ;  delay_250ms();
 10F4 86D8              xcall _delay_250ms
 10F6                   .dbline 461
 10F6           ;  
 10F6           ;  motion_busy = 0; 
 10F6 2224              clr R2
 10F8 20920900          sts _motion_busy,R2
 10FC                   .dbline -2
 10FC           L205:
 10FC                   .dbline 0 ; func end
 10FC 0895              ret
 10FE                   .dbend
 10FE                   .dbfunc e backward _backward fV
                        .even
 10FE           _backward::
 10FE                   .dbline -1
 10FE                   .dbline 469
 10FE           ; }
 10FE           ; 
 10FE           ; 
 10FE           ; 
 10FE           ; /****BACKWARD USING 2 LEGS AT A TIME****************/
 10FE           ; 
 10FE           ;  void backward (void)
 10FE           ;  {
 10FE                   .dbline 470
 10FE           ;  motion_busy = 1; 
 10FE 81E0              ldi R24,1
 1100 80930900          sts _motion_busy,R24
 1104                   .dbline 471
 1104           ;  servo_calibration();
 1104 D1DC              xcall _servo_calibration
 1106                   .dbline 472
 1106           ;  delay_250ms(); 
 1106 7DD8              xcall _delay_250ms
 1108                   .dbline 475
 1108           ;  
 1108           ;  //legs 2 and 4 move back
 1108           ;  angle_2B(45); angle_2C(45); angle_4B(45); angle_4C(45); //front pair BC servo up 45
 1108 0DE2              ldi R16,45
 110A B3DB              xcall _angle_2B
 110C                   .dbline 475
 110C 0DE2              ldi R16,45
 110E C5DB              xcall _angle_2C
 1110                   .dbline 475
 1110 0DE2              ldi R16,45
 1112 18DC              xcall _angle_4B
 1114                   .dbline 475
 1114 0DE2              ldi R16,45
 1116 2DDC              xcall _angle_4C
 1118                   .dbline 476
 1118           ;  delay_250ms(); 
 1118 74D8              xcall _delay_250ms
 111A                   .dbline 477
 111A           ;  angle_2A(120); angle_4A(60); //front pair move forward while legs are up
 111A 08E7              ldi R16,120
 111C 99DB              xcall _angle_2A
 111E                   .dbline 477
 111E 0CE3              ldi R16,60
 1120 00DC              xcall _angle_4A
 1122                   .dbline 478
 1122           ;  delay_250ms(); 
 1122 6FD8              xcall _delay_250ms
 1124                   .dbline 479
 1124           ;  angle_2B(90); angle_2C(90); angle_4B(90); angle_4C(90); // put down legs
 1124 0AE5              ldi R16,90
 1126 A5DB              xcall _angle_2B
 1128                   .dbline 479
 1128 0AE5              ldi R16,90
 112A B7DB              xcall _angle_2C
 112C                   .dbline 479
 112C 0AE5              ldi R16,90
 112E 0ADC              xcall _angle_4B
 1130                   .dbline 479
 1130 0AE5              ldi R16,90
 1132 1FDC              xcall _angle_4C
 1134                   .dbline 480
 1134           ;  delay_250ms(); 
 1134 66D8              xcall _delay_250ms
 1136                   .dbline 483
 1136           ;  
 1136           ;  //legs 1 and 6 move back
 1136           ;  angle_1B(45); angle_1C(45); angle_6B(45); angle_6C(45); //middel pair BC servo up 45
 1136 0DE2              ldi R16,45
 1138 69DB              xcall _angle_1B
 113A                   .dbline 483
 113A 0DE2              ldi R16,45
 113C 78DB              xcall _angle_1C
 113E                   .dbline 483
 113E 0DE2              ldi R16,45
 1140 7FDC              xcall _angle_6B
 1142                   .dbline 483
 1142 0DE2              ldi R16,45
 1144 94DC              xcall _angle_6C
 1146                   .dbline 484
 1146           ;  delay_250ms(); 
 1146 5DD8              xcall _delay_250ms
 1148                   .dbline 485
 1148           ;  angle_1A(120); angle_6A(60); //middel pair move back while legs are up
 1148 08E7              ldi R16,120
 114A 4FDB              xcall _angle_1A
 114C                   .dbline 485
 114C 0CE3              ldi R16,60
 114E 67DC              xcall _angle_6A
 1150                   .dbline 486
 1150           ;  delay_250ms(); 
 1150 58D8              xcall _delay_250ms
 1152                   .dbline 487
 1152           ;  angle_1B(90); angle_1C(90); angle_6B(90); angle_6C(90); // put down legs
 1152 0AE5              ldi R16,90
 1154 5BDB              xcall _angle_1B
 1156                   .dbline 487
 1156 0AE5              ldi R16,90
 1158 6ADB              xcall _angle_1C
 115A                   .dbline 487
 115A 0AE5              ldi R16,90
 115C 71DC              xcall _angle_6B
 115E                   .dbline 487
 115E 0AE5              ldi R16,90
 1160 86DC              xcall _angle_6C
 1162                   .dbline 488
 1162           ;  delay_250ms(); 
 1162 4FD8              xcall _delay_250ms
 1164                   .dbline 491
 1164           ;  
 1164           ;  //legs 3 and 5 move back
 1164           ;  angle_3B(45); angle_3C(45); angle_5B(45); angle_5C(45); //middel pair BC servo up 45
 1164 0DE2              ldi R16,45
 1166 BBDB              xcall _angle_3B
 1168                   .dbline 491
 1168 0DE2              ldi R16,45
 116A CADB              xcall _angle_3C
 116C                   .dbline 491
 116C 0DE2              ldi R16,45
 116E 29DC              xcall _angle_5B
 1170                   .dbline 491
 1170 0DE2              ldi R16,45
 1172 3EDC              xcall _angle_5C
 1174                   .dbline 492
 1174           ;  delay_250ms(); 
 1174 46D8              xcall _delay_250ms
 1176                   .dbline 493
 1176           ;  angle_3A(120); angle_5A(60); //middel pair move forward while legs are up
 1176 08E7              ldi R16,120
 1178 A1DB              xcall _angle_3A
 117A                   .dbline 493
 117A 0CE3              ldi R16,60
 117C 11DC              xcall _angle_5A
 117E                   .dbline 494
 117E           ;  delay_250ms(); 
 117E 41D8              xcall _delay_250ms
 1180                   .dbline 495
 1180           ;  angle_3B(90); angle_3C(90); angle_5B(90); angle_5C(90); // put down legs
 1180 0AE5              ldi R16,90
 1182 ADDB              xcall _angle_3B
 1184                   .dbline 495
 1184 0AE5              ldi R16,90
 1186 BCDB              xcall _angle_3C
 1188                   .dbline 495
 1188 0AE5              ldi R16,90
 118A 1BDC              xcall _angle_5B
 118C                   .dbline 495
 118C 0AE5              ldi R16,90
 118E 30DC              xcall _angle_5C
 1190                   .dbline 496
 1190           ;  delay_250ms();  
 1190 38D8              xcall _delay_250ms
 1192                   .dbline 498
 1192           ;  
 1192           ;  servo_calibration(); angle_3B(_3B+9); delay_250ms(); //push towards back
 1192 8ADC              xcall _servo_calibration
 1194                   .dbline 498
 1194 00913600          lds R16,__3B
 1198 075F              subi R16,247    ; addi 9
 119A A1DB              xcall _angle_3B
 119C                   .dbline 498
 119C 32D8              xcall _delay_250ms
 119E                   .dbline 499
 119E           ;  motion_busy = 0; 
 119E 2224              clr R2
 11A0 20920900          sts _motion_busy,R2
 11A4                   .dbline -2
 11A4           L206:
 11A4                   .dbline 0 ; func end
 11A4 0895              ret
 11A6                   .dbend
 11A6                   .dbfunc e backward_3_legs _backward_3_legs fV
                        .even
 11A6           _backward_3_legs::
 11A6                   .dbline -1
 11A6                   .dbline 506
 11A6           ; }
 11A6           ; 
 11A6           ; 
 11A6           ; /****BACKWARD USING 3 LEGS AT A TIME****************/
 11A6           ; 
 11A6           ; void backward_3_legs (void)
 11A6           ;  {
 11A6                   .dbline 507
 11A6           ;  motion_busy = 1; 
 11A6 81E0              ldi R24,1
 11A8 80930900          sts _motion_busy,R24
 11AC                   .dbline 509
 11AC           ;  
 11AC           ;  servo_calibration();
 11AC 7DDC              xcall _servo_calibration
 11AE                   .dbline 510
 11AE           ;  delay_250ms();
 11AE 29D8              xcall _delay_250ms
 11B0                   .dbline 513
 11B0           ;  
 11B0           ;  //even legs move forward
 11B0           ;  even_BC_servo(45,45); //even BC servos raise limbs
 11B0 2DE2              ldi R18,45
 11B2 0DE2              ldi R16,45
 11B4 15DD              xcall _even_BC_servo
 11B6                   .dbline 514
 11B6           ;  delay_250ms();
 11B6 25D8              xcall _delay_250ms
 11B8                   .dbline 515
 11B8           ;  even_A_servo_backward(20); //even A servos move raised limbs in forward direction
 11B8 04E1              ldi R16,20
 11BA 74DD              xcall _even_A_servo_backward
 11BC                   .dbline 516
 11BC           ;  delay_250ms();
 11BC 22D8              xcall _delay_250ms
 11BE                   .dbline 517
 11BE           ;  even_BC_servo(90,90); // put down raised limbs
 11BE 2AE5              ldi R18,90
 11C0 0AE5              ldi R16,90
 11C2 0EDD              xcall _even_BC_servo
 11C4                   .dbline 518
 11C4           ;  delay_250ms();
 11C4 1ED8              xcall _delay_250ms
 11C6                   .dbline 521
 11C6           ;  
 11C6           ;  //odd legs move forward
 11C6           ;  odd_BC_servo(45,45); //odd BC servos raise limbs
 11C6 2DE2              ldi R18,45
 11C8 0DE2              ldi R16,45
 11CA FFDC              xcall _odd_BC_servo
 11CC                   .dbline 522
 11CC           ;  delay_250ms();
 11CC 1AD8              xcall _delay_250ms
 11CE                   .dbline 523
 11CE           ;  even_A_servo(90); //even A servos move chassis in forward direction
 11CE 0AE5              ldi R16,90
 11D0 9ADC              xcall _even_A_servo
 11D2                   .dbline 524
 11D2           ;  delay_250ms();
 11D2 17D8              xcall _delay_250ms
 11D4                   .dbline 531
 11D4           ;  //odd_BC_servo(90,90); // put down raised limbs
 11D4           ;  //delay_250ms();
 11D4           ;  
 11D4           ;  //odd legs move forward
 11D4           ;  //odd_BC_servo(45,45); //odd BC servos raise limbs
 11D4           ;  //delay_250ms();
 11D4           ;  odd_A_servo_backward(20); //odd A servos move raised limbs in forward direction
 11D4 04E1              ldi R16,20
 11D6 56DD              xcall _odd_A_servo_backward
 11D8                   .dbline 532
 11D8           ;  delay_250ms();
 11D8 14D8              xcall _delay_250ms
 11DA                   .dbline 533
 11DA           ;  odd_BC_servo(90,90); // put down raised limbs
 11DA 2AE5              ldi R18,90
 11DC 0AE5              ldi R16,90
 11DE F5DC              xcall _odd_BC_servo
 11E0                   .dbline 534
 11E0           ;  delay_250ms();
 11E0 10D8              xcall _delay_250ms
 11E2                   .dbline 537
 11E2           ;  
 11E2           ;  //even legs move forward
 11E2           ;  even_BC_servo(45,45); //even BC servos raise limbs
 11E2 2DE2              ldi R18,45
 11E4 0DE2              ldi R16,45
 11E6 FCDC              xcall _even_BC_servo
 11E8                   .dbline 538
 11E8           ;  delay_250ms();
 11E8 0CD8              xcall _delay_250ms
 11EA                   .dbline 539
 11EA           ;  odd_A_servo(90); //odd A servos move chassis in forward direction
 11EA 0AE5              ldi R16,90
 11EC 82DC              xcall _odd_A_servo
 11EE                   .dbline 540
 11EE           ;  delay_250ms();
 11EE 09D8              xcall _delay_250ms
 11F0                   .dbline 541
 11F0           ;  even_BC_servo(90,90); // put down raised limbs
 11F0 2AE5              ldi R18,90
 11F2 0AE5              ldi R16,90
 11F4 F5DC              xcall _even_BC_servo
 11F6                   .dbline 542
 11F6           ;  delay_250ms();
 11F6 05D8              xcall _delay_250ms
 11F8                   .dbline 544
 11F8           ;  
 11F8           ;  servo_calibration(); //push towards forward
 11F8 57DC              xcall _servo_calibration
 11FA                   .dbline 545
 11FA           ;  delay_250ms();
 11FA 03D8              xcall _delay_250ms
 11FC                   .dbline 547
 11FC           ;  
 11FC           ;  motion_busy = 0; 
 11FC 2224              clr R2
 11FE 20920900          sts _motion_busy,R2
 1202                   .dbline -2
 1202           L207:
 1202                   .dbline 0 ; func end
 1202 0895              ret
 1204                   .dbend
 1204                   .dbfunc e robot_standup _robot_standup fV
                        .even
 1204           _robot_standup::
 1204                   .dbline -1
 1204                   .dbline 553
 1204           ; }
 1204           ; 
 1204           ; 
 1204           ; 
 1204           ; void robot_standup (void) //warning: do not call this function while robot is standing or servos will get damaged
 1204           ; {
 1204                   .dbline 554
 1204           ; motion_busy = 1; 
 1204 81E0              ldi R24,1
 1206 80930900          sts _motion_busy,R24
 120A                   .dbline 556
 120A           ; //servo_calibration();
 120A           ; angle_1B(1); angle_1C(110); angle_2B(1); angle_2C(110); angle_3B(1); angle_3C(110);
 120A 01E0              ldi R16,1
 120C FFDA              xcall _angle_1B
 120E                   .dbline 556
 120E 0EE6              ldi R16,110
 1210 0EDB              xcall _angle_1C
 1212                   .dbline 556
 1212 01E0              ldi R16,1
 1214 2EDB              xcall _angle_2B
 1216                   .dbline 556
 1216 0EE6              ldi R16,110
 1218 40DB              xcall _angle_2C
 121A                   .dbline 556
 121A 01E0              ldi R16,1
 121C 60DB              xcall _angle_3B
 121E                   .dbline 556
 121E 0EE6              ldi R16,110
 1220 6FDB              xcall _angle_3C
 1222                   .dbline 557
 1222           ; angle_4B(179); angle_4C(70); angle_5B(179); angle_5C(70); angle_6B(179); angle_6C(70);
 1222 03EB              ldi R16,179
 1224 8FDB              xcall _angle_4B
 1226                   .dbline 557
 1226 06E4              ldi R16,70
 1228 A4DB              xcall _angle_4C
 122A                   .dbline 557
 122A 03EB              ldi R16,179
 122C CADB              xcall _angle_5B
 122E                   .dbline 557
 122E 06E4              ldi R16,70
 1230 DFDB              xcall _angle_5C
 1232                   .dbline 557
 1232 03EB              ldi R16,179
 1234 05DC              xcall _angle_6B
 1236                   .dbline 557
 1236 06E4              ldi R16,70
 1238 1ADC              xcall _angle_6C
 123A                   .dbline 558
 123A           ; delay_1s();
 123A 01D8              xcall _delay_1s
 123C                   .dbline 559
 123C           ; delay_1s();
 123C 00D8              xcall _delay_1s
 123E                   .dbline 560
 123E           ; servo_calibration();
 123E 34DC              xcall _servo_calibration
 1240                   .dbline 561
 1240           ; motion_busy = 0; 
 1240 2224              clr R2
 1242 20920900          sts _motion_busy,R2
 1246                   .dbline -2
 1246           L208:
 1246                   .dbline 0 ; func end
 1246 0895              ret
 1248                   .dbend
 1248                   .dbfunc e remote_control _remote_control fV
 1248           ;          flag1 -> R20
                        .even
 1248           _remote_control::
 1248 0E940000          xcall push_xgsetF000
 124C                   .dbline -1
 124C                   .dbline 565
 124C           ; }
 124C           ; 
 124C           ; void remote_control(void)
 124C           ; {
 124C                   .dbline 566
 124C           ;   unsigned char flag1 = 0;
 124C 4427              clr R20
 124E                   .dbline 567
 124E           ;   PORTA = remote_data[4]; //move left joystick up and down and see if there is any change in the bargraph display.
 124E 20900400          lds R2,_remote_data+4
 1252 22B8              out 0x2,R2
 1254                   .dbline 568
 1254           ;   flag1 = 0; //resetting the flag
 1254                   .dbline 570
 1254           ;  
 1254           ;   if((flag1 == 0) && (motion_busy == 0)) //forward, 1 beep
 1254 4423              tst R20
 1256 59F4              brne L211
 1258           X36:
 1258 20900900          lds R2,_motion_busy
 125C 2220              tst R2
 125E 39F4              brne L211
 1260           X37:
 1260                   .dbline 571
 1260           ;   {
 1260                   .dbline 572
 1260           ;   if(remote_data[4] > 0x29)
 1260 89E2              ldi R24,41
 1262 20900400          lds R2,_remote_data+4
 1266 8215              cp R24,R2
 1268 10F4              brsh L213
 126A           X38:
 126A                   .dbline 573
 126A           ;    {
 126A                   .dbline 574
 126A           ;     flag1 = 1;
 126A 41E0              ldi R20,1
 126C                   .dbline 575
 126C           ;     forward();
 126C CADE              xcall _forward
 126E                   .dbline 577
 126E           ;     //buzzer_on(); delay_250ms(); buzzer_off(); //use it to debug remote onnection
 126E           ;    }   
 126E           L213:
 126E                   .dbline 578
 126E           ;   }
 126E           L211:
 126E                   .dbline 580
 126E           ;   
 126E           ;   if((flag1 == 0) && (motion_busy == 0)) //back, 2 beep
 126E 4423              tst R20
 1270 51F4              brne L216
 1272           X39:
 1272 20900900          lds R2,_motion_busy
 1276 2220              tst R2
 1278 31F4              brne L216
 127A           X40:
 127A                   .dbline 581
 127A           ;   {
 127A                   .dbline 582
 127A           ;   if(remote_data[4] < 0x15)
 127A 80910400          lds R24,_remote_data+4
 127E 8531              cpi R24,21
 1280 10F4              brsh L218
 1282           X41:
 1282                   .dbline 583
 1282           ;    {
 1282                   .dbline 584
 1282           ;     flag1 = 1;
 1282 41E0              ldi R20,1
 1284                   .dbline 585
 1284           ;       backward();
 1284 3CDF              xcall _backward
 1286                   .dbline 587
 1286           ;       //buzzer_on(); delay_250ms(); buzzer_off();delay_250ms(); buzzer_on(); delay_250ms(); buzzer_off(); //use it to debug remote onnection
 1286           ;    }
 1286           L218:
 1286                   .dbline 588
 1286           ;   }
 1286           L216:
 1286                   .dbline 590
 1286           ;   
 1286           ;   if((flag1 == 0) && (motion_busy == 0)) //anticlockwise (left), 3 beep
 1286 4423              tst R20
 1288 59F4              brne L221
 128A           X42:
 128A 20900900          lds R2,_motion_busy
 128E 2220              tst R2
 1290 39F4              brne L221
 1292           X43:
 1292                   .dbline 591
 1292           ;   {
 1292                   .dbline 592
 1292           ;   if(remote_data[3] > 0x2D)
 1292 8DE2              ldi R24,45
 1294 20900300          lds R2,_remote_data+3
 1298 8215              cp R24,R2
 129A 10F4              brsh L223
 129C           X44:
 129C                   .dbline 593
 129C           ;    {
 129C                   .dbline 594
 129C           ;     flag1 = 1;
 129C 41E0              ldi R20,1
 129E                   .dbline 595
 129E           ;       rotate_anticlockwise_3();
 129E 60DE              xcall _rotate_anticlockwise_3
 12A0                   .dbline 597
 12A0           ;       //buzzer_on(); delay_250ms(); buzzer_off();delay_250ms(); buzzer_on(); delay_250ms(); buzzer_off(); delay_250ms(); buzzer_on(); delay_250ms(); buzzer_off(); //use it to debug remote onnection
 12A0           ;    }
 12A0           L223:
 12A0                   .dbline 598
 12A0           ;  }
 12A0           L221:
 12A0                   .dbline 600
 12A0           ;   
 12A0           ;   if((flag1 == 0) && (motion_busy == 0)) //clockwise (right), 4 beep
 12A0 4423              tst R20
 12A2 51F4              brne L226
 12A4           X45:
 12A4 20900900          lds R2,_motion_busy
 12A8 2220              tst R2
 12AA 31F4              brne L226
 12AC           X46:
 12AC                   .dbline 601
 12AC           ;   {
 12AC                   .dbline 602
 12AC           ;   if(remote_data[3] < 0x19)
 12AC 80910300          lds R24,_remote_data+3
 12B0 8931              cpi R24,25
 12B2 10F4              brsh L228
 12B4           X47:
 12B4                   .dbline 603
 12B4           ;    {
 12B4                   .dbline 604
 12B4           ;     flag1 = 1;
 12B4 41E0              ldi R20,1
 12B6                   .dbline 605
 12B6           ;       rotate_clockwise_3();
 12B6 03DE              xcall _rotate_clockwise_3
 12B8                   .dbline 607
 12B8           ;       //buzzer_on(); delay_250ms(); buzzer_off();delay_250ms(); buzzer_on(); delay_250ms(); buzzer_off(); delay_250ms(); buzzer_on(); delay_250ms(); buzzer_off();delay_250ms(); buzzer_on(); delay_250ms(); buzzer_off(); //use it to debug remote onnection
 12B8           ;    }
 12B8           L228:
 12B8                   .dbline 608
 12B8           ;   }
 12B8           L226:
 12B8                   .dbline 610
 12B8           ;   
 12B8           ;   if((flag1 == 0) && (motion_busy == 0)) //stop 1 long beep
 12B8 4423              tst R20
 12BA 11F5              brne L231
 12BC           X48:
 12BC 20900900          lds R2,_motion_busy
 12C0 2220              tst R2
 12C2 F1F4              brne L231
 12C4           X49:
 12C4                   .dbline 611
 12C4           ;   {
 12C4                   .dbline 612
 12C4           ;   if((0x19 < remote_data[3] < 0x2D) && (0x15 < remote_data[4] < 0x29)) 
 12C4 20900300          lds R2,_remote_data+3
 12C8 89E1              ldi R24,25
 12CA 8215              cp R24,R2
 12CC 18F4              brsh L237
 12CE           X50:
 12CE 61E0              ldi R22,1
 12D0 70E0              ldi R23,0
 12D2 02C0              xjmp L238
 12D4           L237:
 12D4 6627              clr R22
 12D6 7727              clr R23
 12D8           L238:
 12D8 6D32              cpi R22,45
 12DA E0E0              ldi R30,0
 12DC 7E07              cpc R23,R30
 12DE 84F4              brge L233
 12E0           X51:
 12E0 20900400          lds R2,_remote_data+4
 12E4 85E1              ldi R24,21
 12E6 8215              cp R24,R2
 12E8 18F4              brsh L239
 12EA           X52:
 12EA 61E0              ldi R22,1
 12EC 70E0              ldi R23,0
 12EE 02C0              xjmp L240
 12F0           L239:
 12F0 6627              clr R22
 12F2 7727              clr R23
 12F4           L240:
 12F4 6932              cpi R22,41
 12F6 E0E0              ldi R30,0
 12F8 7E07              cpc R23,R30
 12FA 14F4              brge L233
 12FC           X53:
 12FC                   .dbline 613
 12FC           ;    {
 12FC                   .dbline 614
 12FC           ;     flag1 = 1;
 12FC 41E0              ldi R20,1
 12FE                   .dbline 615
 12FE           ;       servo_calibration();
 12FE D4DB              xcall _servo_calibration
 1300                   .dbline 617
 1300           ;       //buzzer_on(); delay_250ms(); delay_250ms(); delay_250ms(); buzzer_off(); //use it to debug remote onnection
 1300           ;    }
 1300           L233:
 1300                   .dbline 618
 1300           ;   }
 1300           L231:
 1300                   .dbline -2
 1300           L209:
 1300                   .dbline 0 ; func end
 1300 0C940000          xjmp pop_xgsetF000
 1304                   .dbsym r flag1 20 c
 1304                   .dbend
 1304                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\main.c
 1304                   .dbfunc e main _main fV
 1304           ;              i -> R20,R21
                        .even
 1304           _main::
 1304                   .dbline -1
 1304                   .dbline 91
 1304           ; /**
 1304           ; 
 1304           ;  main.c :     Main Program
 1304           ;  This file uses the two header files being created hexapod.h and hexapod_firebirdv.h
 1304           ;  This piece of code demonstrates the motion of hexapod and also how the letters can be scribed out
 1304           ;  with the help of hexapod and a pen attached to it, just by tracing the letter through its motion.
 1304           ; 
 1304           ;  @author Group 10: Abhinav Maurya 10305016
 1304           ;                                  Yogesh Kakde   10305039
 1304           ;                                  Lokesh Rajwani 10305066
 1304           ;  
 1304           ;  AVR Studio Version 4.17, Build 666
 1304           ; 
 1304           ;  Date: 6th November 2010
 1304           ;  
 1304           ;     Make sure that in the configuration options following settings are 
 1304           ;       done for proper operation of the code
 1304           ; 
 1304           ;       Microcontroller: atmega2560
 1304           ;       Frequency: 11059200
 1304           ;       Optimization: -O0 (For more information read section: Selecting proper optimization options 
 1304           ;                                               below figure 4.22 in the hardware manual)
 1304           ; *********************************************************************************/
 1304           ; 
 1304           ; 
 1304           ; /********************************************************************************
 1304           ; 
 1304           ;    Copyright (c) 2010, ERTS Lab IIT Bombay erts@cse.iitb.ac.in               -*- c -*-
 1304           ;    All rights reserved.
 1304           ; 
 1304           ;    Redistribution and use in source and binary forms, with or without
 1304           ;    modification, are permitted provided that the following conditions are met:
 1304           ; 
 1304           ;    * Redistributions of source code must retain the above copyright
 1304           ;      notice, this list of conditions and the following disclaimer.
 1304           ; 
 1304           ;    * Redistributions in binary form must reproduce the above copyright
 1304           ;      notice, this list of conditions and the following disclaimer in
 1304           ;      the documentation and/or other materials provided with the
 1304           ;      distribution.
 1304           ; 
 1304           ;    * Neither the name of the copyright holders nor the names of
 1304           ;      contributors may be used to endorse or promote products derived
 1304           ;      from this software without specific prior written permission.
 1304           ; 
 1304           ;    * Source code can be used for academic purpose. 
 1304           ;        For commercial use permission form the author needs to be taken.
 1304           ; 
 1304           ;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 1304           ;   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 1304           ;   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 1304           ;   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 1304           ;   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 1304           ;   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 1304           ;   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 1304           ;   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 1304           ;   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 1304           ;   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 1304           ;   POSSIBILITY OF SUCH DAMAGE. 
 1304           ; 
 1304           ; ********************************************************************************/
 1304           ; 
 1304           ; 
 1304           ;       // Application: ICC-AVR
 1304           ; // Target: M2560
 1304           ; // Crystal: 11.059Mhz
 1304           ; 
 1304           ; 
 1304           ; 
 1304           ; #include "hexapod.h"
 1304           ; 
 1304           ; //These functions provide forward motions in each adjacent limbs direction
 1304           ; //Although these functions are not currently used, but are provided as a secondary functions.
 1304           ; 
 1304           ; void forward_1_4 (void);                               /**              1    4                         **/
 1304           ; void forward_4_5 (void);
 1304           ; void forward_3_2 (void);                               /**      2            5                 **/
 1304           ; void forward_2_1 (void);
 1304           ; void forward_5_6 (void);                               /**              3    6                         **/
 1304           ; 
 1304           ; 
 1304           ; //The functions declared below are the functions which will scribe out letters as indicated by their names.
 1304           ; //Such functions can be extended even to scribe out numbers and shapes.
 1304           ; void write_H(int n);
 1304           ; void write_X(int n);
 1304           ; 
 1304           ; 
 1304           ; 
 1304           ; /*******MAIN PROGRAM***********/
 1304           ; void main(void)
 1304           ; {
 1304                   .dbline 93
 1304           ;  int i;
 1304           ;  init_devices();
 1304 31DA              xcall _init_devices
 1306                   .dbline 95
 1306           ;  //insert your functional code here...
 1306           ;  servo_calibration(); //must be called as the first instruction
 1306 D0DB              xcall _servo_calibration
 1308                   .dbline 96
 1308           ;  servo_on();//turning on the servo supply
 1308 0E940000          xcall _servo_on
 130C                   .dbline 100
 130C           ; 
 130C           ; 
 130C           ;  ////////********DEMO 1***********////////// 
 130C           ;  delay(5000);
 130C 08E8              ldi R16,5000
 130E 13E1              ldi R17,19
 1310 0E94D200          xcall _delay
 1314                   .dbline 103
 1314           ;  
 1314           ;  //The code below rotates the hexapod by 360 degrees
 1314           ;  rotate_clockwise(90);
 1314 0AE5              ldi R16,90
 1316 10E0              ldi R17,0
 1318 FDDD              xcall _rotate_clockwise
 131A                   .dbline 104
 131A           ;  rotate_clockwise(90);
 131A 0AE5              ldi R16,90
 131C 10E0              ldi R17,0
 131E FADD              xcall _rotate_clockwise
 1320                   .dbline 105
 1320           ;  rotate_clockwise(90);
 1320 0AE5              ldi R16,90
 1322 10E0              ldi R17,0
 1324 F7DD              xcall _rotate_clockwise
 1326                   .dbline 106
 1326           ;  rotate_clockwise(90);
 1326 0AE5              ldi R16,90
 1328 10E0              ldi R17,0
 132A F4DD              xcall _rotate_clockwise
 132C                   .dbline 110
 132C           ;  
 132C           ;  
 132C           ;  ////////********DEMO 2***********//////////
 132C           ;  delay(5000);
 132C 08E8              ldi R16,5000
 132E 13E1              ldi R17,19
 1330 0E94D200          xcall _delay
 1334                   .dbline 113
 1334           ;  
 1334           ;  //The code below traverses the hexapod forward and then backward
 1334           ;  for(i=0;i<5;i++){
 1334 4427              clr R20
 1336 5527              clr R21
 1338           L242:
 1338                   .dbline 113
 1338                   .dbline 114
 1338           ;   forward();
 1338 64DE              xcall _forward
 133A           L246:
 133A                   .dbline 115
 133A           ;   while(motion_busy == 1);
 133A           L247:
 133A                   .dbline 115
 133A 80910900          lds R24,_motion_busy
 133E 8130              cpi R24,1
 1340 E1F3              breq L246
 1342           X54:
 1342                   .dbline 116
 1342           ;  }
 1342           L243:
 1342                   .dbline 113
 1342 4F5F              subi R20,255  ; offset = 1
 1344 5F4F              sbci R21,255
 1346                   .dbline 113
 1346 4530              cpi R20,5
 1348 E0E0              ldi R30,0
 134A 5E07              cpc R21,R30
 134C ACF3              brlt L242
 134E           X55:
 134E                   .dbline 118
 134E           ;  
 134E           ;  delay(5000);
 134E 08E8              ldi R16,5000
 1350 13E1              ldi R17,19
 1352 0E94D200          xcall _delay
 1356                   .dbline 119
 1356           ;  for(i=0;i<10;i++){
 1356 4427              clr R20
 1358 5527              clr R21
 135A           L249:
 135A                   .dbline 119
 135A                   .dbline 120
 135A           ;   backward();
 135A D1DE              xcall _backward
 135C           L253:
 135C                   .dbline 121
 135C           ;   while(motion_busy == 1);
 135C           L254:
 135C                   .dbline 121
 135C 80910900          lds R24,_motion_busy
 1360 8130              cpi R24,1
 1362 E1F3              breq L253
 1364           X56:
 1364                   .dbline 122
 1364           ;  }
 1364           L250:
 1364                   .dbline 119
 1364 4F5F              subi R20,255  ; offset = 1
 1366 5F4F              sbci R21,255
 1368                   .dbline 119
 1368 4A30              cpi R20,10
 136A E0E0              ldi R30,0
 136C 5E07              cpc R21,R30
 136E ACF3              brlt L249
 1370           X57:
 1370                   .dbline 127
 1370           ;  
 1370           ;  
 1370           ;  ////////********DEMO 3***********//////////
 1370           ;  ////////********To write H********/////////
 1370           ;  delay(5000);
 1370 08E8              ldi R16,5000
 1372 13E1              ldi R17,19
 1374 0E94D200          xcall _delay
 1378                   .dbline 128
 1378           ;  write_H(4);
 1378 04E0              ldi R16,4
 137A 10E0              ldi R17,0
 137C D3D1              xcall _write_H
 137E                   .dbline -2
 137E           L241:
 137E                   .dbline 0 ; func end
 137E 0895              ret
 1380                   .dbsym r i 20 I
 1380                   .dbend
 1380                   .dbfunc e forward_1_4 _forward_1_4 fV
                        .even
 1380           _forward_1_4::
 1380                   .dbline -1
 1380                   .dbline 141
 1380           ; }
 1380           ; 
 1380           ; 
 1380           ; 
 1380           ; 
 1380           ; 
 1380           ; 
 1380           ; /****************FUNCTION DEFINITIONS***************/
 1380           ; /***********DEFINING USER-DEFINED FUNCTIONS*********/
 1380           ; //The following functions may be modified, added depending upon the project needs
 1380           ; 
 1380           ; void forward_1_4 (void)
 1380           ; {
 1380                   .dbline 142
 1380           ;  motion_busy = 1; 
 1380 81E0              ldi R24,1
 1382 80930900          sts _motion_busy,R24
 1386                   .dbline 143
 1386           ;  servo_calibration();
 1386 90DB              xcall _servo_calibration
 1388                   .dbline 144
 1388           ;  delay_250ms();
 1388 0E940101          xcall _delay_250ms
 138C                   .dbline 147
 138C           ;  
 138C           ;  //legs 2 and 4 move forward
 138C           ;  angle_2B(45); angle_2C(45); angle_4B(45); angle_4C(45); //front pair BC servo up 45
 138C 0DE2              ldi R16,45
 138E 71DA              xcall _angle_2B
 1390                   .dbline 147
 1390 0DE2              ldi R16,45
 1392 83DA              xcall _angle_2C
 1394                   .dbline 147
 1394 0DE2              ldi R16,45
 1396 D6DA              xcall _angle_4B
 1398                   .dbline 147
 1398 0DE2              ldi R16,45
 139A EBDA              xcall _angle_4C
 139C                   .dbline 148
 139C           ;  delay_250ms();
 139C 0E940101          xcall _delay_250ms
 13A0                   .dbline 149
 13A0           ;  angle_2A(60); angle_4A(120); //front pair move forward while legs are up
 13A0 0CE3              ldi R16,60
 13A2 56DA              xcall _angle_2A
 13A4                   .dbline 149
 13A4 08E7              ldi R16,120
 13A6 BDDA              xcall _angle_4A
 13A8                   .dbline 150
 13A8           ;  delay_250ms();
 13A8 0E940101          xcall _delay_250ms
 13AC                   .dbline 151
 13AC           ;  angle_2B(90); angle_2C(90); angle_4B(90); angle_4C(90); // put down legs
 13AC 0AE5              ldi R16,90
 13AE 61DA              xcall _angle_2B
 13B0                   .dbline 151
 13B0 0AE5              ldi R16,90
 13B2 73DA              xcall _angle_2C
 13B4                   .dbline 151
 13B4 0AE5              ldi R16,90
 13B6 C6DA              xcall _angle_4B
 13B8                   .dbline 151
 13B8 0AE5              ldi R16,90
 13BA DBDA              xcall _angle_4C
 13BC                   .dbline 152
 13BC           ;  delay_250ms();
 13BC 0E940101          xcall _delay_250ms
 13C0                   .dbline 155
 13C0           ;  
 13C0           ;  //legs 1 and 6 move forward
 13C0           ;  angle_1B(45); angle_1C(45); angle_6B(45); angle_6C(45); //middel pair BC servo up 45
 13C0 0DE2              ldi R16,45
 13C2 24DA              xcall _angle_1B
 13C4                   .dbline 155
 13C4 0DE2              ldi R16,45
 13C6 33DA              xcall _angle_1C
 13C8                   .dbline 155
 13C8 0DE2              ldi R16,45
 13CA 3ADB              xcall _angle_6B
 13CC                   .dbline 155
 13CC 0DE2              ldi R16,45
 13CE 4FDB              xcall _angle_6C
 13D0                   .dbline 156
 13D0           ;  delay_250ms();
 13D0 0E940101          xcall _delay_250ms
 13D4                   .dbline 157
 13D4           ;  angle_1A(60); angle_6A(120); //middel pair move back while legs are up
 13D4 0CE3              ldi R16,60
 13D6 09DA              xcall _angle_1A
 13D8                   .dbline 157
 13D8 08E7              ldi R16,120
 13DA 21DB              xcall _angle_6A
 13DC                   .dbline 158
 13DC           ;  delay_250ms();
 13DC 0E940101          xcall _delay_250ms
 13E0                   .dbline 159
 13E0           ;  angle_1B(90); angle_1C(90); angle_6B(90); angle_6C(90); // put down legs
 13E0 0AE5              ldi R16,90
 13E2 14DA              xcall _angle_1B
 13E4                   .dbline 159
 13E4 0AE5              ldi R16,90
 13E6 23DA              xcall _angle_1C
 13E8                   .dbline 159
 13E8 0AE5              ldi R16,90
 13EA 2ADB              xcall _angle_6B
 13EC                   .dbline 159
 13EC 0AE5              ldi R16,90
 13EE 3FDB              xcall _angle_6C
 13F0                   .dbline 160
 13F0           ;  delay_250ms();
 13F0 0E940101          xcall _delay_250ms
 13F4                   .dbline 163
 13F4           ;  
 13F4           ;  //legs 3 and 5 move forward
 13F4           ;  angle_3B(45); angle_3C(45); angle_5B(45); angle_5C(45); //middel pair BC servo up 45
 13F4 0DE2              ldi R16,45
 13F6 73DA              xcall _angle_3B
 13F8                   .dbline 163
 13F8 0DE2              ldi R16,45
 13FA 82DA              xcall _angle_3C
 13FC                   .dbline 163
 13FC 0DE2              ldi R16,45
 13FE E1DA              xcall _angle_5B
 1400                   .dbline 163
 1400 0DE2              ldi R16,45
 1402 F6DA              xcall _angle_5C
 1404                   .dbline 164
 1404           ;  delay_250ms();
 1404 0E940101          xcall _delay_250ms
 1408                   .dbline 165
 1408           ;  angle_3A(60); angle_5A(120); //middel pair move forward while legs are up
 1408 0CE3              ldi R16,60
 140A 58DA              xcall _angle_3A
 140C                   .dbline 165
 140C 08E7              ldi R16,120
 140E C8DA              xcall _angle_5A
 1410                   .dbline 166
 1410           ;  delay_250ms();
 1410 0E940101          xcall _delay_250ms
 1414                   .dbline 167
 1414           ;  angle_3B(90); angle_3C(90); angle_5B(90); angle_5C(90); // put down legs
 1414 0AE5              ldi R16,90
 1416 63DA              xcall _angle_3B
 1418                   .dbline 167
 1418 0AE5              ldi R16,90
 141A 72DA              xcall _angle_3C
 141C                   .dbline 167
 141C 0AE5              ldi R16,90
 141E D1DA              xcall _angle_5B
 1420                   .dbline 167
 1420 0AE5              ldi R16,90
 1422 E6DA              xcall _angle_5C
 1424                   .dbline 168
 1424           ;  delay_250ms(); 
 1424 0E940101          xcall _delay_250ms
 1428                   .dbline 170
 1428           ;  
 1428           ;  servo_calibration(); //push towards forward
 1428 3FDB              xcall _servo_calibration
 142A                   .dbline 171
 142A           ;  motion_busy = 0; 
 142A 2224              clr R2
 142C 20920900          sts _motion_busy,R2
 1430                   .dbline -2
 1430           L256:
 1430                   .dbline 0 ; func end
 1430 0895              ret
 1432                   .dbend
 1432                   .dbfunc e forward_4_5 _forward_4_5 fV
                        .even
 1432           _forward_4_5::
 1432                   .dbline -1
 1432                   .dbline 175
 1432           ; }
 1432           ; 
 1432           ; void forward_4_5 (void)
 1432           ; {
 1432                   .dbline 176
 1432           ;  motion_busy = 1; 
 1432 81E0              ldi R24,1
 1434 80930900          sts _motion_busy,R24
 1438                   .dbline 177
 1438           ;  servo_calibration();
 1438 37DB              xcall _servo_calibration
 143A                   .dbline 178
 143A           ;  delay_250ms();
 143A 0E940101          xcall _delay_250ms
 143E                   .dbline 181
 143E           ;  
 143E           ;  //legs 1 and 5 move forward
 143E           ;  angle_1B(45); angle_1C(45); angle_5B(45); angle_5C(45); //front pair BC servo up 45
 143E 0DE2              ldi R16,45
 1440 E5D9              xcall _angle_1B
 1442                   .dbline 181
 1442 0DE2              ldi R16,45
 1444 F4D9              xcall _angle_1C
 1446                   .dbline 181
 1446 0DE2              ldi R16,45
 1448 BCDA              xcall _angle_5B
 144A                   .dbline 181
 144A 0DE2              ldi R16,45
 144C D1DA              xcall _angle_5C
 144E                   .dbline 182
 144E           ;  delay_250ms();
 144E 0E940101          xcall _delay_250ms
 1452                   .dbline 183
 1452           ;  angle_1A(80); angle_5A(120); //front pair move forward while legs are up
 1452 00E5              ldi R16,80
 1454 CAD9              xcall _angle_1A
 1456                   .dbline 183
 1456 08E7              ldi R16,120
 1458 A3DA              xcall _angle_5A
 145A                   .dbline 184
 145A           ;  delay_250ms();
 145A 0E940101          xcall _delay_250ms
 145E                   .dbline 185
 145E           ;  angle_1B(90); angle_1C(90); angle_5B(90); angle_5C(90); // put down legs
 145E 0AE5              ldi R16,90
 1460 D5D9              xcall _angle_1B
 1462                   .dbline 185
 1462 0AE5              ldi R16,90
 1464 E4D9              xcall _angle_1C
 1466                   .dbline 185
 1466 0AE5              ldi R16,90
 1468 ACDA              xcall _angle_5B
 146A                   .dbline 185
 146A 0AE5              ldi R16,90
 146C C1DA              xcall _angle_5C
 146E                   .dbline 186
 146E           ;  delay_250ms();
 146E 0E940101          xcall _delay_250ms
 1472                   .dbline 189
 1472           ;  
 1472           ;  //legs 4 and 3 move forward
 1472           ;  angle_4B(45); angle_4C(45); angle_3B(45); angle_3C(45); //middel pair BC servo up 45
 1472 0DE2              ldi R16,45
 1474 67DA              xcall _angle_4B
 1476                   .dbline 189
 1476 0DE2              ldi R16,45
 1478 7CDA              xcall _angle_4C
 147A                   .dbline 189
 147A 0DE2              ldi R16,45
 147C 30DA              xcall _angle_3B
 147E                   .dbline 189
 147E 0DE2              ldi R16,45
 1480 3FDA              xcall _angle_3C
 1482                   .dbline 190
 1482           ;  delay_250ms();
 1482 0E940101          xcall _delay_250ms
 1486                   .dbline 191
 1486           ;  angle_4A(80); angle_3A(120); //middel pair move back while legs are up
 1486 00E5              ldi R16,80
 1488 4CDA              xcall _angle_4A
 148A                   .dbline 191
 148A 08E7              ldi R16,120
 148C 17DA              xcall _angle_3A
 148E                   .dbline 192
 148E           ;  delay_250ms();
 148E 0E940101          xcall _delay_250ms
 1492                   .dbline 193
 1492           ;  angle_4B(90); angle_4C(90); angle_3B(90); angle_3C(90); // put down legs
 1492 0AE5              ldi R16,90
 1494 57DA              xcall _angle_4B
 1496                   .dbline 193
 1496 0AE5              ldi R16,90
 1498 6CDA              xcall _angle_4C
 149A                   .dbline 193
 149A 0AE5              ldi R16,90
 149C 20DA              xcall _angle_3B
 149E                   .dbline 193
 149E 0AE5              ldi R16,90
 14A0 2FDA              xcall _angle_3C
 14A2                   .dbline 194
 14A2           ;  delay_250ms();
 14A2 0E940101          xcall _delay_250ms
 14A6                   .dbline 197
 14A6           ;  
 14A6           ;  //legs 2 and 6 move forward
 14A6           ;  angle_2B(45); angle_2C(45); angle_6B(45); angle_6C(45); //middel pair BC servo up 45
 14A6 0DE2              ldi R16,45
 14A8 E4D9              xcall _angle_2B
 14AA                   .dbline 197
 14AA 0DE2              ldi R16,45
 14AC F6D9              xcall _angle_2C
 14AE                   .dbline 197
 14AE 0DE2              ldi R16,45
 14B0 C7DA              xcall _angle_6B
 14B2                   .dbline 197
 14B2 0DE2              ldi R16,45
 14B4 DCDA              xcall _angle_6C
 14B6                   .dbline 198
 14B6           ;  delay_250ms();
 14B6 0E940101          xcall _delay_250ms
 14BA                   .dbline 199
 14BA           ;  angle_2A(80); angle_6A(120); //middel pair move forward while legs are up
 14BA 00E5              ldi R16,80
 14BC C9D9              xcall _angle_2A
 14BE                   .dbline 199
 14BE 08E7              ldi R16,120
 14C0 AEDA              xcall _angle_6A
 14C2                   .dbline 200
 14C2           ;  delay_250ms();
 14C2 0E940101          xcall _delay_250ms
 14C6                   .dbline 201
 14C6           ;  angle_2B(90); angle_2C(90); angle_6B(90); angle_6C(90); // put down legs
 14C6 0AE5              ldi R16,90
 14C8 D4D9              xcall _angle_2B
 14CA                   .dbline 201
 14CA 0AE5              ldi R16,90
 14CC E6D9              xcall _angle_2C
 14CE                   .dbline 201
 14CE 0AE5              ldi R16,90
 14D0 B7DA              xcall _angle_6B
 14D2                   .dbline 201
 14D2 0AE5              ldi R16,90
 14D4 CCDA              xcall _angle_6C
 14D6                   .dbline 202
 14D6           ;  delay_250ms(); 
 14D6 0E940101          xcall _delay_250ms
 14DA                   .dbline 204
 14DA           ;  
 14DA           ;  servo_calibration(); //push towards forward
 14DA E6DA              xcall _servo_calibration
 14DC                   .dbline 205
 14DC           ;  motion_busy = 0; 
 14DC 2224              clr R2
 14DE 20920900          sts _motion_busy,R2
 14E2                   .dbline -2
 14E2           L257:
 14E2                   .dbline 0 ; func end
 14E2 0895              ret
 14E4                   .dbend
 14E4                   .dbfunc e forward_3_2 _forward_3_2 fV
                        .even
 14E4           _forward_3_2::
 14E4                   .dbline -1
 14E4                   .dbline 209
 14E4           ; }
 14E4           ; 
 14E4           ; void forward_3_2 (void)
 14E4           ; {
 14E4                   .dbline 210
 14E4           ;  motion_busy = 1; 
 14E4 81E0              ldi R24,1
 14E6 80930900          sts _motion_busy,R24
 14EA                   .dbline 211
 14EA           ;  servo_calibration();
 14EA DEDA              xcall _servo_calibration
 14EC                   .dbline 212
 14EC           ;  delay_250ms();
 14EC 0E940101          xcall _delay_250ms
 14F0                   .dbline 215
 14F0           ;  
 14F0           ;  //legs 6 and 2 move forward
 14F0           ;  angle_6B(45); angle_6C(45); angle_2B(45); angle_2C(45); //front pair BC servo up 45
 14F0 0DE2              ldi R16,45
 14F2 A6DA              xcall _angle_6B
 14F4                   .dbline 215
 14F4 0DE2              ldi R16,45
 14F6 BBDA              xcall _angle_6C
 14F8                   .dbline 215
 14F8 0DE2              ldi R16,45
 14FA BBD9              xcall _angle_2B
 14FC                   .dbline 215
 14FC 0DE2              ldi R16,45
 14FE CDD9              xcall _angle_2C
 1500                   .dbline 216
 1500           ;  delay_250ms();
 1500 0E940101          xcall _delay_250ms
 1504                   .dbline 217
 1504           ;  angle_6A(60); angle_2A(120); //front pair move forward while legs are up
 1504 0CE3              ldi R16,60
 1506 8BDA              xcall _angle_6A
 1508                   .dbline 217
 1508 08E7              ldi R16,120
 150A A2D9              xcall _angle_2A
 150C                   .dbline 218
 150C           ;  delay_250ms();
 150C 0E940101          xcall _delay_250ms
 1510                   .dbline 219
 1510           ;  angle_6B(90); angle_6C(90); angle_2B(90); angle_2C(90); // put down legs
 1510 0AE5              ldi R16,90
 1512 96DA              xcall _angle_6B
 1514                   .dbline 219
 1514 0AE5              ldi R16,90
 1516 ABDA              xcall _angle_6C
 1518                   .dbline 219
 1518 0AE5              ldi R16,90
 151A ABD9              xcall _angle_2B
 151C                   .dbline 219
 151C 0AE5              ldi R16,90
 151E BDD9              xcall _angle_2C
 1520                   .dbline 220
 1520           ;  delay_250ms();
 1520 0E940101          xcall _delay_250ms
 1524                   .dbline 223
 1524           ;  
 1524           ;  //legs 3 and 4 move forward
 1524           ;  angle_3B(45); angle_3C(45); angle_4B(45); angle_4C(45); //middel pair BC servo up 45
 1524 0DE2              ldi R16,45
 1526 DBD9              xcall _angle_3B
 1528                   .dbline 223
 1528 0DE2              ldi R16,45
 152A EAD9              xcall _angle_3C
 152C                   .dbline 223
 152C 0DE2              ldi R16,45
 152E 0ADA              xcall _angle_4B
 1530                   .dbline 223
 1530 0DE2              ldi R16,45
 1532 1FDA              xcall _angle_4C
 1534                   .dbline 224
 1534           ;  delay_250ms();
 1534 0E940101          xcall _delay_250ms
 1538                   .dbline 225
 1538           ;  angle_3A(60); angle_4A(120); //middel pair move back while legs are up
 1538 0CE3              ldi R16,60
 153A C0D9              xcall _angle_3A
 153C                   .dbline 225
 153C 08E7              ldi R16,120
 153E F1D9              xcall _angle_4A
 1540                   .dbline 226
 1540           ;  delay_250ms();
 1540 0E940101          xcall _delay_250ms
 1544                   .dbline 227
 1544           ;  angle_3B(90); angle_3C(90); angle_4B(90); angle_4C(90); // put down legs
 1544 0AE5              ldi R16,90
 1546 CBD9              xcall _angle_3B
 1548                   .dbline 227
 1548 0AE5              ldi R16,90
 154A DAD9              xcall _angle_3C
 154C                   .dbline 227
 154C 0AE5              ldi R16,90
 154E FAD9              xcall _angle_4B
 1550                   .dbline 227
 1550 0AE5              ldi R16,90
 1552 0FDA              xcall _angle_4C
 1554                   .dbline 228
 1554           ;  delay_250ms();
 1554 0E940101          xcall _delay_250ms
 1558                   .dbline 231
 1558           ;  
 1558           ;  //legs 5 and 1 move forward
 1558           ;  angle_5B(45); angle_5C(45); angle_1B(45); angle_1C(45); //middel pair BC servo up 45
 1558 0DE2              ldi R16,45
 155A 33DA              xcall _angle_5B
 155C                   .dbline 231
 155C 0DE2              ldi R16,45
 155E 48DA              xcall _angle_5C
 1560                   .dbline 231
 1560 0DE2              ldi R16,45
 1562 54D9              xcall _angle_1B
 1564                   .dbline 231
 1564 0DE2              ldi R16,45
 1566 63D9              xcall _angle_1C
 1568                   .dbline 232
 1568           ;  delay_250ms();
 1568 0E940101          xcall _delay_250ms
 156C                   .dbline 233
 156C           ;  angle_5A(60); angle_1A(120); //middel pair move forward while legs are up
 156C 0CE3              ldi R16,60
 156E 18DA              xcall _angle_5A
 1570                   .dbline 233
 1570 08E7              ldi R16,120
 1572 3BD9              xcall _angle_1A
 1574                   .dbline 234
 1574           ;  delay_250ms();
 1574 0E940101          xcall _delay_250ms
 1578                   .dbline 235
 1578           ;  angle_5B(90); angle_5C(90); angle_1B(90); angle_1C(90); // put down legs
 1578 0AE5              ldi R16,90
 157A 23DA              xcall _angle_5B
 157C                   .dbline 235
 157C 0AE5              ldi R16,90
 157E 38DA              xcall _angle_5C
 1580                   .dbline 235
 1580 0AE5              ldi R16,90
 1582 44D9              xcall _angle_1B
 1584                   .dbline 235
 1584 0AE5              ldi R16,90
 1586 53D9              xcall _angle_1C
 1588                   .dbline 236
 1588           ;  delay_250ms(); 
 1588 0E940101          xcall _delay_250ms
 158C                   .dbline 238
 158C           ;  
 158C           ;  servo_calibration(); //push towards forward
 158C 8DDA              xcall _servo_calibration
 158E                   .dbline 239
 158E           ;  motion_busy = 0; 
 158E 2224              clr R2
 1590 20920900          sts _motion_busy,R2
 1594                   .dbline -2
 1594           L258:
 1594                   .dbline 0 ; func end
 1594 0895              ret
 1596                   .dbend
 1596                   .dbfunc e forward_2_1 _forward_2_1 fV
                        .even
 1596           _forward_2_1::
 1596                   .dbline -1
 1596                   .dbline 243
 1596           ; }
 1596           ; 
 1596           ; void forward_2_1 (void)
 1596           ; {
 1596                   .dbline 244
 1596           ;  motion_busy = 1; 
 1596 81E0              ldi R24,1
 1598 80930900          sts _motion_busy,R24
 159C                   .dbline 245
 159C           ;  servo_calibration();
 159C 85DA              xcall _servo_calibration
 159E                   .dbline 246
 159E           ;  delay_250ms();
 159E 0E940101          xcall _delay_250ms
 15A2                   .dbline 249
 15A2           ;  
 15A2           ;  //legs 3 and 1 move forward
 15A2           ;  angle_3B(45); angle_3C(45); angle_1B(45); angle_1C(45); //front pair BC servo up 45
 15A2 0DE2              ldi R16,45
 15A4 9CD9              xcall _angle_3B
 15A6                   .dbline 249
 15A6 0DE2              ldi R16,45
 15A8 ABD9              xcall _angle_3C
 15AA                   .dbline 249
 15AA 0DE2              ldi R16,45
 15AC 2FD9              xcall _angle_1B
 15AE                   .dbline 249
 15AE 0DE2              ldi R16,45
 15B0 3ED9              xcall _angle_1C
 15B2                   .dbline 250
 15B2           ;  delay_250ms();
 15B2 0E940101          xcall _delay_250ms
 15B6                   .dbline 251
 15B6           ;  angle_3A(60); angle_1A(120); //front pair move forward while legs are up
 15B6 0CE3              ldi R16,60
 15B8 81D9              xcall _angle_3A
 15BA                   .dbline 251
 15BA 08E7              ldi R16,120
 15BC 16D9              xcall _angle_1A
 15BE                   .dbline 252
 15BE           ;  delay_250ms();
 15BE 0E940101          xcall _delay_250ms
 15C2                   .dbline 253
 15C2           ;  angle_3B(90); angle_3C(90); angle_1B(90); angle_1C(90); // put down legs
 15C2 0AE5              ldi R16,90
 15C4 8CD9              xcall _angle_3B
 15C6                   .dbline 253
 15C6 0AE5              ldi R16,90
 15C8 9BD9              xcall _angle_3C
 15CA                   .dbline 253
 15CA 0AE5              ldi R16,90
 15CC 1FD9              xcall _angle_1B
 15CE                   .dbline 253
 15CE 0AE5              ldi R16,90
 15D0 2ED9              xcall _angle_1C
 15D2                   .dbline 254
 15D2           ;  delay_250ms();
 15D2 0E940101          xcall _delay_250ms
 15D6                   .dbline 257
 15D6           ;  
 15D6           ;  //legs 2 and 5 move forward
 15D6           ;  angle_2B(45); angle_2C(45); angle_5B(45); angle_5C(45); //middel pair BC servo up 45
 15D6 0DE2              ldi R16,45
 15D8 4CD9              xcall _angle_2B
 15DA                   .dbline 257
 15DA 0DE2              ldi R16,45
 15DC 5ED9              xcall _angle_2C
 15DE                   .dbline 257
 15DE 0DE2              ldi R16,45
 15E0 F0D9              xcall _angle_5B
 15E2                   .dbline 257
 15E2 0DE2              ldi R16,45
 15E4 05DA              xcall _angle_5C
 15E6                   .dbline 258
 15E6           ;  delay_250ms();
 15E6 0E940101          xcall _delay_250ms
 15EA                   .dbline 259
 15EA           ;  angle_2A(60); angle_5A(120); //middel pair move back while legs are up
 15EA 0CE3              ldi R16,60
 15EC 31D9              xcall _angle_2A
 15EE                   .dbline 259
 15EE 08E7              ldi R16,120
 15F0 D7D9              xcall _angle_5A
 15F2                   .dbline 260
 15F2           ;  delay_250ms();
 15F2 0E940101          xcall _delay_250ms
 15F6                   .dbline 261
 15F6           ;  angle_2B(90); angle_2C(90); angle_5B(90); angle_5C(90); // put down legs
 15F6 0AE5              ldi R16,90
 15F8 3CD9              xcall _angle_2B
 15FA                   .dbline 261
 15FA 0AE5              ldi R16,90
 15FC 4ED9              xcall _angle_2C
 15FE                   .dbline 261
 15FE 0AE5              ldi R16,90
 1600 E0D9              xcall _angle_5B
 1602                   .dbline 261
 1602 0AE5              ldi R16,90
 1604 F5D9              xcall _angle_5C
 1606                   .dbline 262
 1606           ;  delay_250ms();
 1606 0E940101          xcall _delay_250ms
 160A                   .dbline 265
 160A           ;  
 160A           ;  //legs 6 and 4 move forward
 160A           ;  angle_6B(45); angle_6C(45); angle_4B(45); angle_4C(45); //middel pair BC servo up 45
 160A 0DE2              ldi R16,45
 160C 19DA              xcall _angle_6B
 160E                   .dbline 265
 160E 0DE2              ldi R16,45
 1610 2EDA              xcall _angle_6C
 1612                   .dbline 265
 1612 0DE2              ldi R16,45
 1614 97D9              xcall _angle_4B
 1616                   .dbline 265
 1616 0DE2              ldi R16,45
 1618 ACD9              xcall _angle_4C
 161A                   .dbline 266
 161A           ;  delay_250ms();
 161A 0E940101          xcall _delay_250ms
 161E                   .dbline 267
 161E           ;  angle_6A(60); angle_4A(120); //middel pair move forward while legs are up
 161E 0CE3              ldi R16,60
 1620 FED9              xcall _angle_6A
 1622                   .dbline 267
 1622 08E7              ldi R16,120
 1624 7ED9              xcall _angle_4A
 1626                   .dbline 268
 1626           ;  delay_250ms();
 1626 0E940101          xcall _delay_250ms
 162A                   .dbline 269
 162A           ;  angle_6B(90); angle_6C(90); angle_4B(90); angle_4C(90); // put down legs
 162A 0AE5              ldi R16,90
 162C 09DA              xcall _angle_6B
 162E                   .dbline 269
 162E 0AE5              ldi R16,90
 1630 1EDA              xcall _angle_6C
 1632                   .dbline 269
 1632 0AE5              ldi R16,90
 1634 87D9              xcall _angle_4B
 1636                   .dbline 269
 1636 0AE5              ldi R16,90
 1638 9CD9              xcall _angle_4C
 163A                   .dbline 270
 163A           ;  delay_250ms(); 
 163A 0E940101          xcall _delay_250ms
 163E                   .dbline 272
 163E           ;  
 163E           ;  servo_calibration(); //push towards forward
 163E 34DA              xcall _servo_calibration
 1640                   .dbline 273
 1640           ;  motion_busy = 0; 
 1640 2224              clr R2
 1642 20920900          sts _motion_busy,R2
 1646                   .dbline -2
 1646           L259:
 1646                   .dbline 0 ; func end
 1646 0895              ret
 1648                   .dbend
 1648                   .dbfunc e forward_5_6 _forward_5_6 fV
                        .even
 1648           _forward_5_6::
 1648                   .dbline -1
 1648                   .dbline 277
 1648           ; }
 1648           ; 
 1648           ; void forward_5_6 (void)
 1648           ; {
 1648                   .dbline 278
 1648           ;  motion_busy = 1; 
 1648 81E0              ldi R24,1
 164A 80930900          sts _motion_busy,R24
 164E                   .dbline 279
 164E           ;  servo_calibration();
 164E 2CDA              xcall _servo_calibration
 1650                   .dbline 280
 1650           ;  delay_250ms();
 1650 0E940101          xcall _delay_250ms
 1654                   .dbline 283
 1654           ;  
 1654           ;  //legs 4 and 6 move forward
 1654           ;  angle_4B(45); angle_4C(45); angle_6B(45); angle_6C(45); //front pair BC servo up 45
 1654 0DE2              ldi R16,45
 1656 76D9              xcall _angle_4B
 1658                   .dbline 283
 1658 0DE2              ldi R16,45
 165A 8BD9              xcall _angle_4C
 165C                   .dbline 283
 165C 0DE2              ldi R16,45
 165E F0D9              xcall _angle_6B
 1660                   .dbline 283
 1660 0DE2              ldi R16,45
 1662 05DA              xcall _angle_6C
 1664                   .dbline 284
 1664           ;  delay_250ms();
 1664 0E940101          xcall _delay_250ms
 1668                   .dbline 285
 1668           ;  angle_4A(60); angle_6A(120); //front pair move forward while legs are up
 1668 0CE3              ldi R16,60
 166A 5BD9              xcall _angle_4A
 166C                   .dbline 285
 166C 08E7              ldi R16,120
 166E D7D9              xcall _angle_6A
 1670                   .dbline 286
 1670           ;  delay_250ms();
 1670 0E940101          xcall _delay_250ms
 1674                   .dbline 287
 1674           ;  angle_4B(90); angle_4C(90); angle_6B(90); angle_6C(90); // put down legs
 1674 0AE5              ldi R16,90
 1676 66D9              xcall _angle_4B
 1678                   .dbline 287
 1678 0AE5              ldi R16,90
 167A 7BD9              xcall _angle_4C
 167C                   .dbline 287
 167C 0AE5              ldi R16,90
 167E E0D9              xcall _angle_6B
 1680                   .dbline 287
 1680 0AE5              ldi R16,90
 1682 F5D9              xcall _angle_6C
 1684                   .dbline 288
 1684           ;  delay_250ms();
 1684 0E940101          xcall _delay_250ms
 1688                   .dbline 291
 1688           ;  
 1688           ;  //legs 5 and 2 move forward
 1688           ;  angle_5B(45); angle_5C(45); angle_2B(45); angle_2C(45); //middel pair BC servo up 45
 1688 0DE2              ldi R16,45
 168A 9BD9              xcall _angle_5B
 168C                   .dbline 291
 168C 0DE2              ldi R16,45
 168E B0D9              xcall _angle_5C
 1690                   .dbline 291
 1690 0DE2              ldi R16,45
 1692 EFD8              xcall _angle_2B
 1694                   .dbline 291
 1694 0DE2              ldi R16,45
 1696 01D9              xcall _angle_2C
 1698                   .dbline 292
 1698           ;  delay_250ms();
 1698 0E940101          xcall _delay_250ms
 169C                   .dbline 293
 169C           ;  angle_5A(60); angle_2A(120); //middel pair move back while legs are up
 169C 0CE3              ldi R16,60
 169E 80D9              xcall _angle_5A
 16A0                   .dbline 293
 16A0 08E7              ldi R16,120
 16A2 D6D8              xcall _angle_2A
 16A4                   .dbline 294
 16A4           ;  delay_250ms();
 16A4 0E940101          xcall _delay_250ms
 16A8                   .dbline 295
 16A8           ;  angle_5B(90); angle_5C(90); angle_2B(90); angle_2C(90); // put down legs
 16A8 0AE5              ldi R16,90
 16AA 8BD9              xcall _angle_5B
 16AC                   .dbline 295
 16AC 0AE5              ldi R16,90
 16AE A0D9              xcall _angle_5C
 16B0                   .dbline 295
 16B0 0AE5              ldi R16,90
 16B2 DFD8              xcall _angle_2B
 16B4                   .dbline 295
 16B4 0AE5              ldi R16,90
 16B6 F1D8              xcall _angle_2C
 16B8                   .dbline 296
 16B8           ;  delay_250ms();
 16B8 0E940101          xcall _delay_250ms
 16BC                   .dbline 299
 16BC           ;  
 16BC           ;  //legs 1 and 3 move forward
 16BC           ;  angle_1B(45); angle_1C(45); angle_3B(45); angle_3C(45); //middel pair BC servo up 45
 16BC 0DE2              ldi R16,45
 16BE A6D8              xcall _angle_1B
 16C0                   .dbline 299
 16C0 0DE2              ldi R16,45
 16C2 B5D8              xcall _angle_1C
 16C4                   .dbline 299
 16C4 0DE2              ldi R16,45
 16C6 0BD9              xcall _angle_3B
 16C8                   .dbline 299
 16C8 0DE2              ldi R16,45
 16CA 1AD9              xcall _angle_3C
 16CC                   .dbline 300
 16CC           ;  delay_250ms();
 16CC 0E940101          xcall _delay_250ms
 16D0                   .dbline 301
 16D0           ;  angle_1A(60); angle_3A(120); //middel pair move forward while legs are up
 16D0 0CE3              ldi R16,60
 16D2 8BD8              xcall _angle_1A
 16D4                   .dbline 301
 16D4 08E7              ldi R16,120
 16D6 F2D8              xcall _angle_3A
 16D8                   .dbline 302
 16D8           ;  delay_250ms();
 16D8 0E940101          xcall _delay_250ms
 16DC                   .dbline 303
 16DC           ;  angle_1B(90); angle_1C(90); angle_3B(90); angle_3C(90); // put down legs
 16DC 0AE5              ldi R16,90
 16DE 96D8              xcall _angle_1B
 16E0                   .dbline 303
 16E0 0AE5              ldi R16,90
 16E2 A5D8              xcall _angle_1C
 16E4                   .dbline 303
 16E4 0AE5              ldi R16,90
 16E6 FBD8              xcall _angle_3B
 16E8                   .dbline 303
 16E8 0AE5              ldi R16,90
 16EA 0AD9              xcall _angle_3C
 16EC                   .dbline 304
 16EC           ;  delay_250ms(); 
 16EC 0E940101          xcall _delay_250ms
 16F0                   .dbline 306
 16F0           ;  
 16F0           ;  servo_calibration(); //push towards forward
 16F0 DBD9              xcall _servo_calibration
 16F2                   .dbline 307
 16F2           ;  motion_busy = 0; 
 16F2 2224              clr R2
 16F4 20920900          sts _motion_busy,R2
 16F8                   .dbline -2
 16F8           L260:
 16F8                   .dbline 0 ; func end
 16F8 0895              ret
 16FA                   .dbend
 16FA                   .dbfunc e next_letter _next_letter fV
 16FA           ;              i -> R20,R21
                        .even
 16FA           _next_letter::
 16FA 4A93              st -y,R20
 16FC 5A93              st -y,R21
 16FE                   .dbline -1
 16FE                   .dbline 322
 16FE           ; }
 16FE           ; 
 16FE           ; 
 16FE           ; /*****************************************************************
 16FE           ;       The functions below describe the scribing of letters.
 16FE           ;       Each letter starts when hexapod is at upright position
 16FE           ;       and after scribing out the letter, the hexapod ends with
 16FE           ;       facing right position. So, to start off with next letter
 16FE           ;       again, next_letter() function must be called which not only
 16FE           ;       resets the hexapod position to facing UP but also keeps
 16FE           ;       some distance from the previous letter scribbed out.
 16FE           ; *****************************************************************/
 16FE           ; 
 16FE           ; void next_letter()
 16FE           ; {
 16FE                   .dbline 324
 16FE           ;  int i;
 16FE           ;  for(i=0;i<10;i++)
 16FE 4427              clr R20
 1700 5527              clr R21
 1702           L262:
 1702                   .dbline 325
 1702           ;  {
 1702                   .dbline 326
 1702           ;  forward_3_legs();
 1702 CEDC              xcall _forward_3_legs
 1704           L266:
 1704                   .dbline 327
 1704           ;  while(motion_busy == 1);
 1704           L267:
 1704                   .dbline 327
 1704 80910900          lds R24,_motion_busy
 1708 8130              cpi R24,1
 170A E1F3              breq L266
 170C           X58:
 170C                   .dbline 328
 170C           ;  } 
 170C           L263:
 170C                   .dbline 324
 170C 4F5F              subi R20,255  ; offset = 1
 170E 5F4F              sbci R21,255
 1710                   .dbline 324
 1710 4A30              cpi R20,10
 1712 E0E0              ldi R30,0
 1714 5E07              cpc R21,R30
 1716 ACF3              brlt L262
 1718           X59:
 1718                   .dbline 329
 1718           ;  rotate_anticlockwise(90);
 1718 0AE5              ldi R16,90
 171A 10E0              ldi R17,0
 171C 4CDC              xcall _rotate_anticlockwise
 171E                   .dbline -2
 171E           L261:
 171E                   .dbline 0 ; func end
 171E 5991              ld R21,y+
 1720 4991              ld R20,y+
 1722 0895              ret
 1724                   .dbsym r i 20 I
 1724                   .dbend
 1724                   .dbfunc e write_H _write_H fV
 1724           ;              i -> R20,R21
 1724           ;              n -> R10,R11
                        .even
 1724           _write_H::
 1724 0E940000          xcall push_xgset300C
 1728 5801              movw R10,R16
 172A                   .dbline -1
 172A                   .dbline 336
 172A           ; }
 172A           ; 
 172A           ; //parameter n resembles to size of letter being scribed out
 172A           ; 
 172A           ; /***************  H  ***************/
 172A           ; void write_H(int n)
 172A           ; {
 172A                   .dbline 338
 172A           ;  int i;
 172A           ;  for(i=0;i<2*n;i++)
 172A 4427              clr R20
 172C 5527              clr R21
 172E 07C0              xjmp L273
 1730           L270:
 1730                   .dbline 339
 1730           ;  {
 1730                   .dbline 340
 1730           ;  forward();
 1730 68DC              xcall _forward
 1732           L274:
 1732                   .dbline 341
 1732           ;  while(motion_busy == 1);
 1732           L275:
 1732                   .dbline 341
 1732 80910900          lds R24,_motion_busy
 1736 8130              cpi R24,1
 1738 E1F3              breq L274
 173A           X60:
 173A                   .dbline 342
 173A           ;  }
 173A           L271:
 173A                   .dbline 338
 173A 4F5F              subi R20,255  ; offset = 1
 173C 5F4F              sbci R21,255
 173E           L273:
 173E                   .dbline 338
 173E 1501              movw R2,R10
 1740 220C              lsl R2
 1742 331C              rol R3
 1744 4215              cp R20,R2
 1746 5305              cpc R21,R3
 1748 9CF3              brlt L270
 174A           X61:
 174A                   .dbline 344
 174A           ;  
 174A           ;  for(i=0;i<n;i++)
 174A 4427              clr R20
 174C 5527              clr R21
 174E 07C0              xjmp L280
 1750           L277:
 1750                   .dbline 345
 1750           ;  {
 1750                   .dbline 346
 1750           ;  backward();
 1750 D6DC              xcall _backward
 1752           L281:
 1752                   .dbline 347
 1752           ;  while(motion_busy == 1);
 1752           L282:
 1752                   .dbline 347
 1752 80910900          lds R24,_motion_busy
 1756 8130              cpi R24,1
 1758 E1F3              breq L281
 175A           X62:
 175A                   .dbline 348
 175A           ;  }
 175A           L278:
 175A                   .dbline 344
 175A 4F5F              subi R20,255  ; offset = 1
 175C 5F4F              sbci R21,255
 175E           L280:
 175E                   .dbline 344
 175E 4A15              cp R20,R10
 1760 5B05              cpc R21,R11
 1762 B4F3              brlt L277
 1764           X63:
 1764                   .dbline 350
 1764           ;  
 1764           ;  rotate_clockwise(90);
 1764 0AE5              ldi R16,90
 1766 10E0              ldi R17,0
 1768 D5DB              xcall _rotate_clockwise
 176A                   .dbline 352
 176A           ;  
 176A           ;  for(i=0;i<n;i++)
 176A 4427              clr R20
 176C 5527              clr R21
 176E 07C0              xjmp L287
 1770           L284:
 1770                   .dbline 353
 1770           ;  {
 1770                   .dbline 354
 1770           ;  forward();
 1770 48DC              xcall _forward
 1772           L288:
 1772                   .dbline 355
 1772           ;  while(motion_busy == 1);
 1772           L289:
 1772                   .dbline 355
 1772 80910900          lds R24,_motion_busy
 1776 8130              cpi R24,1
 1778 E1F3              breq L288
 177A           X64:
 177A                   .dbline 356
 177A           ;  }
 177A           L285:
 177A                   .dbline 352
 177A 4F5F              subi R20,255  ; offset = 1
 177C 5F4F              sbci R21,255
 177E           L287:
 177E                   .dbline 352
 177E 4A15              cp R20,R10
 1780 5B05              cpc R21,R11
 1782 B4F3              brlt L284
 1784           X65:
 1784                   .dbline 358
 1784           ;  
 1784           ;  rotate_anticlockwise(90);
 1784 0AE5              ldi R16,90
 1786 10E0              ldi R17,0
 1788 16DC              xcall _rotate_anticlockwise
 178A                   .dbline 360
 178A           ;  
 178A           ;  for(i=0;i<n;i++)
 178A 4427              clr R20
 178C 5527              clr R21
 178E 07C0              xjmp L294
 1790           L291:
 1790                   .dbline 361
 1790           ;  {
 1790                   .dbline 362
 1790           ;  forward();
 1790 38DC              xcall _forward
 1792           L295:
 1792                   .dbline 363
 1792           ;  while(motion_busy == 1);
 1792           L296:
 1792                   .dbline 363
 1792 80910900          lds R24,_motion_busy
 1796 8130              cpi R24,1
 1798 E1F3              breq L295
 179A           X66:
 179A                   .dbline 364
 179A           ;  }
 179A           L292:
 179A                   .dbline 360
 179A 4F5F              subi R20,255  ; offset = 1
 179C 5F4F              sbci R21,255
 179E           L294:
 179E                   .dbline 360
 179E 4A15              cp R20,R10
 17A0 5B05              cpc R21,R11
 17A2 B4F3              brlt L291
 17A4           X67:
 17A4                   .dbline 366
 17A4           ;  
 17A4           ;  for(i=0;i<2*n;i++)
 17A4 4427              clr R20
 17A6 5527              clr R21
 17A8 07C0              xjmp L301
 17AA           L298:
 17AA                   .dbline 367
 17AA           ;  {
 17AA                   .dbline 368
 17AA           ;  backward();
 17AA A9DC              xcall _backward
 17AC           L302:
 17AC                   .dbline 369
 17AC           ;  while(motion_busy == 1);
 17AC           L303:
 17AC                   .dbline 369
 17AC 80910900          lds R24,_motion_busy
 17B0 8130              cpi R24,1
 17B2 E1F3              breq L302
 17B4           X68:
 17B4                   .dbline 370
 17B4           ;  }
 17B4           L299:
 17B4                   .dbline 366
 17B4 4F5F              subi R20,255  ; offset = 1
 17B6 5F4F              sbci R21,255
 17B8           L301:
 17B8                   .dbline 366
 17B8 1501              movw R2,R10
 17BA 220C              lsl R2
 17BC 331C              rol R3
 17BE 4215              cp R20,R2
 17C0 5305              cpc R21,R3
 17C2 9CF3              brlt L298
 17C4           X69:
 17C4                   .dbline 372
 17C4           ;  
 17C4           ;  rotate_anticlockwise(90);
 17C4 0AE5              ldi R16,90
 17C6 10E0              ldi R17,0
 17C8 F6DB              xcall _rotate_anticlockwise
 17CA                   .dbline -2
 17CA           L269:
 17CA                   .dbline 0 ; func end
 17CA 0C940000          xjmp pop_xgset300C
 17CE                   .dbsym r i 20 I
 17CE                   .dbsym r n 10 I
 17CE                   .dbend
 17CE                   .dbfunc e write_X _write_X fV
 17CE           ;              i -> R20,R21
 17CE           ;              n -> R10,R11
                        .even
 17CE           _write_X::
 17CE 0E940000          xcall push_xgset300C
 17D2 5801              movw R10,R16
 17D4                   .dbline -1
 17D4                   .dbline 377
 17D4           ; }
 17D4           ; 
 17D4           ; /***************  X  ***************/
 17D4           ; void write_X(int n)
 17D4           ; {
 17D4                   .dbline 379
 17D4           ;  int i;
 17D4           ;  for(i=0;i<2*n;i++)
 17D4 4427              clr R20
 17D6 5527              clr R21
 17D8 07C0              xjmp L309
 17DA           L306:
 17DA                   .dbline 380
 17DA           ;  {
 17DA                   .dbline 381
 17DA           ;  forward_4_5();
 17DA 2BDE              xcall _forward_4_5
 17DC           L310:
 17DC                   .dbline 382
 17DC           ;  while(motion_busy == 1);
 17DC           L311:
 17DC                   .dbline 382
 17DC 80910900          lds R24,_motion_busy
 17E0 8130              cpi R24,1
 17E2 E1F3              breq L310
 17E4           X70:
 17E4                   .dbline 383
 17E4           ;  }
 17E4           L307:
 17E4                   .dbline 379
 17E4 4F5F              subi R20,255  ; offset = 1
 17E6 5F4F              sbci R21,255
 17E8           L309:
 17E8                   .dbline 379
 17E8 1501              movw R2,R10
 17EA 220C              lsl R2
 17EC 331C              rol R3
 17EE 4215              cp R20,R2
 17F0 5305              cpc R21,R3
 17F2 9CF3              brlt L306
 17F4           X71:
 17F4                   .dbline 385
 17F4           ;  
 17F4           ;  for(i=0;i<n;i++)
 17F4 4427              clr R20
 17F6 5527              clr R21
 17F8 07C0              xjmp L316
 17FA           L313:
 17FA                   .dbline 386
 17FA           ;  {
 17FA                   .dbline 387
 17FA           ;  forward_3_2();
 17FA 74DE              xcall _forward_3_2
 17FC           L317:
 17FC                   .dbline 388
 17FC           ;  while(motion_busy == 1);
 17FC           L318:
 17FC                   .dbline 388
 17FC 80910900          lds R24,_motion_busy
 1800 8130              cpi R24,1
 1802 E1F3              breq L317
 1804           X72:
 1804                   .dbline 389
 1804           ;  }
 1804           L314:
 1804                   .dbline 385
 1804 4F5F              subi R20,255  ; offset = 1
 1806 5F4F              sbci R21,255
 1808           L316:
 1808                   .dbline 385
 1808 4A15              cp R20,R10
 180A 5B05              cpc R21,R11
 180C B4F3              brlt L313
 180E           X73:
 180E                   .dbline 391
 180E           ;  
 180E           ;  for(i=0;i<n;i++)
 180E 4427              clr R20
 1810 5527              clr R21
 1812 07C0              xjmp L323
 1814           L320:
 1814                   .dbline 392
 1814           ;  {
 1814                   .dbline 393
 1814           ;  forward_2_1();
 1814 C0DE              xcall _forward_2_1
 1816           L324:
 1816                   .dbline 394
 1816           ;  while(motion_busy == 1);
 1816           L325:
 1816                   .dbline 394
 1816 80910900          lds R24,_motion_busy
 181A 8130              cpi R24,1
 181C E1F3              breq L324
 181E           X74:
 181E                   .dbline 395
 181E           ;  }
 181E           L321:
 181E                   .dbline 391
 181E 4F5F              subi R20,255  ; offset = 1
 1820 5F4F              sbci R21,255
 1822           L323:
 1822                   .dbline 391
 1822 4A15              cp R20,R10
 1824 5B05              cpc R21,R11
 1826 B4F3              brlt L320
 1828           X75:
 1828                   .dbline 397
 1828           ;  
 1828           ;  for(i=0;i<2*n;i++)
 1828 4427              clr R20
 182A 5527              clr R21
 182C 07C0              xjmp L330
 182E           L327:
 182E                   .dbline 398
 182E           ;  {
 182E                   .dbline 399
 182E           ;  forward_5_6();
 182E 0CDF              xcall _forward_5_6
 1830           L331:
 1830                   .dbline 400
 1830           ;  while(motion_busy == 1);
 1830           L332:
 1830                   .dbline 400
 1830 80910900          lds R24,_motion_busy
 1834 8130              cpi R24,1
 1836 E1F3              breq L331
 1838           X76:
 1838                   .dbline 401
 1838           ;  }  
 1838           L328:
 1838                   .dbline 397
 1838 4F5F              subi R20,255  ; offset = 1
 183A 5F4F              sbci R21,255
 183C           L330:
 183C                   .dbline 397
 183C 1501              movw R2,R10
 183E 220C              lsl R2
 1840 331C              rol R3
 1842 4215              cp R20,R2
 1844 5305              cpc R21,R3
 1846 9CF3              brlt L327
 1848           X77:
 1848                   .dbline -2
 1848           L305:
 1848                   .dbline 0 ; func end
 1848 0C940000          xjmp pop_xgset300C
 184C                   .dbsym r i 20 I
 184C                   .dbsym r n 10 I
 184C                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\main.c
 0000           _remote_data::
 0000                   .blkb 8
 0008                   .dbfile C:\DOCUME~1\Administrator\Desktop\Embedded\icc_avr_hexapod\icc_avr_hexapod\hexapod_firebirdv.h
 0008                   .dbsym e remote_data _remote_data A[8:8]c
 0008           _angle_lower_byte_6C::
 0008                   .blkb 1
 0009                   .dbsym e angle_lower_byte_6C _angle_lower_byte_6C c
 0009           _angle_upper_byte_6C::
 0009                   .blkb 1
 000A                   .dbsym e angle_upper_byte_6C _angle_upper_byte_6C c
 000A           _angle_lower_byte_6B::
 000A                   .blkb 1
 000B                   .dbsym e angle_lower_byte_6B _angle_lower_byte_6B c
 000B           _angle_upper_byte_6B::
 000B                   .blkb 1
 000C                   .dbsym e angle_upper_byte_6B _angle_upper_byte_6B c
 000C           _angle_lower_byte_6A::
 000C                   .blkb 1
 000D                   .dbsym e angle_lower_byte_6A _angle_lower_byte_6A c
 000D           _angle_upper_byte_6A::
 000D                   .blkb 1
 000E                   .dbsym e angle_upper_byte_6A _angle_upper_byte_6A c
 000E           _angle_lower_byte_5C::
 000E                   .blkb 1
 000F                   .dbsym e angle_lower_byte_5C _angle_lower_byte_5C c
 000F           _angle_upper_byte_5C::
 000F                   .blkb 1
 0010                   .dbsym e angle_upper_byte_5C _angle_upper_byte_5C c
 0010           _angle_lower_byte_5B::
 0010                   .blkb 1
 0011                   .dbsym e angle_lower_byte_5B _angle_lower_byte_5B c
 0011           _angle_upper_byte_5B::
 0011                   .blkb 1
 0012                   .dbsym e angle_upper_byte_5B _angle_upper_byte_5B c
 0012           _angle_lower_byte_5A::
 0012                   .blkb 1
 0013                   .dbsym e angle_lower_byte_5A _angle_lower_byte_5A c
 0013           _angle_upper_byte_5A::
 0013                   .blkb 1
 0014                   .dbsym e angle_upper_byte_5A _angle_upper_byte_5A c
 0014           _angle_lower_byte_4C::
 0014                   .blkb 1
 0015                   .dbsym e angle_lower_byte_4C _angle_lower_byte_4C c
 0015           _angle_upper_byte_4C::
 0015                   .blkb 1
 0016                   .dbsym e angle_upper_byte_4C _angle_upper_byte_4C c
 0016           _angle_lower_byte_4B::
 0016                   .blkb 1
 0017                   .dbsym e angle_lower_byte_4B _angle_lower_byte_4B c
 0017           _angle_upper_byte_4B::
 0017                   .blkb 1
 0018                   .dbsym e angle_upper_byte_4B _angle_upper_byte_4B c
 0018           _angle_lower_byte_4A::
 0018                   .blkb 1
 0019                   .dbsym e angle_lower_byte_4A _angle_lower_byte_4A c
 0019           _angle_upper_byte_4A::
 0019                   .blkb 1
 001A                   .dbsym e angle_upper_byte_4A _angle_upper_byte_4A c
 001A           _angle_lower_byte_3C::
 001A                   .blkb 1
 001B                   .dbsym e angle_lower_byte_3C _angle_lower_byte_3C c
 001B           _angle_upper_byte_3C::
 001B                   .blkb 1
 001C                   .dbsym e angle_upper_byte_3C _angle_upper_byte_3C c
 001C           _angle_lower_byte_3B::
 001C                   .blkb 1
 001D                   .dbsym e angle_lower_byte_3B _angle_lower_byte_3B c
 001D           _angle_upper_byte_3B::
 001D                   .blkb 1
 001E                   .dbsym e angle_upper_byte_3B _angle_upper_byte_3B c
 001E           _angle_lower_byte_3A::
 001E                   .blkb 1
 001F                   .dbsym e angle_lower_byte_3A _angle_lower_byte_3A c
 001F           _angle_upper_byte_3A::
 001F                   .blkb 1
 0020                   .dbsym e angle_upper_byte_3A _angle_upper_byte_3A c
 0020           _angle_lower_byte_2C::
 0020                   .blkb 1
 0021                   .dbsym e angle_lower_byte_2C _angle_lower_byte_2C c
 0021           _angle_upper_byte_2C::
 0021                   .blkb 1
 0022                   .dbsym e angle_upper_byte_2C _angle_upper_byte_2C c
 0022           _angle_lower_byte_2B::
 0022                   .blkb 1
 0023                   .dbsym e angle_lower_byte_2B _angle_lower_byte_2B c
 0023           _angle_upper_byte_2B::
 0023                   .blkb 1
 0024                   .dbsym e angle_upper_byte_2B _angle_upper_byte_2B c
 0024           _angle_lower_byte_2A::
 0024                   .blkb 1
 0025                   .dbsym e angle_lower_byte_2A _angle_lower_byte_2A c
 0025           _angle_upper_byte_2A::
 0025                   .blkb 1
 0026                   .dbsym e angle_upper_byte_2A _angle_upper_byte_2A c
 0026           _angle_lower_byte_1C::
 0026                   .blkb 1
 0027                   .dbsym e angle_lower_byte_1C _angle_lower_byte_1C c
 0027           _angle_upper_byte_1C::
 0027                   .blkb 1
 0028                   .dbsym e angle_upper_byte_1C _angle_upper_byte_1C c
 0028           _angle_lower_byte_1B::
 0028                   .blkb 1
 0029                   .dbsym e angle_lower_byte_1B _angle_lower_byte_1B c
 0029           _angle_upper_byte_1B::
 0029                   .blkb 1
 002A                   .dbsym e angle_upper_byte_1B _angle_upper_byte_1B c
 002A           _angle_lower_byte_1A::
 002A                   .blkb 1
 002B                   .dbsym e angle_lower_byte_1A _angle_lower_byte_1A c
 002B           _angle_upper_byte_1A::
 002B                   .blkb 1
 002C                   .dbsym e angle_upper_byte_1A _angle_upper_byte_1A c
 002C           __6C::
 002C                   .blkb 1
 002D                   .dbsym e _6C __6C c
 002D           __6B::
 002D                   .blkb 1
 002E                   .dbsym e _6B __6B c
 002E           __6A::
 002E                   .blkb 1
 002F                   .dbsym e _6A __6A c
 002F           __5C::
 002F                   .blkb 1
 0030                   .dbsym e _5C __5C c
 0030           __5B::
 0030                   .blkb 1
 0031                   .dbsym e _5B __5B c
 0031           __5A::
 0031                   .blkb 1
 0032                   .dbsym e _5A __5A c
 0032           __4C::
 0032                   .blkb 1
 0033                   .dbsym e _4C __4C c
 0033           __4B::
 0033                   .blkb 1
 0034                   .dbsym e _4B __4B c
 0034           __4A::
 0034                   .blkb 1
 0035                   .dbsym e _4A __4A c
 0035           __3C::
 0035                   .blkb 1
 0036                   .dbsym e _3C __3C c
 0036           __3B::
 0036                   .blkb 1
 0037                   .dbsym e _3B __3B c
 0037           __3A::
 0037                   .blkb 1
 0038                   .dbsym e _3A __3A c
 0038           __2C::
 0038                   .blkb 1
 0039                   .dbsym e _2C __2C c
 0039           __2B::
 0039                   .blkb 1
 003A                   .dbsym e _2B __2B c
 003A           __2A::
 003A                   .blkb 1
 003B                   .dbsym e _2A __2A c
 003B           __1C::
 003B                   .blkb 1
 003C                   .dbsym e _1C __1C c
 003C           __1B::
 003C                   .blkb 1
 003D                   .dbsym e _1B __1B c
 003D           __1A::
 003D                   .blkb 1
 003E                   .dbsym e _1A __1A c
                        .area lit(rom, con, rel)
 0000           L193:
 0000 0000F040          .word 0x0,0x40f0
 0004           ; }
 0004           ; 
